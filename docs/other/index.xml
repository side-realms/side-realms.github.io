<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Others on お茶は綾鷹派</title>
    <link>http://side-realms.github.io/other/</link>
    <description>Recent content in Others on お茶は綾鷹派</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Aug 2023 17:54:50 +0900</lastBuildDate><atom:link href="http://side-realms.github.io/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo移行した</title>
      <link>http://side-realms.github.io/other/hugo/</link>
      <pubDate>Tue, 29 Aug 2023 17:54:50 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/hugo/</guid>
      <description>自分のやったことを備忘録的に残すものがほしかった
theme が反映されない問題 手元で toml を更新して hugo server してもインポートした theme が全く反映されなかった． hugo するときの出力ディレクトリを docs に変更して，github pages の方でも以下のように変更する
setting -&amp;gt; pages -&amp;gt; root -&amp;gt; docs
theme の html を変更しても反映されない問題 使っている hugo のバージョンが対応していなかったっぽいのでダウングレードしたら反映するようになった
Github Action git push したときに勝手に更新してくれるようにしたい name: GitHub Pages on: push: branches: - main # Set a branch name to trigger deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description>
    </item>
    
    <item>
      <title>java が生成する乱数を予測する</title>
      <link>http://side-realms.github.io/other/java_crypto/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/java_crypto/</guid>
      <description>java が生成する17兆通りある乱数を予測してみる
1. 乱数生成をするスクリプトを書く ソース
2. java の乱数生成を調べる 「予測できるらしい」しかしらないのでちゃんと調べる
Random random = new Random(); random.nextInt(); この nextInt() はソースコード内で next() を呼び出していて，next() のソースコードは以下のようになる
protected synchronized int next(int bits) { seed = (seed * 0x5DEECE66DL + 0xBL) &amp;amp; ((1L &amp;lt;&amp;lt; 48) - 1); return (int) (seed &amp;gt;&amp;gt;&amp;gt; (48 - bits)); } このとき乱数は seed で返されるが，それ以外の値は全て既知． なので，ひとつ seed が分かればそれ以降の seed も知ることができる． 取り出す seed は必要な上位 bit 分を最後の演算で呼び出す． 例えば nextInt(32) で呼び出したとき，返ってくるのは 32 bit の乱数で，残りの 16 bit が未知ということになる． これくらいなら簡単に予測できる</description>
    </item>
    
    <item>
      <title>OpenCV と python で顔トラッキングする</title>
      <link>http://side-realms.github.io/other/tracking/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/tracking/</guid>
      <description>Vtuber みたいなことをできるようにしてみたい． 顔認識ができればいいのか？
単純なマッチング まずは単純に動画内を移動するアイコンをマッチングできるようにする. 動くプレミアムボールに対してトラッキングし，判定した場所に長方形を描く
ソース
顔認識 openCV で顔認識ができるらしい． 既存の学習セットがあったのでこれを食べさせればできる．(下記は photoAC の素材で顔判定をしたもの)
ソース
カメラで顔認識 opencv でデバイスを開くようにすれば同じように検証できるらしい． 顔をトラッキングし続けて，顔を認識したらバックベアードのイラストを出すようにした
ソース</description>
    </item>
    
    <item>
      <title>shader programming</title>
      <link>http://side-realms.github.io/other/shader-programming/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/shader-programming/</guid>
      <description>GLSL レンダリングにおいて，シェーダはパイプラインのひとつ．
頂点シェーダ：座標変換，陰影処理など． テッセレーションシェーダ：頂点シェーダから送られてきたポリゴンを分割する． ジオメトリシェーダ：ポリゴンに対して頂点の増減をする．増やすだけでなく，減らすこともできる ラスタライズ：頂点シェーダで決まった座標と色をもとに，ピクセル単位で描画情報を設定する．補間するかんじ？ ピクセルシェーダ：ラスタライズされたピクセル一つ一つに対して何らかの処理（何らかの処理って？）を行い，GPUに返す レンダーバックエンド：ピクセルシェーダが決定した情報の書き込みを判断する．いくつかのテストがあるらしい． GLSL はシェーダを担当するが，シェーダだけではパイプラインは成り立たないので， 全体を管理する必要がある． この全体を管理するのが OpenGL で，これを JavaScript から操作できるようにしたのが WebGL．
101 画面を赤く塗るだけのコード
#version 300 es precision highp float; out vec4 fragColor; void main(){ fragColor = vec4(1.0, 0.0, 0.0, 1.0); } 補間関数を使う
#version 300 es precision highp float; out vec4 fragColor; uniform vec2 u_resolution; void main(){ vec2 pos = gl_FragCoord.xy / u_resolution.xy; vec3[4] col3= vec3[]( vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), vec3(1.</description>
    </item>
    
    <item>
      <title>YouTube を開くと叱ってくれるスクリプト</title>
      <link>http://side-realms.github.io/other/cortana/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/cortana/</guid>
      <description>YouTube 中毒なのでどうにかしたい
ソース
ウィンドウのステータスとか，マウスの位置みたいなパラメータは python では直接触ることができなくて， dll 経由で操作する必要がある． cdll の呼び出し規約は cdeclで， windll の呼び出し規約は stdcalなので， スタックを関数がクリーンアップするか，呼び出し元がするかに 注意する必要がある（たぶん） 今回は WindowsAPI なので stdcall
_get_running_window() で開いているウィンドウ(プロセス)の情報を取得する． 無限ループで回し続けて，「Youtube」が含まれる(表記ゆれふくむ)プロセスを見つけたら， mouse_move_close() でマウスを動かしてウィンドウを閉じる． 本来ならウィンドウを直接終了することもできるが，マウスの操作もしたいので今回はこれでいい
あとはトースト通知を出して，Cortana を呼び出しておしまい．Cortana 呼び出せるの知らなかったな</description>
    </item>
    
  </channel>
</rss>
