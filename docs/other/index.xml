<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Others on お茶は綾鷹派</title>
    <link>http://side-realms.github.io/other/</link>
    <description>Recent content in Others on お茶は綾鷹派</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 01 Jan 2025 17:14:14 +0900</lastBuildDate><atom:link href="http://side-realms.github.io/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>サイドチャネル攻撃に研究意義があるかどうか</title>
      <link>http://side-realms.github.io/other/sidechannelattack/</link>
      <pubDate>Wed, 01 Jan 2025 17:14:14 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/sidechannelattack/</guid>
      <description>きっかけ ～～下記嫌なポエム～～
昔，あるサイドチャネル攻撃の論文を否定的に評価しているツイートを見ました． 自分は結構気に入っていた論文だったので少しモヤりとしましたが，急にネットで攻撃するのも良くないと思った &amp;amp; 批判の範囲が広範でどこに引っかかっているか分からないということもあり，直接話すことにしました． と言っても自分から機会を作ったわけではなく，直接会う機会があったため，これを利用してなんとなく話してみることにしました． いざ話してみると技術的な部分ではなくサイドチャネル攻撃のアタックリサーチそのものに意義があるのか疑問に思っているようでした（どのサイドチャネル攻撃ですか？という感じではあるが）． そのためまともな議論にはならず（自分の説明不足と相手の知識不足が相まってお互いに不幸になったと思う），当時はなんとなくイヤな人だなと思ってしまっていました． その人の「意味のないハードウェアハックや基礎研究を大事にする」とか「寛大なパソコンオタクになる」みたいなブログを見て感銘を受け，ハードウェアセキュリティを将来の選択肢に入れただけに，知らない分野の基礎研究を全く受け入れない姿勢を見てそこそこショックではありました．
～～嫌なポエムおしまい～～
～～下記普通のポエム～～
というわけで，自分の中にあるサイドチャネル攻撃の研究意義をここで供養しようと思います． 自分は研究者ではないので，傍観者のただのポエムです
アタックリサーチの研究意義 攻撃者の上界を決めることにあると思っています． なので，悪意のない研究者が「どのような場合に攻撃できるか」を検証し，対策を促すことはセキュリティを強固にするために重要だと思います． 研究者が先に脆弱な部分を発見し，攻撃手法を提案，対策を促すというようなサイクルを回すことで，最終的には堅牢な部分だけが残ります．
セキュリティ的に完ぺきなものは存在しませんが，アタックリサーチのサイクルを回すことで，攻撃者が攻撃のために必要なコストを上げることができます． 攻撃者は攻撃によって得られる利益と必要なコストのバランスがとれなくなったとき，攻撃を止めます． この状態を目指すことがアタックリサーチの目標であると考えています．
非常に限定的なシチュエーションでしか成功しない攻撃の意義 これはその限定的なシチュエーションを正直に説明しているだけマシというか，攻撃者の上界を正確に説明しているという点で間違っていないことだと思います． そのうえで，攻撃者の上界（この条件なら攻撃が成立してしまう）を示すことはアタックリサーチの点で意義があると思っています．
また，サイドチャネル攻撃は「攻撃者に有利すぎる」という指摘もありました． サイドチャネル攻撃はもともとは IC カードなどに搭載されている暗号チップ，特に共通鍵暗号を攻撃するために研究されていました． 共通鍵暗号が安全であるとされるのは，攻撃者が情報を得ることができる区間と得ることができない区間が明確に区切られているからです． つまり，その明確な区別があって初めて共通鍵暗号は安全であると言え，これが覆されると共通鍵暗号は安全ではなくなります． サイドチャネル攻撃はこの前提を覆す攻撃であり，攻撃者が情報を得ることができる区間を増えていることに前提があります． なので，サイドチャネル攻撃は「攻撃者に有利すぎる」という指摘は，(その度合いにもよりますが)無為であると思っています． なぜなら，IoT 製品や仮想サーバのように攻撃者が HW を直接操作できる or 攻撃者と被害者が HW を共有している場合の脅威を考えるのがサイドチャネル攻撃であり，「攻撃者に有利」な条件でどのような脅威があるかを考えるべきだからです．
ある研究が，特に攻撃者に有利な条件でのみ成功している場合，これは先ほどと同じ議論であり，アタックリサーチにおいて明確に攻撃者の上界を示している点で優れた結果だと思います．
研究に名前つけたりサイトわざわざ作ったりして大げさ 特に研究者は自分で研究費を稼ぐ必要があるので，自分の研究を「すごそう」に見せることは重要な能力だと思います． また，少し調べると分かりますが研究に名前がつくことは全く珍しくありません．個人的には名前がついていると論文での参照や会話が非常に楽なのでこれは常態化してほしいと思っています． 個別サイトが設けられるのも要点だけがまとまっていてとても分かりやすいと思います．
技術的な側面だけで見れば，「名前がついているだけ」でその技術の優秀さは変動しません． 変わるものがあるとすれば読み手の主観だけです．
エッジケースすぎて対策側がかわいそう 技術的な議論に感情を入れるのは間違っていますが，あえて「かわいそう」という感情の責任を議論するならその矛先は研究者ではなく Intel の QA だと思います
～～ポエムおしまい～～</description>
    </item>
    
    <item>
      <title>インディーアニメーションにハマっている</title>
      <link>http://side-realms.github.io/other/animation/</link>
      <pubDate>Sun, 27 Oct 2024 03:54:35 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/animation/</guid>
      <description>最近は YouTube でインディーズのアニメーションを見るのが好きです． DIY 感が大好きだったのですが，最近のものはお金もかかっていてメジャー級のアニメーションとクオリティが大差ないですね． 違うのは持久力くらいでしょうか
失われた朝食 https://www.youtube.com/watch?v=rtcH5k2-fLM
キューライスの作品ですが，自分がインディーズアニメにハマるきっかけになった動画です． 見れば分かるように強迫性観念を描いたアニメで，作者インタビューでも同じようなことが言われています． キューライスの絵はカワイイので見やすいですが，BGM や SE がリアルで結構怖い． 自分で作っているらしいです．
DOUBLE KING https://www.youtube.com/watch?v=w_MSFkZHNi4
オーストラリア出身の Felix Colgrave の中ではおそらく一番人気のあるアニメで，朗らかな BGM，SE，イラスト，に反して内容はなかなかコアだと思います． このサイケ感なかなかないと思いますし BGM も素晴らしい
純粋な心で考察すると「人間の際限ない欲望ってアカンよね」みたいな話になりますが，う～んという感じだ．．．
The Sharpest Blade Ever https://www.youtube.com/watch?v=qRDj7fJkI4c
刀身がない剣の話． 実際は別次元に刀身だけ存在していて，みたいな話．
効果音が最高なんですよ．．． すごくミニマルな音なんだが，音楽とも差別化してあって聴きやすい
結局この刀が止まった生き物が一番強い&amp;hellip;ってコト!?
Stupid Dinner https://www.youtube.com/watch?v=2LQ9iasdc7Q
このパースのくずれ方とかマジでいいんだよな． オチが結構あっさりしていて，こういうの大好物です
cat city https://www.youtube.com/watch?v=NWeyUpqnKuk
同じ作者だが，この人は話がどうよりも圧倒的にかわいい絵とアニメーションで見たくなる． 人間ぶってる猫かわいすぎなんですよね
Star Watcher https://www.youtube.com/watch?v=TYkAxD1Ouck
なにこれ？
超適当な絵に見えるが，やってることはクオリティ高いし，どうやっているのか想像つかない（自分がアニメーションをやっていないからだと思うが．．．）． というかこの絵も常人には書けない
教訓？とか何にもなくてただ面白い映像をたくさん提供してくれる． この製作者をパクった動画もたくさん生まれており，人気の高さがうかがえます(小並)
Krabi https://www.youtube.com/watch?v=igROsVAk7fY
これなんですよ，世間が求めているものは．．．
ロボカニが自分を生み出すアニメーションかわいい． 貼り絵っぽいけどこの時代のアニメーションってどうなってるんだろうな
科学者がやっているのは，人為的に進化を作ることで最強の兵器を作ろうという計画． で，どんどん強いカニがあらわれるが，結局最終的に自分たちが作ったカニにやられるっていう話． 戦争の自殺性を描いている．
Resilience https://www.youtube.com/watch?v=F1QRZki3zb8
戦争みたいな人為的な破壊があっても自然が回復 (Resilience) する様子が書かれている．
Scavengers https://www.youtube.com/watch?v=1TRzemJbUsw</description>
    </item>
    
    <item>
      <title>社会人一年目 議事録</title>
      <link>http://side-realms.github.io/other/new/</link>
      <pubDate>Sat, 28 Sep 2024 00:15:48 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/new/</guid>
      <description>最初に この文章は何の意味もなく，個人の偏見であり，燃えさしです． 社会人 1 年目の内省を雑にダンプすることが目的であり，誰かに何かを伝えたいわけでも，何かを主張したいわけでもありません． 思いついたら追記していくので 1 年くらいかけて書く
読書 通勤時の環境音や広告，雑踏みたいな，容量を埋めるばかりで 1 銭にもならない情報を大量に受け入れるのに耐えられなくなったため(早い)，電車内の 3 h を使って読書をするようになりました． 疲労が深いときは電車と人に酔うので毎回読めるわけではありませんが，いい娯楽の一つになっています． いろんなジャンルを読んでみようと思っていますが，今のところミステリ・ハードボイルド・新書だけでした．
健康診断 A 判定ではない． 痩せすぎ + 赤血球多すぎ． 水を飲みましょう．
Vtuber ぽこピーと轟京子，おむらいす食堂を日常的に見ている． 無理に Vtuber としての体裁を繕わない雰囲気が性に合う．
にじさんじはあまり熱心に見ていない． ジョー力一と idios，黒井しばを睡眠導入にしている．
あおぎり高校は熱心に見ている． ガチ恋営業は現実と創作の境目が迷子になるので苦手だが，最近はバラエティの感覚が戻ってきて嬉しい．
セキュリティのスタートアップ 技術は道具だと思っているので，技術力の高さで人間の順位をつける雰囲気はあまり好きではない(CTF のような競技形式をもつイベントはその限りではない)． そのため，具体的な名前は出さないが，一部のセキュリティのスタートアップは性に合わない． Twitter で暴れる有名人は無視していればいい． 実力も運のうちです
品川駅 意外と食事のコスパがいい．電車の発着でワイヤレスイヤホンが途切れる．地元より治安が良い．駅前の政治色が強い．
Twitter お気に入りアカウント Tattoos I would get if I had money
PokémonHttps
ダク俣
毎日キレる斑鳩ルカ
飲み会 楽しいです． でもなかなか自分から誘う勇気はないなあと思っています． まあ誰しも誘って断られたらしんどい&amp;hellip;
ソフトせんべい 20 枚 120 円． 朝食にちょうどいい．
ソルトレイク CCS ワークショップの ASHES に論文が通ったためソルトレイクまで出張した． 治安は比較的良い．乾燥している．アジア系が多い？</description>
    </item>
    
    <item>
      <title>Hugo移行した</title>
      <link>http://side-realms.github.io/other/hugo/</link>
      <pubDate>Tue, 29 Aug 2023 17:54:50 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/hugo/</guid>
      <description>自分のやったことを備忘録的に残すものがほしかった
theme が反映されない問題 手元で toml を更新して hugo server してもインポートした theme が全く反映されなかった． hugo するときの出力ディレクトリを docs に変更して，github pages の方でも以下のように変更する
setting -&amp;gt; pages -&amp;gt; root -&amp;gt; docs
theme の html を変更しても反映されない問題 使っている hugo のバージョンが対応していなかったっぽいのでダウングレードしたら反映するようになった
Github Action git push したときに勝手に更新してくれるようにしたい name: GitHub Pages on: push: branches: - main # Set a branch name to trigger deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description>
    </item>
    
    <item>
      <title>java が生成する乱数を予測する</title>
      <link>http://side-realms.github.io/other/java_crypto/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/java_crypto/</guid>
      <description>java が生成する17兆通りある乱数を予測してみる
1. 乱数生成をするスクリプトを書く ソース
2. java の乱数生成を調べる 「予測できるらしい」しかしらないのでちゃんと調べる
Random random = new Random(); random.nextInt(); この nextInt() はソースコード内で next() を呼び出していて，next() のソースコードは以下のようになる
protected synchronized int next(int bits) { seed = (seed * 0x5DEECE66DL + 0xBL) &amp;amp; ((1L &amp;lt;&amp;lt; 48) - 1); return (int) (seed &amp;gt;&amp;gt;&amp;gt; (48 - bits)); } このとき乱数は seed で返されるが，それ以外の値は全て既知． なので，ひとつ seed が分かればそれ以降の seed も知ることができる． 取り出す seed は必要な上位 bit 分を最後の演算で呼び出す． 例えば nextInt(32) で呼び出したとき，返ってくるのは 32 bit の乱数で，残りの 16 bit が未知ということになる． これくらいなら簡単に予測できる</description>
    </item>
    
    <item>
      <title>OpenCV と python で顔トラッキングする</title>
      <link>http://side-realms.github.io/other/tracking/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/tracking/</guid>
      <description>Vtuber みたいなことをできるようにしてみたい． 顔認識ができればいいのか？
単純なマッチング まずは単純に動画内を移動するアイコンをマッチングできるようにする. 動くプレミアムボールに対してトラッキングし，判定した場所に長方形を描く
ソース
顔認識 openCV で顔認識ができるらしい． 既存の学習セットがあったのでこれを食べさせればできる．(下記は photoAC の素材で顔判定をしたもの)
ソース
カメラで顔認識 opencv でデバイスを開くようにすれば同じように検証できるらしい． 顔をトラッキングし続けて，顔を認識したらバックベアードのイラストを出すようにした
ソース</description>
    </item>
    
    <item>
      <title>shader programming</title>
      <link>http://side-realms.github.io/other/shader-programming/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/shader-programming/</guid>
      <description>GLSL レンダリングにおいて，シェーダはパイプラインのひとつ．
頂点シェーダ：座標変換，陰影処理など． テッセレーションシェーダ：頂点シェーダから送られてきたポリゴンを分割する． ジオメトリシェーダ：ポリゴンに対して頂点の増減をする．増やすだけでなく，減らすこともできる ラスタライズ：頂点シェーダで決まった座標と色をもとに，ピクセル単位で描画情報を設定する．補間するかんじ？ ピクセルシェーダ：ラスタライズされたピクセル一つ一つに対して何らかの処理（何らかの処理って？）を行い，GPUに返す レンダーバックエンド：ピクセルシェーダが決定した情報の書き込みを判断する．いくつかのテストがあるらしい． GLSL はシェーダを担当するが，シェーダだけではパイプラインは成り立たないので， 全体を管理する必要がある． この全体を管理するのが OpenGL で，これを JavaScript から操作できるようにしたのが WebGL．
101 画面を赤く塗るだけのコード
#version 300 es precision highp float; out vec4 fragColor; void main(){ fragColor = vec4(1.0, 0.0, 0.0, 1.0); } 補間関数を使う
#version 300 es precision highp float; out vec4 fragColor; uniform vec2 u_resolution; void main(){ vec2 pos = gl_FragCoord.xy / u_resolution.xy; vec3[4] col3= vec3[]( vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), vec3(1.</description>
    </item>
    
    <item>
      <title>YouTube を開くと叱ってくれるスクリプト</title>
      <link>http://side-realms.github.io/other/cortana/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/cortana/</guid>
      <description>YouTube 中毒なのでどうにかしたい
ソース
ウィンドウのステータスとか，マウスの位置みたいなパラメータは python では直接触ることができなくて， dll 経由で操作する必要がある． cdll の呼び出し規約は cdeclで， windll の呼び出し規約は stdcalなので， スタックを関数がクリーンアップするか，呼び出し元がするかに 注意する必要がある（たぶん） 今回は WindowsAPI なので stdcall
_get_running_window() で開いているウィンドウ(プロセス)の情報を取得する． 無限ループで回し続けて，「Youtube」が含まれる(表記ゆれふくむ)プロセスを見つけたら， mouse_move_close() でマウスを動かしてウィンドウを閉じる． 本来ならウィンドウを直接終了することもできるが，マウスの操作もしたいので今回はこれでいい
あとはトースト通知を出して，Cortana を呼び出しておしまい．Cortana 呼び出せるの知らなかったな</description>
    </item>
    
  </channel>
</rss>
