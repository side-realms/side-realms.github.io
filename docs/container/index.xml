<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Containers on お茶は綾鷹派</title>
    <link>http://side-realms.github.io/container/</link>
    <description>Recent content in Containers on お茶は綾鷹派</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 13 Sep 2023 18:40:52 +0900</lastBuildDate><atom:link href="http://side-realms.github.io/container/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自作コンテナ1</title>
      <link>http://side-realms.github.io/container/own/</link>
      <pubDate>Wed, 13 Sep 2023 18:40:52 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/own/</guid>
      <description>缶コーヒー，飲めたことない
自作コンテナ 簡単に復習だけ
namespace カーネルのリソースを隔離するためのしくみ
PID: PID は新しいプロセスができるたびにインクリメントされた整数がプロセスの識別子として付与される． コンテナの中では独立した PID を見せたいが，同じ PID をもったプロセスが複数できると不便． MNT: マウントポイントに関するリソースの隔離．他の namespace に影響を与えることなくマウント，案マウントをすることができる NET: プロセスのネットワークスタックを分離する．メインのネットワーク namespace の他に仮想イーサネットペアを作り，namespace 上に仮想リンクを作る UTS: UTS namespace でホスト名とドメイン名を分離する． IPC: IPC に関するリソースを分離する．POSIX メッセージキュー USER: namespace ごとに UID/GID をマッピングすることができる．プロセスは，namespace の外では 0 以外の UID を持つ一方で，namespace では UID を 0 として持つことができ，root のように振舞うことができる． CGroup システムリソースを使うプロセスをグループ化して，それぞれのグループで リソースの使用量をコントロールできる．
Layer filesystem namespace と cgroup はコンテナがもつシステムの分離とリソース共有 の役割を果たすが，レイヤー layered filesystems は マシンイメージ全体を効率的に移動することができる． コンテナの rootfs はレイヤ構造で管理されている． イメージは特定のファイルシステムに依存しない形で定義されていて，簡単に移植できる．
骨組み func main() { switch os.Args[1] { case &amp;#34;run&amp;#34;: // 引数に run をとると execute を実行できる execute(os.</description>
    </item>
    
    <item>
      <title>kubernetes</title>
      <link>http://side-realms.github.io/container/kubernetes/</link>
      <pubDate>Sun, 03 Sep 2023 14:14:38 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/kubernetes/</guid>
      <description>kubernetes コンテナを管理，スケールさせるためのツール（コンテナオーケストレーションツール） https://kubernetes.io/docs/concepts/overview/#why-you-need-kubernetes-and-what-can-it-do
kubernetes では負荷分散やストレージオーケストレーション，セキュリティなどが機能としてある． 基本的に kubectl で kubernetes クラスタを操作する．
https://www.cncf.io/wp-content/uploads/2020/09/Kubernetes-architecture-diagram-1-1-1024x698.png
Contorol Plane は Node(Pod が実行されるマシンで，コンテナをまとめた単位)を制御する
Control Panel API server: kubernetes クラスタを操作するための REST interface を提供する．Pod やサービスに対する操作はエンドポイントでプログラムされている Scheduler: リソース容量を監視して，Node のパフォーマンスが最適になるように管理する Controller manager: Node がダウンしたなどのイベントに対して宣言との差異を確認する kubelet: コンテナが実行されていることを確認するために pod の状態を追跡する kube proxy: サービスから Node に流入するトラフィックを管理する etcd: クラスタの状態を保存する Component Pod: コンテナをまとめるグループで，kubernetes の最小単位．Pod には IP アドレスが割り当てられていて，同じコンテナの Pod は同じリソース（メモリなど）を共有する． Deployment: Node 上で動く Pod の管理をする．希望する数の Pod を常に動かしておくなど Servise: 個々の Pod において，IP アドレスなど多くのものが生え変わりのたびに変化するので，このアドレスのルーティングなどを行う．Pods はユニークな存在ではないので，ダウンタイムを少なくする工夫が必要 Ingress: 負荷分散．クラスタ外から来る通信をロードバランサによって制御する．制御されたトラフィックを service にルーティングする． やってみる とりあえず windwos に minikube をインストールする． 今回は virtualbox を使う</description>
    </item>
    
    <item>
      <title>クラウドネイティブ</title>
      <link>http://side-realms.github.io/container/cncf/</link>
      <pubDate>Sat, 02 Sep 2023 15:42:29 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/cncf/</guid>
      <description>高尾山でビールが飲みたい
クラウドネイティブ クラウドネイティブという言葉を初めて聞いたので少しだけ調べる
VM ではなく，高密度で構成できるコンテナを基本にする． これにより，高速なスケーリングであったり，高速なデプロイが可能になる
マイクロサービス システムを細かいサービスに分解し，そのそれぞれを連携させることでシステムを機能させる．局所的案機能追加・修正などが可能 サービスメッシュ 細かいサービスを管理するのがコンテナで，このコンテナ間の通信などを管理する 宣言型 API コンテナ間の通信は API を介して行われるが，この API の定義を宣言すれば使えるようになる（生成される？）ような API イミュータブルインフラストラクチャ インフラの更新をコンテナに影響せず行うことができる マイクロサービス システムを細かいサービスに分解し，それぞれで連携させることでシステムを機能させる
サービスごとにチームが存在するので，チームそれぞれで自律的に開発・運用ができる
仕様の自由度が高い
スケーリングがしやすい
サービスが大きくなると attack surface が増える
アクセス制御・通信保護の負担が大きくなる
サービス個々が頻繁に変化するので依存は危険
サービスメッシュ サービスレベルの通信をサービスに制御させるのではなく，インフラで制御するようにする ログのフォーマットやタイムアウトなど統一させるべき機能が減る 言語の多様性に振り回されない サービスの前にプロキシコンテナを配置し，通信処理の役割を担わせる サービスのコンテナに付随するのでサイドカーコンテナともいわれる プロキシ側で認証や暗号化，出力の管理などをする 通信の保護：暗号化，認証，アクセス制御 耐障害性：ロードバランサ，サーキットブレーカー 監視：メトリクス，ログ，トレース収集 権限管理：コンテナの特権排除など 宣言型 API サービス同士を接続する API として使われるのが宣言型 API kubernetes が pod の数を自動制御するようなこと サービスがダウンしたときに自動的に回復したり，負荷が高まった時に自動的にノードを増やせる イミュータブルインフラストラクチャ インフラのアップデートに伴って動かなくなることはよくある アップデートが必要な場合は，アップデート後の OS を用いた環境を立ち上げて古い環境を破壊する 問題があった場合のロールバックも簡単 </description>
    </item>
    
    <item>
      <title>自作 strace</title>
      <link>http://side-realms.github.io/container/strace/</link>
      <pubDate>Wed, 30 Aug 2023 18:59:45 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/strace/</guid>
      <description>おすすめのガンプラ，随時募集しています
strace seccomp がよく分からなかったので監視系で strace を作ってみる
strace はプロセスが使ってるシステムコールとかの呼び出しをトレースできる
strace は ptrace(2) でプロセスを監視しており，これによって呼び出されるシステムコールや その引数を見ている．
第一引数で ptrace リクエストの内容（？），第二引数にプロセスの pid を指定する．
long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data); 他プロセスをトレースするためには，対象のプロセスにアタッチし，一時的に親になる必要がある． ptrace が実行されると，トレーサーは，システムコールを呼び出したタイミングなどで 子プロセスに停止するよう命令し，カーネルは子プロセスを SIGTRAP で停止する．
strace を作る まずはアタッチ・デタッチの動きをみるだけ
int main(int argc, char *argv[]){ if(argc &amp;lt; 2){ fprintf(stderr, &amp;#34;pid needs\n&amp;#34;); exit(1); } pid_t pid = atoi(argv[1]); printf(&amp;#34;attach to PID: %d\n&amp;#34;, pid); long ret = ptrace(PTRACE_ATTACH, pid, NULL, NULL); if(ret&amp;lt;0){ perror(&amp;#34;atttach failed&amp;#34;); exit(1); } printf(&amp;#34;attached to %d\n&amp;#34;, pid); sleep(5); ret = ptrace(PTRACE_DETACH, pid, NULL, NULL); if(ret&amp;lt;0){ perror(&amp;#34;failed to detach&amp;#34;); exit(1); } printf(&amp;#34;detached from %d\n&amp;#34;, pid); return 0; } この状態で top コマンドを打ち，動きを見てみると sleep(5) の間，top コマンドの動きが止まっていることが分かる． これはさっき書いた「カーネルは子プロセスを SIGTRAP で停止する」の部分． ptrace されるプロセスは，シグナルごとにいちいち停止するので，waitpid で状態を確認する必要があるらしい．</description>
    </item>
    
    <item>
      <title>Namespace</title>
      <link>http://side-realms.github.io/container/namespace/</link>
      <pubDate>Wed, 30 Aug 2023 10:04:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/namespace/</guid>
      <description>モンエナ スイカ味，ほんとうにまずい
namespace namespace は，プロセスをグループ化して隔離空間を作り出すのに一役買っている． namaspace 大まかな機能があるわけではなく，隔離したいリソースごとに機能が分離している． (mount namespace, PID namespace とか)
OS 起動時にはデフォルトの namespace が存在し，全てのプロセスが属している． このうえで，そのリソースを隔離させたいかを指定してコンテナを作る．
unshare unshare &amp;ndash;mount とか unshare &amp;ndash;pid みたいな感じで namespace を作る． ネットワーク以外はこれで隔離できるらしい 各プロセスが動作している namespace に関する情報は /proc/[PID]/ns で見れる．
ここに表示されている数字が同じなら同じ namespace に属している． この /proc/[PID]/ns は，プロセスを既存の namespace で動かしたいときに使うこともある． setns は既存の namespace でプロセスを動かすことを実現するが(https://tenforward.hatenablog.com/entries/2014/08/14)，このときの引数にさっきの ns 指定される．
mount namespace ファイルシステムを特定のディレクトリに関連付けるための処理をマウントといい， マウントが行われるディレクトリをマウントポイントという． あるパーティション(例えば /dev/sdc1)にファイルシステムを作ってルートとしてマウントした場合， ルートがマウントポイントになる． この下に別のファイルシステムをマウントすることもできる．
mount namespace は，その namespace 内のプロセスから見えるマウントポイントを分離する． なので，ある mount namespace から別の mount namespace を見たときにそのマウントポイントが見えない． コンテナごとに独立したファイルシステムを使うことができる．
/root/hosts ファイルをバインドマウント先として /etc/hosts をマウントする． ファイルを確認すると同じ内容が見えることが分かる．</description>
    </item>
    
    <item>
      <title>コンテナ入門する</title>
      <link>http://side-realms.github.io/container/nyuumon/</link>
      <pubDate>Tue, 29 Aug 2023 19:51:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/nyuumon/</guid>
      <description>昆虫ロック弾けるようになりたい
コンテナ コンテナはプロセス自体は同じ OS で動いていて，これを OS のカーネル機能によって隔離する． 使えるリソースを分離して，ホスト OS で動くプロセスとか他のコンテナから独立した空間を作る． カーネルに「コンテナ」の仕組みがあるわけではなく，namespace とか cgroup みたいな いくつかのシステムを組み合わせてコンテナを作っている． なので Docker や LXC で作りが違う
メリット コンテナはプロセスなので起動速度はプロセスに近い VM と比較してエミュレートの必要がないためオーバーヘッドがすくない アプリケーションだけをコンテナ起動できる デメリット 異なる OS 用のバイナリは動かない 基本のカーネルは同じなのでカーネルの操作はできない 基本技術 CRI/OCI CRI: ユーザからの要求を受けてコンテナとの通信をする．イメージの取得や展開，ネットワークのセットアップなど．コンテナの直接の操作は低レイヤランタイムに命令を出す．containerd とか CRI-O. OCI: 高レイヤランタイムから命令を受けて，コンテナとして実行するプロセスをホストから分離して実行する．runc とか crun. レイヤ コンテナイメージはレイヤの集合体で，コンテナ実行時にこれらがマージされる．
layer:ルートファイルシステムのデータ .json:実行環境を再現するための情報 ファイルシステム コンテナ内とホストではファイルシステムを分離したいことが多い． このとき，ホスト内にあるディレクトリをコンテナの root ディレクトリにする．
chroot: プロセスのルートディレクトリを変更することができる． ただし jailbreak が可能なので chroot を使う場合はコンテナの chroot の capability を剥脱する必要があるが(CAP_SYS_CHROOT)，ユースケース的に不便なことも多いのでデフォルトでは剥奪しない． 代わりに pivot_root を使う
pivot_root: ルートファイルシステムを入れ替える． ファイルシステムごとに入れ替えるので，コンテナ側からは root のファイルシステムを見ることはできない． また，pivot_root には厳しい条件がある．</description>
    </item>
    
  </channel>
</rss>
