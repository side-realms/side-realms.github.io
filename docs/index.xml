<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>お茶は綾鷹派</title>
    <link>http://side-realms.github.io/</link>
    <description>Recent content on お茶は綾鷹派</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Sep 2023 14:14:38 +0900</lastBuildDate><atom:link href="http://side-realms.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubernetes</title>
      <link>http://side-realms.github.io/container/kubernetes/</link>
      <pubDate>Sun, 03 Sep 2023 14:14:38 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/kubernetes/</guid>
      <description>kubernetes コンテナを管理，スケールさせるためのツール（コンテナオーケストレーションツール） https://kubernetes.io/docs/concepts/overview/#why-you-need-kubernetes-and-what-can-it-do
kubernetes では負荷分散やストレージオーケストレーション，セキュリティなどが機能としてある． 基本的に kubectl で kubernetes クラスタを操作する．
https://www.cncf.io/wp-content/uploads/2020/09/Kubernetes-architecture-diagram-1-1-1024x698.png
Contorol Plane は Node(Pod が実行されるマシンで，コンテナをまとめた単位)を制御する
Control Panel API server: kubernetes クラスタを操作するための REST interface を提供する．Pod やサービスに対する操作はエンドポイントでプログラムされている Scheduler: リソース容量を監視して，Node のパフォーマンスが最適になるように管理する Controller manager: Node がダウンしたなどのイベントに対して宣言との差異を確認する kubelet: コンテナが実行されていることを確認するために pod の状態を追跡する kube proxy: サービスから Node に流入するトラフィックを管理する etcd: クラスタの状態を保存する Component Pod: コンテナをまとめるグループで，kubernetes の最小単位．Pod には IP アドレスが割り当てられていて，同じコンテナの Pod は同じリソース（メモリなど）を共有する． Deployment: Node 上で動く Pod の管理をする．希望する数の Pod を常に動かしておくなど Servise: 個々の Pod において，IP アドレスなど多くのものが生え変わりのたびに変化するので，このアドレスのルーティングなどを行う．Pods はユニークな存在ではないので，ダウンタイムを少なくする工夫が必要 Ingress: 負荷分散．クラスタ外から来る通信をロードバランサによって制御する．制御されたトラフィックを service にルーティングする． やってみる とりあえず windwos に minikube をインストールする． 今回は virtualbox を使う</description>
    </item>
    
    <item>
      <title>クラウドネイティブ</title>
      <link>http://side-realms.github.io/container/cncf/</link>
      <pubDate>Sat, 02 Sep 2023 15:42:29 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/cncf/</guid>
      <description>高尾山でビールが飲みたい
クラウドネイティブ クラウドネイティブという言葉を初めて聞いたので少しだけ調べる
VM ではなく，高密度で構成できるコンテナを基本にする． これにより，高速なスケーリングであったり，高速なデプロイが可能になる
マイクロサービス システムを細かいサービスに分解し，そのそれぞれを連携させることでシステムを機能させる．局所的案機能追加・修正などが可能 サービスメッシュ 細かいサービスを管理するのがコンテナで，このコンテナ間の通信などを管理する 宣言型 API コンテナ間の通信は API を介して行われるが，この API の定義を宣言すれば使えるようになる（生成される？）ような API イミュータブルインフラストラクチャ インフラの更新をコンテナに影響せず行うことができる マイクロサービス システムを細かいサービスに分解し，それぞれで連携させることでシステムを機能させる
サービスごとにチームが存在するので，チームそれぞれで自律的に開発・運用ができる
仕様の自由度が高い
スケーリングがしやすい
サービスが大きくなると attack surface が増える
アクセス制御・通信保護の負担が大きくなる
サービス個々が頻繁に変化するので依存は危険
サービスメッシュ サービスレベルの通信をサービスに制御させるのではなく，インフラで制御するようにする ログのフォーマットやタイムアウトなど統一させるべき機能が減る 言語の多様性に振り回されない サービスの前にプロキシコンテナを配置し，通信処理の役割を担わせる サービスのコンテナに付随するのでサイドカーコンテナともいわれる プロキシ側で認証や暗号化，出力の管理などをする 通信の保護：暗号化，認証，アクセス制御 耐障害性：ロードバランサ，サーキットブレーカー 監視：メトリクス，ログ，トレース収集 権限管理：コンテナの特権排除など 宣言型 API サービス同士を接続する API として使われるのが宣言型 API kubernetes が pod の数を自動制御するようなこと サービスがダウンしたときに自動的に回復したり，負荷が高まった時に自動的にノードを増やせる イミュータブルインフラストラクチャ インフラのアップデートに伴って動かなくなることはよくある アップデートが必要な場合は，アップデート後の OS を用いた環境を立ち上げて古い環境を破壊する 問題があった場合のロールバックも簡単 </description>
    </item>
    
    <item>
      <title>自作 strace</title>
      <link>http://side-realms.github.io/container/strace/</link>
      <pubDate>Wed, 30 Aug 2023 18:59:45 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/strace/</guid>
      <description>おすすめのガンプラ，随時募集しています
strace seccomp がよく分からなかったので監視系で strace を作ってみる
strace はプロセスが使ってるシステムコールとかの呼び出しをトレースできる
strace は ptrace(2) でプロセスを監視しており，これによって呼び出されるシステムコールや その引数を見ている．
第一引数で ptrace リクエストの内容（？），第二引数にプロセスの pid を指定する．
long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data); 他プロセスをトレースするためには，対象のプロセスにアタッチし，一時的に親になる必要がある． ptrace が実行されると，トレーサーは，システムコールを呼び出したタイミングなどで 子プロセスに停止するよう命令し，カーネルは子プロセスを SIGTRAP で停止する．
strace を作る まずはアタッチ・デタッチの動きをみるだけ
int main(int argc, char *argv[]){ if(argc &amp;lt; 2){ fprintf(stderr, &amp;#34;pid needs\n&amp;#34;); exit(1); } pid_t pid = atoi(argv[1]); printf(&amp;#34;attach to PID: %d\n&amp;#34;, pid); long ret = ptrace(PTRACE_ATTACH, pid, NULL, NULL); if(ret&amp;lt;0){ perror(&amp;#34;atttach failed&amp;#34;); exit(1); } printf(&amp;#34;attached to %d\n&amp;#34;, pid); sleep(5); ret = ptrace(PTRACE_DETACH, pid, NULL, NULL); if(ret&amp;lt;0){ perror(&amp;#34;failed to detach&amp;#34;); exit(1); } printf(&amp;#34;detached from %d\n&amp;#34;, pid); return 0; } この状態で top コマンドを打ち，動きを見てみると sleep(5) の間，top コマンドの動きが止まっていることが分かる． これはさっき書いた「カーネルは子プロセスを SIGTRAP で停止する」の部分． ptrace されるプロセスは，シグナルごとにいちいち停止するので，waitpid で状態を確認する必要があるらしい．</description>
    </item>
    
    <item>
      <title>Namespace</title>
      <link>http://side-realms.github.io/container/namespace/</link>
      <pubDate>Wed, 30 Aug 2023 10:04:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/namespace/</guid>
      <description>モンエナ スイカ味，ほんとうにまずい
namespace namespace は，プロセスをグループ化して隔離空間を作り出すのに一役買っている． namaspace 大まかな機能があるわけではなく，隔離したいリソースごとに機能が分離している． (mount namespace, PID namespace とか)
OS 起動時にはデフォルトの namespace が存在し，全てのプロセスが属している． このうえで，そのリソースを隔離させたいかを指定してコンテナを作る．
unshare unshare &amp;ndash;mount とか unshare &amp;ndash;pid みたいな感じで namespace を作る． ネットワーク以外はこれで隔離できるらしい 各プロセスが動作している namespace に関する情報は /proc/[PID]/ns で見れる．
ここに表示されている数字が同じなら同じ namespace に属している． この /proc/[PID]/ns は，プロセスを既存の namespace で動かしたいときに使うこともある． setns は既存の namespace でプロセスを動かすことを実現するが(https://tenforward.hatenablog.com/entries/2014/08/14)，このときの引数にさっきの ns 指定される．
mount namespace ファイルシステムを特定のディレクトリに関連付けるための処理をマウントといい， マウントが行われるディレクトリをマウントポイントという． あるパーティション(例えば /dev/sdc1)にファイルシステムを作ってルートとしてマウントした場合， ルートがマウントポイントになる． この下に別のファイルシステムをマウントすることもできる．
mount namespace は，その namespace 内のプロセスから見えるマウントポイントを分離する． なので，ある mount namespace から別の mount namespace を見たときにそのマウントポイントが見えない． コンテナごとに独立したファイルシステムを使うことができる．
/root/hosts ファイルをバインドマウント先として /etc/hosts をマウントする． ファイルを確認すると同じ内容が見えることが分かる．</description>
    </item>
    
    <item>
      <title>コンテナ入門する</title>
      <link>http://side-realms.github.io/container/nyuumon/</link>
      <pubDate>Tue, 29 Aug 2023 19:51:30 +0900</pubDate>
      
      <guid>http://side-realms.github.io/container/nyuumon/</guid>
      <description>昆虫ロック弾けるようになりたい
コンテナ コンテナはプロセス自体は同じ OS で動いていて，これを OS のカーネル機能によって隔離する． 使えるリソースを分離して，ホスト OS で動くプロセスとか他のコンテナから独立した空間を作る． カーネルに「コンテナ」の仕組みがあるわけではなく，namespace とか cgroup みたいな いくつかのシステムを組み合わせてコンテナを作っている． なので Docker や LXC で作りが違う
メリット コンテナはプロセスなので起動速度はプロセスに近い VM と比較してエミュレートの必要がないためオーバーヘッドがすくない アプリケーションだけをコンテナ起動できる デメリット 異なる OS 用のバイナリは動かない 基本のカーネルは同じなのでカーネルの操作はできない 基本技術 CRI/OCI CRI: ユーザからの要求を受けてコンテナとの通信をする．イメージの取得や展開，ネットワークのセットアップなど．コンテナの直接の操作は低レイヤランタイムに命令を出す．containerd とか CRI-O. OCI: 高レイヤランタイムから命令を受けて，コンテナとして実行するプロセスをホストから分離して実行する．runc とか crun. レイヤ コンテナイメージはレイヤの集合体で，コンテナ実行時にこれらがマージされる．
layer:ルートファイルシステムのデータ .json:実行環境を再現するための情報 ファイルシステム コンテナ内とホストではファイルシステムを分離したいことが多い． このとき，ホスト内にあるディレクトリをコンテナの root ディレクトリにする．
chroot: プロセスのルートディレクトリを変更することができる． ただし jailbreak が可能なので chroot を使う場合はコンテナの chroot の capability を剥脱する必要があるが(CAP_SYS_CHROOT)，ユースケース的に不便なことも多いのでデフォルトでは剥奪しない． 代わりに pivot_root を使う
pivot_root: ルートファイルシステムを入れ替える． ファイルシステムごとに入れ替えるので，コンテナ側からは root のファイルシステムを見ることはできない． また，pivot_root には厳しい条件がある．</description>
    </item>
    
    <item>
      <title>Hugo移行した</title>
      <link>http://side-realms.github.io/other/hugo/</link>
      <pubDate>Tue, 29 Aug 2023 17:54:50 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/hugo/</guid>
      <description>自分のやったことを備忘録的に残すものがほしかった
theme が反映されない問題 手元で toml を更新して hugo server してもインポートした theme が全く反映されなかった． hugo するときの出力ディレクトリを docs に変更して，github pages の方でも以下のように変更する
setting -&amp;gt; pages -&amp;gt; root -&amp;gt; docs
theme の html を変更しても反映されない問題 使っている hugo のバージョンが対応していなかったっぽいのでダウングレードしたら反映するようになった
Github Action git push したときに勝手に更新してくれるようにしたい name: GitHub Pages on: push: branches: - main # Set a branch name to trigger deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://side-realms.github.io/about/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/about/</guid>
      <description> like Budweiser ぽこピー おむらいす食堂 YMO dislike </description>
    </item>
    
    <item>
      <title>java が生成する乱数を予測する</title>
      <link>http://side-realms.github.io/other/java_crypto/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/java_crypto/</guid>
      <description>java が生成する17兆通りある乱数を予測してみる
1. 乱数生成をするスクリプトを書く ソース
2. java の乱数生成を調べる 「予測できるらしい」しかしらないのでちゃんと調べる
Random random = new Random(); random.nextInt(); この nextInt() はソースコード内で next() を呼び出していて，next() のソースコードは以下のようになる
protected synchronized int next(int bits) { seed = (seed * 0x5DEECE66DL + 0xBL) &amp;amp; ((1L &amp;lt;&amp;lt; 48) - 1); return (int) (seed &amp;gt;&amp;gt;&amp;gt; (48 - bits)); } このとき乱数は seed で返されるが，それ以外の値は全て既知． なので，ひとつ seed が分かればそれ以降の seed も知ることができる． 取り出す seed は必要な上位 bit 分を最後の演算で呼び出す． 例えば nextInt(32) で呼び出したとき，返ってくるのは 32 bit の乱数で，残りの 16 bit が未知ということになる． これくらいなら簡単に予測できる</description>
    </item>
    
    <item>
      <title>OpenCV と python で顔トラッキングする</title>
      <link>http://side-realms.github.io/other/tracking/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/tracking/</guid>
      <description>Vtuber みたいなことをできるようにしてみたい． 顔認識ができればいいのか？
単純なマッチング まずは単純に動画内を移動するアイコンをマッチングできるようにする. 動くプレミアムボールに対してトラッキングし，判定した場所に長方形を描く
ソース
顔認識 openCV で顔認識ができるらしい． 既存の学習セットがあったのでこれを食べさせればできる．(下記は photoAC の素材で顔判定をしたもの)
ソース
カメラで顔認識 opencv でデバイスを開くようにすれば同じように検証できるらしい． 顔をトラッキングし続けて，顔を認識したらバックベアードのイラストを出すようにした
ソース</description>
    </item>
    
    <item>
      <title>shader programming</title>
      <link>http://side-realms.github.io/other/shader-programming/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/shader-programming/</guid>
      <description>GLSL レンダリングにおいて，シェーダはパイプラインのひとつ．
頂点シェーダ：座標変換，陰影処理など． テッセレーションシェーダ：頂点シェーダから送られてきたポリゴンを分割する． ジオメトリシェーダ：ポリゴンに対して頂点の増減をする．増やすだけでなく，減らすこともできる ラスタライズ：頂点シェーダで決まった座標と色をもとに，ピクセル単位で描画情報を設定する．補間するかんじ？ ピクセルシェーダ：ラスタライズされたピクセル一つ一つに対して何らかの処理（何らかの処理って？）を行い，GPUに返す レンダーバックエンド：ピクセルシェーダが決定した情報の書き込みを判断する．いくつかのテストがあるらしい． GLSL はシェーダを担当するが，シェーダだけではパイプラインは成り立たないので， 全体を管理する必要がある． この全体を管理するのが OpenGL で，これを JavaScript から操作できるようにしたのが WebGL．
101 画面を赤く塗るだけのコード
#version 300 es precision highp float; out vec4 fragColor; void main(){ fragColor = vec4(1.0, 0.0, 0.0, 1.0); } 補間関数を使う
#version 300 es precision highp float; out vec4 fragColor; uniform vec2 u_resolution; void main(){ vec2 pos = gl_FragCoord.xy / u_resolution.xy; vec3[4] col3= vec3[]( vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), vec3(1.</description>
    </item>
    
    <item>
      <title>treasure trove</title>
      <link>http://side-realms.github.io/treasure/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/treasure/</guid>
      <description>｢あ｣｢え｣｢お｣っていう奴 random.dog 柴犬がすき
Eclair De Lune 12:27 よくまとまっていてすごい．新しい曲を知りたいときに参照する
DON PA PPO / ガチ恋ぽんぽこ【MV】 ニセコイラジオ 一生聞いてた(る)
俺ガイル 助けてくれ</description>
    </item>
    
    <item>
      <title>waniCTF2023</title>
      <link>http://side-realms.github.io/writeup/wanictf2023/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/writeup/wanictf2023/</guid>
      <description>初心者~中級者の CTF ．個人参加．beginner は全解きしたいのきもちで挑んだが分かりやすい問題が多くて色んな技術にスムーズに入門することができた． これを機に CTF 入門していきたいきもち
waniCTF2023
official writeup
crypto EZDORSA_Lv1 ChatGPT に入れたらできた．すげえ～
EZDORSA_Lv2 e が小さいので RSA の運用的にまずい．RSA の暗号化において $C=M^e\mod N$ だが，ここで $e$ が小さいと $M^e$ も小さくなる． このとき $M &amp;lt; \sqrt[e]{N}$ なら，$M^e &amp;lt; N$ より $\mod N$が関係なくなる． すると $C=M^e$ になるので，$M = \sqrt[e]{C}$ でもとまる
import gmpy2 from Crypto.Util.number import * # 提供されたoutput.txtの内容 n = 25465155563758206895066841861765043433123515683929678836771513150236561026403556218533356199716126886534636140138011492220383199259698843686404371838391552265338889731646514381163372557117810929108511770402714925176885202763093259342499269455170147345039944516036024012941454077732406677284099700251496952610206410882558915139338028865987662513205888226312662854651278789627761068396974718364971326708407660719074895819282719926846208152543027213930660768288888225218585766787196064375064791353928495547610416240104448796600658154887110324794829898687050358437213471256328628898047810990674288648843902560125175884381 e = 7 c = 25698620825203955726406636922651025698352297732240406264195352419509234001004314759538513429877629840120788601561708588875481322614217122171252931383755532418804613411060596533561164202974971066750469395973334342059753025595923003869173026000225212644208274792300263293810627008900461621613776905408937385021630685411263655118479604274100095236252655616342234938221521847275384288728127863512191256713582669212904042760962348375314008470370142418921777238693948675063438713550567626953125 tmp = pow(5, 100, n) c = c // tmp print(tmp) print(c) m,result = gmpy2.</description>
    </item>
    
    <item>
      <title>YouTube を開くと叱ってくれるスクリプト</title>
      <link>http://side-realms.github.io/other/cortana/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/other/cortana/</guid>
      <description>YouTube 中毒なのでどうにかしたい
ソース
ウィンドウのステータスとか，マウスの位置みたいなパラメータは python では直接触ることができなくて， dll 経由で操作する必要がある． cdll の呼び出し規約は cdeclで， windll の呼び出し規約は stdcalなので， スタックを関数がクリーンアップするか，呼び出し元がするかに 注意する必要がある（たぶん） 今回は WindowsAPI なので stdcall
_get_running_window() で開いているウィンドウ(プロセス)の情報を取得する． 無限ループで回し続けて，「Youtube」が含まれる(表記ゆれふくむ)プロセスを見つけたら， mouse_move_close() でマウスを動かしてウィンドウを閉じる． 本来ならウィンドウを直接終了することもできるが，マウスの操作もしたいので今回はこれでいい
あとはトースト通知を出して，Cortana を呼び出しておしまい．Cortana 呼び出せるの知らなかったな</description>
    </item>
    
    <item>
      <title>フォルマント解析</title>
      <link>http://side-realms.github.io/sound/formants/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/formants/</guid>
      <description>フォルマント解析，やってみたいよな
フォルマント 人間の音声は声帯の振動で生成され，声道を通って発せられる． このとき，声道の周波数特性によって，特定の周波数が強調される． この強調された周波数をフォルマント周波数といい， 低いものから順番に第一フォルマント，第二フォルマント・・・という
下図は IA に「あいうえお」ってしゃべらせたときの波形
これはただの stft なのでフォルマントではなく基本周波数とその高調波のはずで，これを LPC 解析とかして 包絡線を求めることでどの周波数が強調されているかを知ることができる，という認識
原理は全くわかってないけどとりあえずやってみる
librosa 初めてちゃんと調べたけど便利だ あんまり正確じゃない気がするけどまあいいか
それっぽい周波数にそれっぽいピークがでているのでまあ．．．
formants.py
LPC 解析 音の複雑な形を線形の式で予測してしまおうというこころみ
時刻 n における信号を x_n と表すと，線形予測の結果は以下のようになる
$$ \overline{x_n} = -(\alpha_1 x_{n-1} + \alpha_2 x_{n-2} + &amp;hellip; + \alpha_p x_{n-p}) $$
真の値との誤差を計算すると以下のようになる．
$$ \epsilon_n = x_n - \overline{x_n} = x_n + \alpha_1 x_{n-1} + \alpha_2 x_{n-2} + &amp;hellip; + \alpha_p x_{n-p}$$
このときに誤差をなるべく小さくするようにパラメータを決めてあげる必要がある． α (線形予測係数)をうまく選んであげればいい，みたいな感じ
さっきの式から以下のように畳み込みを表せる．
$$\overline{x_n} = x_n - \epsilon_n = - \alpha_n * x_n$$</description>
    </item>
    
    <item>
      <title>レコード</title>
      <link>http://side-realms.github.io/sound/record/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/record/</guid>
      <description>レコードは音質が良いって聞くけどあんまり信用していない
レコードの仕組み レコード盤には音波を記録した溝が彫られているが， この溝をレコード針が動くことでカートリッジに振動が伝わる． この振動を電気信号に変換し，アンプで増幅することで音になる． まあこれはいいんだけど，ステレオ再生ができる理由が分かっていない．
従来のモノラル再生は針が左右に動くだけで振動をトレースしている． で，さらにステレオ再生するにはもう一つの情報が必要なので， 単に針を増やす方法が考えられた．しかしこれは同期や信号処理部の難しさなどで発展しなかった． 今使われているのは 45/45 方式というもので，レコードの溝の左右にそれぞれのステレオ音を保存する． こうすると溝に対して 45 度に振動するので，一本の針でステレオを保存できる．
針が音溝に触れて振動すると，針を持っているカンチレバーを通してコイルや磁石に伝えられる． このコイルが磁石の磁界の中で振動することで，電磁誘導が起き，コイルに電気信号が発生する． このときカートリッジに磁石が巻いてあるものを MM 型，コイルが巻いてあるものを MC 型と区別する．
MM, MC カートリッジは高周波であればあるほど電圧が高くなるので (高周波であるほど針の追従速度が速くなるため)， 速度比例型カードリッジと呼ばれる． それ以外にも，針の動きを光の変化として捉える光カートリッジとか． そもそも速度比例型カートリッジないでも音質に違いがあるらしいが， 実際に買って比較できるほどのお金はないのであきらめる．
そもそもレコードが音がいいと言われる理由はおそらくアナログ入力・出力だからだと思う． CD はデジタル変換してしまっているため，解像度(量子化・標本化の部分) であったり，20 Hz ~ 20 kHz のフィルタだったりで音質が悪いといわれる． レコードはこうしたデジタル変換をしていないから，ということで音質が良いと言われているらしい． でもそもそもマイクは 20 kHz までしか再生できないし， カートリッジやプレーヤーがその再生に対応しているのかという問題がある． だから個人的にはフィルタよりも解像度の問題だと思っている． そういうことなら，デジタル mix したレコード盤は音質の面で良さがないことになるが そういうことなんだろうか． 加えてレコードはその再生方法に起因するノイズが大きい(後述)． かなり物理的な再生方法なので回転ムラであったり振動に邪魔される． CD はこうした欠点がない(?)ため，ノイズ的な面では CD の方が音質が良い気もする． だからつまり CD もレコードも一長一短だし「音質が良い」みたいな， 普遍的なようで何にも指標が定まっていない形容詞で表現しないほうが健全だと思っている．
とはいってもレコードを所持したい気持ちはあるし あのデカいアートワークを見たときの嬉しさや，アナログ感のある再生システムとかは好き
レコードの種類 LP とか EP とか色々サイズに違いがある． LP 以外のレコード買ったことないけど SP とかシングルとかめちゃめちゃ種類あって驚いた</description>
    </item>
    
    <item>
      <title>両生爬虫類</title>
      <link>http://side-realms.github.io/sound/amphibian_reptile/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/amphibian_reptile/</guid>
      <description>カエル好きやねん
基本的な聴覚特性 基本的に両生爬虫類は低音側に感度をもつ． 具体的には 1 kHz 以下周辺芋高い感度を持つ． だからといって，超音波領域に感度がないわけではない． 例えば，渓流にすむカエルなどは，渓流ノイズを避けるために 高周波側でコミュニケーションをとるように進化した．
耳の形についても，両生爬虫類は耳介を持たないことで知られている． また，鼓膜をもつものも限られており，加えてほとんどのカメと一部のカエルなどは鼓膜が露出している． 哺乳類の耳小骨とは違い，両生爬虫類は1つの耳小骨と耳小柱しかもたない．
爬虫類は，耳小柱がいくつかに分岐し，複数の経路を鼓膜とつないでいる． また，両生類は鼓膜からの振動に加えて，前脚と上肩甲骨からの骨伝導が内耳へ伝達する． 他にも，一部のカメは水中からの音を反響増幅させるために中耳腔が大きくなっていたり， 一部のカエルは肺や口腔から反響する音を内耳から聞き取る種も存在する．
カエル カエルの鳴き声は主に繁殖期にお互いのコミュニケーションをとるために使われる． 例えばオスはトリル音で広告音を出すことで求愛の合図をし，メスはそれより遅いトリル音で解除音を出すことで求愛から逃れようとする． このクリック音は，例えばアフリカツノガエルの場合は，喉頭筋が収縮することによって発せられる． 喉頭筋は二対が粘着質の体液でくっついているが，これが互いにはがされるときに空気が破裂することで クリック音が鳴る． このクリック音が鳴嚢で増幅され，共鳴することで外界に放送される．
広告音
基本的な機能は，求愛によってメスを呼び寄せることと，オスを排斥することである． これはどちらかしかない場合も，両方の機能を持つ場合もある． 例えばメスが超音波を聞くことができない種のカエルは，オスを排斥する効果しかない． 解除音
他のオスから繁殖を求められたときや，排卵の準備ができていないときに発する． ほとんどの場合，これで放免される．平和だ なわばり
例えば他のオスへの攻撃開始の合図であったり，他のオスの広告音を遮る役割がある． メスは広告音が聞こえない場合はなわばり音に引き寄せられるらしい． 危難音
捕食者に捕まった時に発する音だが，危険の合図には役に立たないらしい． 捕食者を驚かせることしかないらしい．それでええんか こうした発声を見るとわかるように，カエルの発声はオス・メスに限った話ではない． さらに，繁殖の際に鳴くメスの種類も存在する． しかし，一般的にメスの発声はとても小さい．これは，オスのみが鳴嚢をもつためである． メスの求愛音声は，一般的にオスからの応答という形で発声するため， 広範囲に伝達する必要がないことが理由だと考えられている．
ところで，カエルといえばコーラスである． 一般的にコーラスはカエルの広告音である． カエルは基本的に鼓膜をもつので，周囲の音を聞きながらコーラスをすることができる． このコーラスは，個体同士がなるべく鳴き声の重複を抑えるように鳴く傾向にある． これは同種の個体がたくさんいる状態でも同じ現象が確認でき， 完全でなくとも，互いの広告音に混ざらないように互いの広告音をずらして鳴く傾向にある． これは，集団の中で個々のオスが自分の存在を知らせる役割や， オス同士がけん制(なわばり)する役割があるらしい．
カエルに限った話ではないが，低周波音ノイズに埋もれないことや， 盗聴を防ぐなどの役割から超音波を使ったコミュニケーションを使うことがある． また，音源定位などの問題もある． つまり，カエルなどは頭が小さく，両耳に届く音の音圧差などが測りにくい． しかし，超音波を使って音源定位をすることで，可聴音よりも精度をあげることができている． 先に話したクボミミニオイガエルは，超音波を用いてコミュニケーションをとる． 普段の聴覚は 5 &amp;ndash; 7 kHz にピークをもつが，耳管を閉じると なんと 10 &amp;ndash; 34 kHz にシフトする．すげー
ヤモリ ヤモリは鳴く． 多くのヤモリは声帯の振動を口腔で増幅することで音を発しているが， 例外的にスキンクヤモリはしっぽを使って音を出す． ヤモリはオスメス両方鳴き，その種類は2つである．</description>
    </item>
    
    <item>
      <title>人間の音声</title>
      <link>http://side-realms.github.io/sound/voice/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/voice/</guid>
      <description>人間の発声 声を出そうとすると，左右の声帯が中央に寄る． 同時に肺からの呼気が声門を通り抜けると，狭くなった声帯を呼気が通り抜けて口に流れる 呼気が狭いところを流れると，広いところを流れる時より圧力が高くなるので(ベルヌーイの法則)，声門が一時的に閉じる． でも呼気は出続けるので，圧力に負けて声門がもう一度開く また同じようにして閉じる，開くを繰り返すので，声門から出力される空気の密度に濃淡ができる 濃淡が音波の縦波として伝わる 周波数は声門が開閉する回数，振幅は声門の開き幅，音色は声門の性質(どれくらい上手に開閉できるかとか，口腔や咽頭の形・容積とか)に対応している．
音響特性(あかさたな，とかの違い)は音色に対応している，口腔の形とか 鼻腔との接続があって母音・子音がつくられる． 生後すぐには構音はできず，喃語を通して発声器官を制御できるようになる．
しかし口腔や鼻腔に損傷があると発声障害になる．歯や感覚異常も同様． また，脳はもちろん，難聴も発声に影響する．つまり，自分の声をモニタリングできないので フィードバック制御ができなくなる．
ロンバード効果：自信が発した音声を雑音とともにフィードバック情報として得ているが，周囲の雑音が大きいと SNR が悪くなるので，自分の声を大きく・高くしようとする．車掌さんの声が高い理由はこれらしい．
delayed auditory feedback：自信の声にディレイをかけてフィードバックさせると，精神的ストレスになる．発声とフィードバックの異常がある吃音の治療に使われているらしい
人間の聴覚 耳介が集音し，鼓膜を振動させる
鼓膜にはツチ骨・キヌタ骨・アブミ骨(耳小骨)が付着していて，鼓膜とこれら耳小骨の底面積比とてこの原理によって振動が増幅されて内耳(蝸牛)に入力される．
蝸牛の入り口である卵円窓はアブミ骨と固着していて，アブミ骨が振動すると内部のリンパ液が振動する
リンパ液が振動し，基底膜にその振動が伝わる．
基底膜に付着している有毛細胞が振動すると，その振動が神経に電気信号として伝わる．
この有毛細胞は周波数特性があり，蝸牛の手前にあるほど高い周波数に対応している 加齢によって手前の細胞ほど反応しなくなり，高周波が聞こえづらくなる． 蝸牛は三層に分かれていて，上から「前庭階」「中心階」「鼓膜階」という．上下二層は細胞外液とだいたいおなじイオン組成になっているが，中央一層は独立してカリウムイオンに富んでいて(内リンパ液)，外リンパ液よりも +80 mV くらい高電位になっている．(なんで？)
中心階の基底膜に付着している有毛細胞は，感覚毛がある上部分だけを内リンパ液に浸していて，有毛細胞が振動すると感覚毛が開口する．すると内リンパ液の K+ は有毛細胞に流入し，発火する．これによって物理信号が電気信号に変換される．
伝音性難聴：空気振動が十分に伝わらないと当然難聴になる．耳小骨の異常や中耳の炎症など
感音性難聴：内耳に損傷がある場合，音がひずんだり，響いたりする．人工内耳を使う必要がある場合もある．人工内耳は，マイクとその電気信号を直接電極として内耳に挿入する．これによって直接発火させる．ただ，もともとの内耳の周波数分解能は 3500 個なのに対し，人工内耳は 20 個程度で，劣っている．しかし，適切なリハビリテーションを行うと電話での会話すらそん色なくできるようになるらしい．
ピッチ感覚 メル尺度：人間からみた音の聞こえに基づいた尺度で，1000 Hz が 1000 mel と決められている． この二倍に聞こえる音は 2000 mel だが，これが 2000 Hz とは限らない． また，音量が上昇すると周波数の低い音はより低く，高い音はより高く聞こえる． 昔の電子オルガンは倍音の少ない音がピッチがずれたように聞こえるらしい． また，これと関連して短音では音の高さが明確でなくなる． トーンピッチは純音として得られる音の高さの近くだが，クリックピッチ(2~15 msec) は純音としては知覚されないが，高低の判断は可能
絶対音感：音を聞いてその音の高さを判断することができる能力のこと． 相対音感は，2音間のピッチ関係を当てることができるが，絶対音感はその一音だけで半音まで特定できる． つまり音楽的なピッチクロマに対する判断能力のこと．
言語と音響特性 人間とサルは，同じ母音・子音を発することができる身体的構造を持ちながら，サルはそのような現象はない． これは，それを制御する神経基盤の違いが影響しているといわれている． さらに，表情にも変化があり，サルは唇を振動させるリップスマッキングという表情をもつが， これは人間が発話をする際の周波数と一致しており， この神経運動やその基盤が同窓でありながら別々の機能を獲得しているという進化史がある． また，人間の声帯は，もともとは気道に物が入らないような弁の役割をしていたが， これと呼気を利用して発話が副産物として生まれたという歴史がある． このように発話とは無相関な原因が発話的な能力を促進(差別化)しているらしい．</description>
    </item>
    
    <item>
      <title>分子</title>
      <link>http://side-realms.github.io/sound/molecule/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/molecule/</guid>
      <description>可聴化 可聴化という分野があるらしい． 視覚的に得られる情報よりも聴覚的に得られる情報の方が意味をもつことがある，みたいな考えがあるらしい． 機械の異音をベテランが察知するみたいなかんじだろうか． たしかに聴覚はいろんな情報を一度に受容できる，みたいな話は聞いたことがある． 視覚と比べてインテグラルに情報を得ることができる，という意味だと思うが， 得たい情報によって話が変わるような気もする．
ガイガーカウンタはこうした可聴化の試みの一つ． ガイガーカウンタは放射線物質が崩壊するときに飛んでくる粒子や電磁波の個数をカウントするもの． 高い電圧が印加されたガスに放射線が通過するとガスが電離するので，それによって生じた電子で放射線量を 測定する． このとき通過した放射線量をパルスの音に変化すれば，音の粗密で放射線量を 聴覚的に知ることができる． エネルギーとはまた別で，単に個数を数えている． 他にもヒッグス粒子の出現と配置を音に変換したものも存在するらしい． (soundcloud)
どうやって変換するのか，みたいな変形部分の考え方で色々議論があるらしい． 今回の分子の音も可聴化に関すること
分子の可聴化 基本的に，分子などの固有の振動スペクトルを，人間の可聴領域に転置するという方法でやる． 分子の振動はナノメートルの単位で振動しているが，これを耳に聞こえる範囲でどう可聴化するか， という部分が問題になる． 読んだ本では振動スペクトルを鍵盤の 88 鍵に割り当てていた． あとは聴かないとわからないので，可聴化のプロファイルよりは分子のどの部分に差が出るのか， みたいなことを見ていく
ところでこういう可聴化の音楽ってカリビアンな感じのが多い気がするんだけどなんか理由があるんだろうか．
血液型 血液型は ABO 型が見つかってからいくつも見つかっているが，まだこの ABO 型がよく知られている． 血液型の違いは，赤血球の表面から出ている糖鎖の構造の違いで分類されている． 糖鎖にある接合部にA遺伝子がくっつくか，B遺伝子がくっつけば，それぞれA型・B型になる． 両方くっつけばAB型，両方くっつかなければO型になる． この結合(スフィンゴ糖脂質というらしい)に差異があらわれる．
(参考)
アミノ酸 そもそもタンパク質はアミノ酸が多重結合したもので， 中心の炭素にカルボキシ基(COO-), アミノ基(HH3+) が結合し， いろんな側鎖が結合して違いが生まれる．
いろんなアミノ酸があるが，人間に必要な必須アミノ酸(9つ)は体内で生成されない． 体内にはタンパク質を構成しているアミノ酸の他に細胞や血液に蓄えられた 遊離アミノ酸というものがある． これはタンパク質の製造にアミノ酸が足りないときに無理やり引っ張ってこられるアミノ酸であるが， クオリティが低いのでいろんな不調につながる．へえ～～～～～～～～～～～～
(参考)
アラニン アラニンは筋肉とかアサリっていう印象がある． 酒を飲むとアルコールが摂取されるわけだが，これは肝臓で分解される． アルコールが脱水されるとアセトアルデヒドになり，これがさらに酢酸， 酢酸がさらに炭酸ガスと水に分解される，という順番． このアセトアルデヒドが二日酔いになるらしいが，これの分解を促進するのがアラニンというものらしい．
細胞の死に方 細胞は死ぬが，これには二種類ある． アポトーシスとネクローシスというふうに言われている． ネクローシスは化学的に細胞が死ぬことで，外部的な要因が大きい． 一方で，アポトーシスは，細胞にプログラムされた細胞死のことである． このアポトーシスは，最終的にマクロファージに食べられることで達成されるが， このためにはマクロファージにシグナルを出して気付いてもらう必要がある． このシグナルを伝達するのが Raf や Ras というものらしい． 例えばがん細胞が死ぬのもアポトーシスだし，胎児の指が発生するのもこのアポトーシスによる (胎児は指がくっついているが，アポトーシスによって指の間の細胞が死に，指ができる)．</description>
    </item>
    
    <item>
      <title>哺乳類</title>
      <link>http://side-realms.github.io/sound/bat/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/bat/</guid>
      <description>コウモリ コウモリはオオコウモリとコウモリに分類されるが，エコーロケーションをしているのはコウモリである． オオコウモリは視覚で定位している． コウモリはなんで超音波が出せるのか気になるが，基本的な部分は人間と同じで， 咽頭筋肉の高速コントロールができているから，ということらしい．
コウモリのエコーロケーションには二種類あり，FM だけの信号と CF-FM 信号がある． 定常周波数をもつ CF のあとに FM を流すパターンと FM だけの二つ． CF 部分の長さや FM の長さによってエコーロケーションの種が変化する． 周波数が互いに混信することもあるが，これは互いに自身の周波数を調整することで回避している．
イルカ イルカは声帯を持たず，その鳴き声はパルス音と連続音(クリックスとホイッスル)に分別される． 音源が何か，ということは議論されているが，噴気孔周辺であると信じられている．例えば クリックスは噴気孔で圧縮された呼気が鼻道を通り，脂肪嚢を振動させることで発音されると知られている． しかし，この周波数の調整方法などは解明されていない．
イルカの額にはメロンという脂肪塊があるが，これは脂肪嚢から発せられた音の指向性を調整する． しかし，この指向性の調整はどちらかというと頭蓋骨の方が役割が大きく， メロンは水中とのインピーダンス整合を果たしていることが知られている．
一方で，イルカは聴覚も重要である．水中は暗いためである．そのためエコーロケーションが使われる． イルカにも外耳はあるが，完全に閉塞しており，音は聞けない．かわりに下顎骨から音を受信して内耳に伝える． 中耳の耳小骨や内耳の三半規管などの仕組みは哺乳類とほとんど一緒だが，蝸牛がとても小さい． これは，水中で激しく運動するような状況でも正しく定位できるように感度を高くするためである． ところで，イルカのエコーロケーションは，餌の探知が主な目的である．その波長が 餌となる魚によく反射するように選択されているためである． また，パルスが多すぎると受信と送信の対応付けができないため，受信してから次のパルスを送信している． このエコーロケーションを使うことで，イルカは初めて見る物体の視覚的な形を認識できるらしい． つまり，反射した音だけを聞いて，それがどんな形をしているかを認識することができる．すご
これまでのクリックスはエコーロケーションのためのものだった．一方のホイッスルは， お互いが群れではぐれないようなコヒージョンコールとして使われている． このホイッスルは個体によって差があり，生後約一年かけて学んでいくものである． また，イルカは血縁関係にあるイルカとそうでないものをこのホイッスルで聞き分けられる． これは周蓮変調に個体パターンがあるためである．
クジラ クジラは採餌の他に歌うことが知られている． 規則的な音の配列と階層的な構造から，ソングといわれている． このソングは必ずしも求愛のためではなく，同性同士での信号のやり取りにも使われていることがある． このソングの構造は種別に変化があり，構造などに違いがある．
ジュゴン ジュゴンも複数の鳴き声をもち，チャープスクイークの他に，短時間のトリルやバークがある． このチャープには，相対的な距離の把握機能があるといわれている．また，幼獣は会得していない トリルは，性的行為や活動的な場合に発声されることが多い． そのため，自信の内的モチベーションを伝達する役割があるらしい．
マナティー マナティーはジュゴンやクジラとは違い，主に複数の周波数帯域で構成されるハーモニクスを用いる． この鳴音は個体識別に使われており，雌雄や年齢に依存する持続時間や基音の変化に依存している． マナティーかわいいよね
鰭脚類 アザラシやアシカなどは鰭脚類に分類されるが，これらはさらに陸上交尾型・水中交尾型に分類される． 陸上交尾型(アシカやアザラシ)は一夫多妻制だが，このときのハーレム形成のために争いの一部として鳴音が使われる． また，幼獣と母親が鳴音で通信することもあり，これは多数の母子から互いを識別するために使われている．
一方で，水中交尾型はハーレムを形成することはできず，様々な繁殖方法が広まっている．その中で， 特に水中で交尾する際に呼吸穴をふさぐことが重要なので，そのための威嚇として鳴音が使われることがある． 加えて，遠くの個体に自身の繁殖状態を伝達し，交尾を加速する役割もある． これらの性質から，もちろん繁殖期はよく鳴くし，非繁殖期は頻度が落ちる．
ところで，この鳴音がソナーの役割をもつかは議論されている． 鳴音以外の発達した感覚器が多くあるため，ソナーをする必要はあるのか？みたいなところ． 暗闇でも餌を捉えられると同時にクリックスの頻度が高くなるらしいが，一方で，目隠しをした状態では頻度が上がることはなかったらしい．おもろ
バイオロギング 特に海洋生物などは，自然界に存在する状態でどのような音を発しているか， 周囲の音からどのような影響をうけているか，などをロギングする必要がある． しかし，音をそのまま録音して送信するような形式のものはばかりではなく， 例えばクリックスのパルス音の音圧レベルと受信自国だけをロギングしたり，音以外にも 加速度センサなどを一緒に取り付けていることもある．取得したい音の種類によって得たい情報が変化するためである． また，これらの装着も課題の一つにある．毛があれば毛につければいいが，イルカやクジラには吸盤が必要である．</description>
    </item>
    
    <item>
      <title>植物</title>
      <link>http://side-realms.github.io/sound/seedling/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/seedling/</guid>
      <description>植物と振動 植物が振動に伴って成長速度を変化させることは知られている． 例えば，ロイヌナズナは，モンシロチョウの幼虫による葉の摂食を，振動を通じて認識している． これにより，化学防御物質を出すことで，防御反応を示す． これは，風や他の昆虫の振動では全く反応しない． また，食虫植物とかは振動で獲物を獲得している．
こうした攻めの検知以外にも，例えば羽音を聞いたら，花蜜を積極的に増やすこともある． こうすることで，花粉の輸送を促進する． また，コウモリに花粉の輸送を依頼している植物は，その超音波を検知している． 特に，この検知に特化して受け皿(皿葉)をもっている
機械感覚 例えばオジギソウは，摂食があると反応する． こんなかんじで，機械刺激を感じることができる． ヒマワリが太陽の方を向いたり，海岸沿いの近くに生えた木は風下に向かって伸びるなどもこれ．
植物が発する振動 植物は acoustic emission という，ある事象により振動を発生させる特性を持つ． 植物は日中，気孔を開いて蒸散を行うことで，中の水ポテンシャルを低下させる(水の量みたいなかんじだろうか)． これにより，内部では水ポテンシャルの低下に伴って負圧が発生し，根っこから水を引き上げる． このとき，例えば水やりを急にやめたりすると，その負圧に耐え切れず，気孔から空気を入れるようになる． すると内部で気泡が発生する．これをキャビテーションという． この気泡が急速に成長するにしたがって， acoustic emission が起こる． これを見ることで，植物がどれだけ水が通りやすいか，みたいなことを感知することができる．</description>
    </item>
    
    <item>
      <title>虫</title>
      <link>http://side-realms.github.io/sound/bug/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/bug/</guid>
      <description>発音 昆虫はめちゃめちゃ小さいけどすごく大きな音を出すのすごいよな，っていう&amp;hellip; 魚類と同じように，遠距離では減衰しにくい音圧，近距離は減衰しやすい粒子速度が使われている．
摩擦
例えばコオロギは硬い表皮を持っているが，この方さにより特有の摩擦器官をもつ． 片方の翅にはギザギザがあるが，一方の翅には摩擦片とこすり合わせることで音が出る． このヤスリの部分のギザギザの個数やこすり合わせる速度によって周波数が変化し， 種類によっては 120 kHz までの音を出すものも存在する． こういった音が翅に共振して，遠くまで届く．コオロギだけでなくてもアリやガなども摩擦器官をもつ． また，翅にも限らない． 振動膜
セミとかめちゃめちゃうるさいよな．．． セミの中にはクチクラの膜がある．(生物のにできる硬い膜) このクチクラの膜が tymbal muscle によって収縮されることでパキパキと音がする． これが腹部のほとんどを占める空気によって増幅されることでめちゃめちゃ大きい音が出る． 打撃
体の一部を打ち付けて大きな音をだす種類が存在する． 例えばヤガは両羽の背側に特殊な構造を打ち付けて羽ばたく． 空気放出
笛と同じ．スズメガの幼虫は腹部の気門から空気を放出して音をだす． 防衛に使われることが多い． はばたき
これは主に近距離通信に使われる． 例えばミツバチは歩きながらはばたくことで，花蜜の場所を別個体に伝える．(ミツバチのダンス) 振動発声
虫の中には振動を自ら発生させる種も存在する． 例えばシロアリは木材に自分の頭を打ち付けて，振動信号をつたることで他の個体に警戒音を伝える． カブトムシの蛹は背面を蛹に打ち付けて，他の幼虫の接近を妨げる． コモリグモは腹部を植物に打ち付けて，求愛する． 受音 昆虫には弦音器官という，虫に特殊に発達した感覚器が存在する． これが空気中を伝わるおとや振動を受容する．
音受容器
脊椎動物と同様に鼓膜があり，鼓膜と気管，最後に感覚細胞がある． 感覚細胞は鼓膜からの振動でももちろん反応するが，気嚢のある内側からでも振動する． これは音源定位に使われる．すなわち，気管で連結している鼓膜が音圧の差を検知する． この鼓膜の位置も色々で，前肢にいる種もあれば，胸部や翅にもつ種もある． これは，捕食者(コウモリ)からの信号をとらえることにそれぞれ特化している． コウモリはエコーロケーションに超音波を発するが，これを効率的にとらえることが目的である． また，触覚にあるジョンストン器官は，粒子速度を受容する． 例えばオスの蚊のジョンストン器官は，触覚の先端の 7 nm ほどの動きを感知することができる． 振動受容器
例えば植物を伝わる振動は減衰しづらく，昆虫にとって感知しやすい． 膝下や，腿節内に存在する弦音器官がこの振動を受容する． このような振動受容器がある一方で，鼓膜期間をもたない昆虫も存在する． 先ほどのように，鼓膜をもたない昆虫も存在するが，鼓膜をもつ昆虫は音響情報を使って， つがいへの定位や，捕食者の回避を行う． この音源定位は，哺乳類のときと同様に，一対の鼓膜の左右からの入力差を使う． しかし，昆虫はめちゃ小さいので，左右差も少なく，信号処理などなんらかの部分で工夫が必要になる． 例えば，魚のときと同じように位相差を使うことが考えられる． また，コウモリのエコーロケーションを使って捕食者回避を行うのであれば，今のままでも十分という考え方もある． さらに，ヤドリバエという種は，音源定位に特化した特徴をもつ． それらはコオロギの幼虫に寄生するため，生きるために音源定位が不可欠ということらしい． ヤドリバエの鼓膜はシーソーのような形になっており，片方から入ってきた音の周波数に合わせて 鼓膜の角度が変化する． これによって，時間差が約 40 倍程度も増幅されることになる． さらに，これが有毛細胞へ伝わり，神経の発火となると，活動電位の潜時の関係で 1000 倍程度も増幅される． (潜時は，神経が応答するまでの遅延時間なので，大きい音に対する応答は速く，小さい音に対する応答は遅い．)</description>
    </item>
    
    <item>
      <title>見たものログ</title>
      <link>http://side-realms.github.io/log/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/log/</guid>
      <description>2023 (06~) 漫画・本 ジョジョの奇妙な冒険：一部 岸部露伴は動かない ブルーピリオド 呪術廻戦 禪院真希かっこよすぎる．覚醒前も後も好き ブルーロック 絵，うますぎない？ 千切豹馬すき チェンソーマン 落下の悪魔のデザイン良すぎる 東京卍リベンジャーズ 三ツ谷と場地がかっこよすぎる ルリドラゴン 絵もかわいいしシナリオもローカルなファンタジーって感じがしてすごく好き 休載つらい&amp;hellip; 安静にしてください&amp;hellip; 光が死んだ夏 神系のホラーはよくあるけど切り口が新しくてとてもいい あかね噺 朱音かわいいね．．． 落語見てみようかな サンダー3 GANTZだと聞いていたけど思ってたよりGANTZだった 二頭身シーンの絵がすごいかわいい 壮大な話だと展開が遅く感じてしまうな 亜人 戦闘シーンかっこよすぎる 「死なない」だけだと直接の強さにならないけど使う人が使うとこんな使い方があるんだと思う 刷ったもんだ！ 印刷業全く知らなかったから勉強にもなる ムルシエラゴ いや，下心はないんで 黄泉のツガイ 荒川弘の新作，アツすぎる キャラクターが多いのにちゃんと覚えられるのはキャラが立ってるからだろうと思う リバイアサン 劇画が話と合ってていい 水と手と目 風景画のイメージがあったけど意外と人物画も描いてるんだな 裏バイト 死体清掃の回が一番怖い 不死身のパイセン ホラーコメディかと思ったら油断した アフターゴッド つらい 絵がうますぎる，部屋とか建物の絵が異常にうまい 「綺麗な顔」を描くのもうまい これまで言葉でしか語られなかった心情を悲劇の過程で具体的に絵で描く，みたいな，最悪の事態の結果，誰かからの愛を知ることになる，みたいな，そういうどうしようもない感情を描くのがうまい 僕の部屋のユウ子さん 泣いちまったよ 合コンに行ったら女がいなかった件 一昔前の二次創作みたいな絵柄でめちゃめちゃ好き pixiv 漁ってた頃を思い出す ウェルベルム よくある殺し合い漫画だけど殺しに重きを置いてないのがいい 絵もいい 鉄コン筋クリート ネズミ，かっこいいよ クロのつらさとかシロの強さが絵柄にあってると思う ピンポン ペコかっこいい 多分星野が主人公だと思う．そうであってほしい 不安の種 初代はマジで怖かったけどアスタリスクの方はオムニバスっぽくてあまり怖くない タコピーの原罪 胸糞エンドじゃなくてほんとうによかった ROPPEN 話がただ殺し合うだけじゃなくて面白い 政治を黒幕に出すんじゃなくて初めから出てくるのは印象がいい 極楽街 絵がうますぎる ダラとネイがかわいい 個人的に一番アツい パラレルリープシンドローム 絵がかわいい ただのタイムリープ系かとおもったらもう一つひねってていい 変な家 間取りの理由が一巻だけで終わりならイマイチだったけど予想以上に広がってておもしろい 映画 戦場のメリークリスマス キスされたときの坂本龍一の演技が迫真すぎて笑ってしまった 鬼気迫ってるわけでもないが平和と命の危機がうっすら共存している雰囲気がとても怖い 特に何もなくてもストレスがかかる ほんとうにつらい 最強のふたり もう少し大人になったら分かるんだろうか 8 1/2 名画らしいので見たが，過去・未来・妄想・夢が入り混じったつくりになっていて理解できない部分が多かった カトリックの話がよくでてきていて，主人公自身もカトリックにいい思い出はなさそうだったが，それが話にどう関わっているかはわからない 妻との仲もよくなく，それもそのはずで，妻との旅行でも全く抱こうとせずに映画監督は出演希望の女性ばかりに目を向けている 映画の撮影が始まらない中で，プロデューサーたちは主人公を催促するためにセットを作ったりカメラテストをしたり，撮影直前の記者会見を開いたりと，取り返しのつかない状況を作る 主人公は当然何も話せず机の下にもぐってしまい，最終的にはポケットの中の拳銃で自殺する．．．という妄想をする．当然生きているが映画監督としてのキャリアはもう死んでしまった 一方で妻とは急に和解していて（理由はよくわからなかった），また最後のシーンでは「人生は祭りだ．共に生きよう」と言って過去の人たち全員がおそろいの衣装で輪を作って踊る．最終的に少年だった自分（白い衣装に変わっている！）が退場して終わる ここまで見てやっと最初のシーンが理解できた．映画製作から逃げたい自分（空に浮かぶ自分）とそれをよしとしない周囲の関係者たち（グイドの足をヒモでつないで引き下ろそうとする）ということだろうか カッコーの巣の上で 刑務所逃れのために精神病を詐称したマクマーフィは精神病院に入院するが，その精神病院では婦長の管制下に置かれた生活を強いられる．マクマーフィはその環境に色々反発して最終的に脱走を試みるが．．．みたいな話 鬱エンドかと思ったらそうではなかった なんとなくチーフが鍵なんだろうなと思ってたらもはや主役だった カッコーの巣は英語で精神病院の蔑称らしい．そう考えてもチーフの話なんだなって感じがします 正直アメリカのここら辺の歴史(1960)は全く分からない．ネイティブアメリカンは現在約 7 割が都市に移住しているらしいが（正確な数字は分からない），この都市移住計画は結局ネイティブアメリカンの生活状況の改善に至らず，社会の同化も達成できなかった．結局，解体された部族と差別・貧困だけが残されたネイティブアメリカンはホームレス，アル中みたいな問題に巻き込まれてしまう．アメリカ政府にとって異質ななネイティブアメリカンを，管制下で管理し，正常な社会に同化させようという流れはこの精神病院と似ている．マクマーフィは管理から反発するが，結局ロボトミー手術によって無力化されてしまう．どれだけ抗っても社会の大きな流れを変えることはできないという鬱エンドかと思ったが，チーフは誰もが無理だと思っていた給水場を破壊し持ち上げ，窓を割って脱出する チーフがマクマーフィを殺した経緯はよくわからなかったが，ネイティブアメリカンにとって死は魂が肉体から解放されるという意味で救済らしいので，無力化されたマクマーフィを救済したんだろうと思う イージーライダー アメリカ人の二人が麻薬取引で手に入れた大金をもとにバイクに乗って色々する話 本当に自由であることを求めて旅する二人は当時のアメリカ人にとっては有害なのか単にヒッピーだからなのかは知らないが迫害をうける アメリカが説くような自由はあくまである程度制約をうけたうえでの自由であり，本来の意味で自由だと劇中の麻薬は当然殺人も許可されるような環境になる．結果，映画のようにあっけなく殺されてしまうんだと思った アニーホール コメディ部分は面白い ウディ・アレンの度量の狭さというか自分の価値観からしかものを見れない性格はなんともいえない 最初はうまくいっていても物理的に空間を共有し始めるととたんに互いのいやなところが見え始めて（それが同棲だろうけど）距離をとろうとするが，距離を取った瞬間にその虚無感を他責で埋めようとする（僕を愛していたくせに，みたいな）感じ さらば冬のかもめ 自分でなんとかできることを分かっているニコルソンとできないことの区別がついてないラリーの対比がよかった あっけなく分かれてしまうのも自分ではどうしようもない感じがしていい グリーンブック 人種差別というよりはマイノリティに焦点を当てた映画だと思う．ドンは黒人だけどそれ以上に孤立しているし両性愛だし，みたいな 時代が変われば価値観も変わるので，この時代にこれだけ乱雑に生きることができた人たち（主人公）と丁寧なくらし（現代から見れば当然のふるまいだけど）を意識している人が対立するのは当然で，この価値観とかを互いに分け合っているように見える 贖罪のようにこういったテーマの映画を作っていると思われるかもしれないし，まあ当人からしたらあんまりおもしろくはないと思う パーマネントバケーション アンチドラマをテーマにしているらしく，けだるい感じで何も起こらない退屈なものから逃げ出すことはできない，みたいなことを伝えたいらしいがよくわかっていない 単に不良の自分に酔っているような気もした ゴッドファーザー まだ 1 しか見てない 弁護士のトムが一番好き ブルーアワーにぶっ飛ばす 夏帆とシムウンギョンが出演していて，夏帆とシムウンギョンは親友という体で描かれているが，実はシムウンギョンは夏帆のイマジナリーフレンドで，夏帆は田舎を嫌う自分，シムウンギョンは田舎を好きになりたい自分ということらしい イマジナリーフレンドだろうというのは最後の夫が部屋を横切るシーンで分かったが，そうするとつじつまが合わない場面が多々ある 夏帆がもともと田舎を嫌っていた理由とか悩んでいる原因とかもよくわからない．田舎を嫌っていそうな雰囲気は伝わるけど（両親とか兄の漢字から）悩み事については特に言及されていない その男，凶暴につき ソナチネ キッズリターン ラヂオの時間 唐沢寿明あんなかっこいいの？？ スタンドバイミー つらくなってしまったよ かもめ食堂 映像がきれいだった．北欧だからなのかは知らない ピンポン あの髪型でまともに映れるの窪塚洋介だけだろ．．．まじで結婚してくれ mid90s レイがかっこよすぎる 桐島，部活やめるってよ アニメ リコリスリコイル シャドーハウス エミリコとケイトかわいいね シャドウが自分のこと名前で呼ぶのかわいい さすがに三期やってほしい，あの終わり方はアツい 生き人形とシャドウが同じ声優なのすごいね キルラキル 展開というかダイナミックな構成がすき DIY ツンデレかわいいね ワンダーエッグプライオリティ シナリオは若干不幸の押し付け感があったが，自殺の原因の追究はおもしろかった 作画も音楽もキャラデザも OP,ED も最高だったのに制作だけがダメで惜しい 総集編が二回あるのは謎だった 二期やってちゃんと伏線回収してほしい ゲーム 夜廻 かわいそうなのはつらい Undertale ここまでネタバレなしで遊べたのが本当に奇跡だとおもう アンダイン，好きだ．．． LOVE2 kuso Wo Long ソウルライクで，難易度もそれなり ボリュームはさすがコンシューマーって感じ helltaker 絵が良い detention 絵がかなりいい ジャンプスケアは少なめだが，ずっとじっとり怖い 政治的要素は思っていたよりも少ない（白色運動をテーマにしているらしい） HOLLOW KNIGHT かなり完成度が高い，コンシューマーレベルだと思う 難易度も高いしキャラもかわいい やりこみ要素はかなりつらい 続編待ってる．．． Luna&amp;rsquo;s fishing garden 釣りゲームだと聞いていたが釣り要素はかなり少なく，植栽とか伐採の方が重要になってくる 図鑑埋めも一瞬で終わったので少しだけ物足りないかもしれない a short hike ゼルダ × あつもり みたいな感じ 島民やキャンパーからのクエストをこなしつつ山頂を目指す ただのあつもりゲーかと思っていたが登頂後のシナリオに感動してしまった．完全に油断していた 結構傑作だと思ってる．数年後にもう一回やりたい elec head 通電をコンセプトにしたメトロイドヴァニア パズル要素が強いが，所々で求められるアクション要素もおもしろい cat in the box 宗教文化が根付いていた廃墟に忍び込んだ youtuber を操作するツクール脱出ゲーム ホラーだがジャンプスケアは少なめ 主人公が三白眼 + たれ目 でとてもかわいい．表情も豊かで見ていて楽しい 全エンドをみたが救いがなかった． 隠し要素も拾ったがかなり作りこまれていて素晴らしい タイトルの仕掛けを初見で踏んでしまってガチ怖かった思い出がある 常世の塔 塔を上るアクションゲーム 日ごとに塔の内容が変化する キャラがいちいちかわいい．カットインが各キャラで作られていてすごい goodnight meowmei ネコのえさや薬を集めるホラーゲーム ホラーゲームだがジャンプスケアは少なめ 邦訳を担当した ミノリア ソウルライクらしいアクションゲーム 難易度は低めだが，死亡時のペナルティがかなりでかい（セーブポイント～死亡までに集めたすべてを強制的に失うので，マップ開拓とソウル集めをもう一回やる必要がある） ボリュームや敵バリエーションは少なめ パリィ持続時間はかなり長く，致命攻撃も自動でやってくれる上に範囲攻撃なのでパリィ対象でない敵も範囲内なら巻き込んでくれる． キャラデザはかわいい． blasphemous メトロイドヴァニア×ソウルライクみたいなゲーム ボスデザインがかなりグロテスクで，なんならソウルシリーズよりも凝ってるんじゃないか？どちらかというとブラッドボーン 全部ピクセルアートで描かれている．フレームレートもかなり細かくアニメーションが作られていて，スキル発 動時やアイテム使用時のエフェクトもかなり画面範囲が広く，相当の作業量が感じられる 難易度は普通くらい ラススボスとアスレチックコンテンツはいまいちだった．なぜソウルライクのラスボスはこうなってしまうの か．．． ボスのモノローグを毎回挟むのはうっとおしかったがよく考えたらインディーズなんだよな そのほか 今年はずっと Vtuber 見てる</description>
    </item>
    
    <item>
      <title>魚類</title>
      <link>http://side-realms.github.io/sound/fish/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/fish/</guid>
      <description>魚類の聴覚 水中では，音は縦波の圧縮波として音圧を，近距離では水粒子の動きとして感知される． 魚類も同様に聴覚があり，内耳を用いて圧縮波を感知する一方で，近距離の水粒子の動きを側線で感知する． 魚の内耳は，一方で蝸牛がない．三半規管の下に配置されている3つの嚢の中に有毛細胞が存在し， それぞれが耳石と連携している． 音によって魚の体が振動するが，耳石は魚の本体と比べて比重が3倍大きいので，その振動から位相が遅れる． このずれが有毛細胞全体を倒すことになり，チャネルが開く． これとは別に、鰾を使って音を感知できる魚類もいる． つまり，鰾が内耳とつながっていて，音圧によってこの鰾が振動する． このように，鰾を使うと音の圧力変化(スカラー量)をよく感知することができる． つまり，遠距離からの音圧を感知することができる 一方で，鰾が内耳と連携していない魚類は，前述のとおりベクトル成分しか感知することができない． つまり近距離の粒子運動しか感知することができない．
人間など陸上動物が鼓膜を使うことができる理由は，空気よりも音響インピーダンスが高い 肉体をもつためである． この肉体に固定された鼓膜の振動として，音をスムーズに感知することができる． 一方で，魚は水と音響インピーダンスの差がほとんどない． そこで，耳石が使われることになる． 多くの魚の周波数感度は低く，おおむね 2 kHz 以下の周波数帯域である．
音源定位 魚は音源の位置が学習できなかったという報告(ハヤ)がある一方で， 威嚇音を使った追い込み漁や，求愛のために魚が音を発する例もある． 実際には水平方向，垂直方向に識別できることが知られている．
人間は両耳の強度差や時間差を使って音源定位をする一方で， 魚類はわからないことが多い． 人間は頭部が貫通する音が減衰することから強度差を求めることができるが， 魚類は周りの水と同じように体組織が音を通過するため，強度差を計測することができない． また，水中の音速も空気中の 5 倍程度であり魚類の左右の耳の距離も考慮すると 時間差を考えることも難しい． こういったことから，現在では鰾を用いて感知される音圧の位相差を使って音源定位をすることができる といわれている．
発音する魚 発音する魚が存在する．例えば繁殖期や，幼魚が生息場所に戻るため， 逃走行動など様々な手段がある． 加えて，コーラスのような現象がみられる魚類も存在する． ただ，ごく限られたグループだけが(10%)鳴くらしい． この「鳴く」の定義は，鳴くことのための器官が存在するということとされている．
この発音方式は主に二つ存在する． 一つは発音筋の振動音である．発音筋の振動が鰾で共鳴することで発音される．ピラニアとか． もう一つは骨の摩擦振動である．シロホンのように，くぼみの付いた骨がこすられることで音が発せられる．
例えばスズメダイを例に挙げると， 繁殖行動の際は，営巣のときに音を出す．メス用の産卵場所の準備が整ったことを知らせる． また，攻撃行動の差異にも音を出す．卵を食べる捕食者を見つけたときに追い返すための音である． また，求愛の差異にも音を出す．オスはループ状の遊泳とジグザグ遊泳によってメスを誘引するが， メスとのつがいが見つかって，巣までひきつれる際にオスは発音をし続ける．
一方で，配偶者選択にどのように使われているかはまだ研究されている． 例えばカエルは広告音として音を出し，自分の繁殖モチベーションを伝えるとともに繁殖可能なメスを 誘引することができるが，スズメダイの繁殖音も同様に遠くまで遠く伝わることが知られている． しかし，どのような要因でつがいの選択をしているかということは知られていない． 例えば体の大きなオスは体の強さからメスが引き寄せられる要因の一つとして上げられる． 体の大きさを判別する特徴の一つは，例えば周波数特性や強度，パルス音の持続時間などである． また，これ以外にも体の健康状態などが指標に上げられるという説もある．
側線器官 側線は，ごく小さな穴がならんだ点線が並んだようになっていて，この数は魚によって変化する． これは内耳の有毛細胞とよく似た仕組みを持っていて，感覚毛にある 刺激受容体が，水の動きに反応してその電位を変化させる． これが感覚神経によって中枢に伝達される． この側線器官は単に音だけでなく，水流を感知するためにも使われている． 魚は上流に向かって体を保持する特性があるが，その際に水流を感知する必要がある． この水流は，とくに流速に勾配がある際に有効に感知できることが知られている． これ以外にも，洞窟魚(盲目な魚類)は側線感覚を使って活動するが， 例えば壁に近づくと，水圧・水流が強くなるため，その勾配を側線器官によって感知できるらしい． 活動以外には採餌活動に使われる．餌の対象が近くに来ると水流が変化するので，見つけることができる． 餌によって水流の変化が違うのか気になる． 採餌でなくても，群遊泳に使われるという傾向がある．しかし，群遊泳はどちらかというと 視覚情報を使っていて，側線器官はどちらかというと補助的な役割であることが報告されている．</description>
    </item>
    
    <item>
      <title>鳥類</title>
      <link>http://side-realms.github.io/sound/bird/</link>
      <pubDate>Mon, 28 Aug 2023 17:57:25 +0900</pubDate>
      
      <guid>http://side-realms.github.io/sound/bird/</guid>
      <description>鳴禽類 鳴禽類は例えば雀やカナリアなどの鳥類で，二種類の音声で鳴く． 一つは地鳴きといい，警戒音など生まれつき発生することができる音声がある． 二つ目はソングといい，複数の音がある規則に従って連なる音声のことをいう． 求愛や縄張り争いに使われ，幼鳥期に会得する．幼鳥期は歌を学習する必要があるが，それは二段階に分かれている． 最初は感覚学習期といい，お手本となる歌を聴いて自信の記憶を形成する． 次に感覚運動学習期では，その歌を実現しようと練習する． 人間と同じで自分の発声とそのフィードバックを得て修正を繰り返しながら発声を練習する． ジュウシマツとコシジロキンパラはその学習過程でよく比較されるが，ジュウシマツとコシジロキンパラはその文法学習に差がある． ジュウシマツは音素を複雑に構成して歌を形成する． しかしその歌は規則性があるわけではなく，音素を組み替えて歌うことができる． 一方でコシジロは規則的な・単調な歌しか歌えない． これは里親を変更したときは両鳥ともに単調な歌しか歌えなかったので，ジュウシマツにしか学習能力がないことがわかる． 一方で，鳴禽類以外の鳥は内耳を切除しても普段通りの鳴き声を実現したものもある． そのため，学習せずに遺伝子的に鳴く鳥もある
フクロウ フクロウは当然夜行性なので，優れた視覚と聴覚をもつ．そのために音源定位が必要． 例えばメンフクロウは音の方向に対して顔を向ける性質があるが，これを利用してメンフクロウの 音源定位を調査できる． これを利用するとフクロウの音源定位は人間よりも精度がよく，数度でわかるらしい．すご
フクロウの音源定位のよさは耳の位置による．特にメンフクロウは左耳が右耳よりも高い位置にあり， 左耳は下向きに，右耳は上向きについている．
歌学習 鳴禽類がどのように歌を学習するかは発達過程における環境要因が影響している． 例えば聴覚を除去した鳥は不明瞭かつ不安定な歌を歌う． 一方で，周囲の環境から完全に隔離した鳥類はまったく音素が特徴的な歌を歌うようになる． これ以外にも，遺伝子的な要因で周波数が変化したり，スピーカから学ぶか，成鳥から学ぶかでも変化する． (成鳥の方が精度がよく，コミュニケーションが重要であるといえる．)
鳥類が歌を学ぶ理由はいくつかあるが，主にシグネチャーと求愛である． 歌は土地や育ちによって完全に違うため，そのテリトリーにいた個体であること(侵入者でないこと)の証明として歌を学習し，歌う． このときにオスは，その個体・テリトリーに特有の歌を学ぶのではなく，普遍的な歌を学ぶ必要がある． (付近の歌の規則はよく似ている．) 鳥類はたしかに自分のなわばりの歌を認知することが知られていて， 持ち主のオスがいなくなるとそのなわばりが失われてしまうらしい． また，求愛の際にも歌は重要である． メスは新規性のある歌は好まず，自分のテリトリーに似通った歌を好む傾向にある． ただし，全く違う歌や全く同じ歌は好まず，適応的淘汰に対応した選好がされている． また，メスは「モノマネ」を識別することができる． つまり，多種が真似したソングをそれと認識することができる．
幼鳥を教える際には成鳥は要素をいつもよりも長く歌うらしい． けっこう高度な社会を構築しているように見える．すごいな
鳥類がソングをどのように判別しているかは議論されている． 例えばシジュウカラは，違うソングを聞かせるとその鳴き声が変化することが分かっている． しかし，シジュウカラに馴化や脱馴化はみられない． そのため，どのようにソングを識別しているのか，という点についてはまだ議論されている．
歌の意味 前述のとおり，鳥類における歌はテリトリーの主張や，求愛に使われる． そのためか，メスは歌うことができず，オスだけが歌うことができる． ただしカナリアはメスでも歌い，投薬によってオスほど鳴くことが知られている．
ところで，歌には方言があることが知られている． 大陸では数十キロごとに歌に変化がある．同じ周波数でも規則性が違ったり， 周波数さえ違うこともある． 日本でも同じような現象が見られ，本土と島嶼や島嶼ごとに方言のような差異がみられる． これには環境の変化などが理由に上がる． 例えば，本土は季節ごとにそのなわばりを移動するため，その頻度が多いが， 島嶼の鳥は季節的な移動がないため，なわばり争いの頻度も少ない． また，本土は繁殖失敗の要素が多く(敵の存在)，性淘汰に対する圧力が大きいが， 島嶼はそうではない． あるいは，どんな種類の鳥類がいるか，ということも方言を生み出している． 例えば自分のソングに似た鳥類が周りにいると，不必要な争いに巻き込まれる可能性がある． そこで，方言的にソングを変えることでこうした争いを減らしている． こうした理由が地域差を生み出していると考えられている． このような方言が種別化を生み出すことがあるか，という点は議論されているらしい． おもろ
方言とは関係なく，鳥類はその環境に応じてその鳴き声を適応させる． 例えば騒音がうるさい都市では，そのソングの周波数・音圧・鳴く時間を適応させることが知られている． また，森林では低周波が減衰されにくいため，森林にすむ鳥は低周波の純音を使用する傾向にある．
加齢によって歌は変化する． 経験を重ねるにつれて，歌学習をする鳥類は歌のれぱーとりーが増えたり， 周波数幅や速度の上昇などがみられる．こういった要素からメスはオスの年齢を指標とする． 一方で，加齢によって歌の速度や周波数幅が減少する種別もみられる． こういった歌の加齢による変化は，ないと考えられていた． 幼鳥期のみに歌学習がおこるからである． しかし，こうした加齢によって歌が変化することは減少として確認されており， こうした可塑性がどれほどあるのか，コミュニケーションや社会にどのような 影響を及ぼしているのか，などはほとんどわかっていないらしい．</description>
    </item>
    
  </channel>
</rss>
